<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="libopenrave_8cpp" kind="file">
    <compoundname>libopenrave.cpp</compoundname>
    <includes refid="libopenrave_8cpp" local="yes">libopenrave.h</includes>
    <includes refid="openrave_8h" local="no">openrave/openrave.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">list</includes>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">time.h</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">boost/bind.hpp</includes>
    <includes local="no">boost/version.hpp</includes>
    <includes local="no">boost/scoped_ptr.hpp</includes>
    <includes local="no">boost/utility.hpp</includes>
    <includes local="no">boost/thread/once.hpp</includes>
    <includes local="no">streambuf</includes>
    <includes local="yes">md5.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">locale</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">dlfcn.h</includes>
    <includes local="no">dirent.h</includes>
    <includes local="no">boost/thread/condition.hpp</includes>
    <includes local="no">boost/thread/mutex.hpp</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes local="no">libxml/globals.h</includes>
    <includes local="no">libxml/xmlerror.h</includes>
    <includes local="no">libxml/parser.h</includes>
    <includes local="no">libxml/parserInternals.h</includes>
    <includes local="no">libxml/tree.h</includes>
    <includes local="no">libxml/debugXML.h</includes>
    <includes local="no">libxml/xmlmemory.h</includes>
    <includedby refid="libopenrave_8cpp" local="yes">src/libopenrave/libopenrave.cpp</includedby>
    <incdepgraph>
      <node id="3476">
        <label>sys/stat.h</label>
      </node>
      <node id="3421">
        <label>list</label>
      </node>
      <node id="3478">
        <label>locale</label>
      </node>
      <node id="3485">
        <label>libxml/xmlerror.h</label>
      </node>
      <node id="3433">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="3458">
        <label>openrave/robot.h</label>
        <link refid="robot_8h"/>
      </node>
      <node id="3415">
        <label>stdarg.h</label>
      </node>
      <node id="3465">
        <label>openrave/environment.h</label>
        <link refid="environment_8h"/>
      </node>
      <node id="3450">
        <label>openrave/plugininfo.h</label>
        <link refid="plugininfo_8h"/>
      </node>
      <node id="3452">
        <label>openrave/spacesampler.h</label>
        <link refid="spacesampler_8h"/>
      </node>
      <node id="3425">
        <label>iomanip</label>
      </node>
      <node id="3470">
        <label>boost/version.hpp</label>
      </node>
      <node id="3429">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="3445">
        <label>limits</label>
      </node>
      <node id="3448">
        <label>openrave/mathextra.h</label>
        <link refid="mathextra_8h"/>
        <childnode refid="3447" relation="include">
        </childnode>
        <childnode refid="3443" relation="include">
        </childnode>
        <childnode refid="3449" relation="include">
        </childnode>
      </node>
      <node id="3431">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="3483">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="3435">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="3440">
        <label>openrave/config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="3418">
        <label>stdint.h</label>
      </node>
      <node id="3437">
        <label>boost/format.hpp</label>
      </node>
      <node id="3441">
        <label>openrave/interfacehashes.h</label>
        <link refid="interfacehashes_8h"/>
      </node>
      <node id="3443">
        <label>cmath</label>
      </node>
      <node id="3479">
        <label>errno.h</label>
      </node>
      <node id="3447">
        <label>cassert</label>
      </node>
      <node id="3436">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="3434">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="3486">
        <label>libxml/parser.h</label>
      </node>
      <node id="3419">
        <label>string</label>
      </node>
      <node id="3430">
        <label>boost/weak_ptr.hpp</label>
      </node>
      <node id="3422">
        <label>map</label>
      </node>
      <node id="3424">
        <label>exception</label>
      </node>
      <node id="3426">
        <label>fstream</label>
      </node>
      <node id="3412">
        <label>src/libopenrave/libopenrave.cpp</label>
        <link refid="libopenrave.cpp"/>
        <childnode refid="3412" relation="include">
        </childnode>
        <childnode refid="3413" relation="include">
        </childnode>
        <childnode refid="3419" relation="include">
        </childnode>
        <childnode refid="3420" relation="include">
        </childnode>
        <childnode refid="3421" relation="include">
        </childnode>
        <childnode refid="3422" relation="include">
        </childnode>
        <childnode refid="3423" relation="include">
        </childnode>
        <childnode refid="3466" relation="include">
        </childnode>
        <childnode refid="3418" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3444" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3467" relation="include">
        </childnode>
        <childnode refid="3468" relation="include">
        </childnode>
        <childnode refid="3469" relation="include">
        </childnode>
        <childnode refid="3470" relation="include">
        </childnode>
        <childnode refid="3471" relation="include">
        </childnode>
        <childnode refid="3472" relation="include">
        </childnode>
        <childnode refid="3473" relation="include">
        </childnode>
        <childnode refid="3474" relation="include">
        </childnode>
        <childnode refid="3475" relation="include">
        </childnode>
        <childnode refid="3476" relation="include">
        </childnode>
        <childnode refid="3477" relation="include">
        </childnode>
        <childnode refid="3478" relation="include">
        </childnode>
        <childnode refid="3479" relation="include">
        </childnode>
        <childnode refid="3480" relation="include">
        </childnode>
        <childnode refid="3481" relation="include">
        </childnode>
        <childnode refid="3482" relation="include">
        </childnode>
        <childnode refid="3433" relation="include">
        </childnode>
        <childnode refid="3483" relation="include">
        </childnode>
        <childnode refid="3484" relation="include">
        </childnode>
        <childnode refid="3485" relation="include">
        </childnode>
        <childnode refid="3486" relation="include">
        </childnode>
        <childnode refid="3487" relation="include">
        </childnode>
        <childnode refid="3488" relation="include">
        </childnode>
        <childnode refid="3489" relation="include">
        </childnode>
        <childnode refid="3490" relation="include">
        </childnode>
      </node>
      <node id="3456">
        <label>openrave/collisionchecker.h</label>
        <link refid="collisionchecker_8h"/>
      </node>
      <node id="3428">
        <label>boost/function.hpp</label>
      </node>
      <node id="3461">
        <label>openrave/controller.h</label>
        <link refid="controller_8h"/>
      </node>
      <node id="3490">
        <label>libxml/xmlmemory.h</label>
      </node>
      <node id="3473">
        <label>boost/thread/once.hpp</label>
      </node>
      <node id="3460">
        <label>openrave/planner.h</label>
        <link refid="planner_8h"/>
      </node>
      <node id="3413">
        <label>openrave/openrave.h</label>
        <link refid="openrave_8h"/>
        <childnode refid="3414" relation="include">
        </childnode>
        <childnode refid="3415" relation="include">
        </childnode>
        <childnode refid="3416" relation="include">
        </childnode>
        <childnode refid="3417" relation="include">
        </childnode>
        <childnode refid="3418" relation="include">
        </childnode>
        <childnode refid="3419" relation="include">
        </childnode>
        <childnode refid="3420" relation="include">
        </childnode>
        <childnode refid="3421" relation="include">
        </childnode>
        <childnode refid="3422" relation="include">
        </childnode>
        <childnode refid="3423" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3428" relation="include">
        </childnode>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3430" relation="include">
        </childnode>
        <childnode refid="3431" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3433" relation="include">
        </childnode>
        <childnode refid="3434" relation="include">
        </childnode>
        <childnode refid="3435" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3438" relation="include">
        </childnode>
        <childnode refid="3439" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3442" relation="include">
        </childnode>
        <childnode refid="3448" relation="include">
        </childnode>
        <childnode refid="3450" relation="include">
        </childnode>
        <childnode refid="3451" relation="include">
        </childnode>
        <childnode refid="3452" relation="include">
        </childnode>
        <childnode refid="3453" relation="include">
        </childnode>
        <childnode refid="3454" relation="include">
        </childnode>
        <childnode refid="3455" relation="include">
        </childnode>
        <childnode refid="3456" relation="include">
        </childnode>
        <childnode refid="3457" relation="include">
        </childnode>
        <childnode refid="3458" relation="include">
        </childnode>
        <childnode refid="3459" relation="include">
        </childnode>
        <childnode refid="3460" relation="include">
        </childnode>
        <childnode refid="3461" relation="include">
        </childnode>
        <childnode refid="3462" relation="include">
        </childnode>
        <childnode refid="3463" relation="include">
        </childnode>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3465" relation="include">
        </childnode>
      </node>
      <node id="3477">
        <label>sys/types.h</label>
      </node>
      <node id="3414">
        <label>cstdio</label>
      </node>
      <node id="3464">
        <label>openrave/viewer.h</label>
        <link refid="viewer_8h"/>
      </node>
      <node id="3482">
        <label>boost/thread/condition.hpp</label>
      </node>
      <node id="3420">
        <label>vector</label>
      </node>
      <node id="3484">
        <label>libxml/globals.h</label>
      </node>
      <node id="3474">
        <label>streambuf</label>
      </node>
      <node id="3453">
        <label>openrave/kinbody.h</label>
        <link refid="kinbody_8h"/>
      </node>
      <node id="3446">
        <label>utility</label>
      </node>
      <node id="3427">
        <label>sstream</label>
      </node>
      <node id="3472">
        <label>boost/utility.hpp</label>
      </node>
      <node id="3463">
        <label>openrave/sensorsystem.h</label>
        <link refid="sensorsystem_8h"/>
      </node>
      <node id="3462">
        <label>openrave/physicsengine.h</label>
        <link refid="physicsengine_8h"/>
      </node>
      <node id="3432">
        <label>boost/enable_shared_from_this.hpp</label>
      </node>
      <node id="3467">
        <label>time.h</label>
      </node>
      <node id="3442">
        <label>openrave/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="3443" relation="include">
        </childnode>
        <childnode refid="3444" relation="include">
        </childnode>
        <childnode refid="3445" relation="include">
        </childnode>
        <childnode refid="3446" relation="include">
        </childnode>
        <childnode refid="3416" relation="include">
        </childnode>
        <childnode refid="3417" relation="include">
        </childnode>
        <childnode refid="3447" relation="include">
        </childnode>
      </node>
      <node id="3417">
        <label>cstdlib</label>
      </node>
      <node id="3471">
        <label>boost/scoped_ptr.hpp</label>
      </node>
      <node id="3468">
        <label>sys/time.h</label>
      </node>
      <node id="3444">
        <label>iostream</label>
      </node>
      <node id="3454">
        <label>openrave/trajectory.h</label>
        <link refid="trajectory_8h"/>
      </node>
      <node id="3449">
        <label>climits</label>
      </node>
      <node id="3487">
        <label>libxml/parserInternals.h</label>
      </node>
      <node id="3469">
        <label>boost/bind.hpp</label>
      </node>
      <node id="3451">
        <label>openrave/interface.h</label>
        <link refid="interface_8h"/>
      </node>
      <node id="3459">
        <label>openrave/iksolver.h</label>
        <link refid="iksolver_8h"/>
      </node>
      <node id="3488">
        <label>libxml/tree.h</label>
      </node>
      <node id="3438">
        <label>boost/array.hpp</label>
      </node>
      <node id="3489">
        <label>libxml/debugXML.h</label>
      </node>
      <node id="3455">
        <label>openrave/module.h</label>
        <link refid="module_8h"/>
      </node>
      <node id="3423">
        <label>set</label>
      </node>
      <node id="3439">
        <label>boost/multi_array.hpp</label>
      </node>
      <node id="3466">
        <label>algorithm</label>
      </node>
      <node id="3475">
        <label>md5.h</label>
      </node>
      <node id="3416">
        <label>cstring</label>
      </node>
      <node id="3457">
        <label>openrave/sensor.h</label>
        <link refid="sensor_8h"/>
      </node>
      <node id="3481">
        <label>dirent.h</label>
      </node>
      <node id="3480">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3491">
        <label>src/libopenrave/libopenrave.cpp</label>
        <link refid="libopenrave.cpp"/>
        <childnode refid="3491" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classOpenRAVE_1_1RaveGlobal" prot="public">OpenRAVE::RaveGlobal</innerclass>
    <innerclass refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData" prot="public">OpenRAVE::RaveGlobal::XMLReaderFunctionData</innerclass>
    <innerclass refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" prot="public">OpenRAVE::LocalXML::XMLREADERDATA</innerclass>
    <innernamespace refid="namespaceOpenRAVE">OpenRAVE</innernamespace>
    <innernamespace refid="namespaceOpenRAVE_1_1LocalXML">OpenRAVE::LocalXML</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="libopenrave_8cpp_1a80771fc578adecb52cae709d500ef117" prot="public" static="no">
        <name>LIBXML_SAX1_ENABLED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="37" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>-*-<sp/>coding:<sp/>utf-8<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2006-2011<sp/>Rosen<sp/>Diankov<sp/>&lt;rosen.diankov@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>OpenRAVE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OpenRAVE<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;libopenrave.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/scoped_ptr.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/utility.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/thread/once.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;streambuf&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;md5.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;plugindatabase.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="libopenrave_8cpp_1a80771fc578adecb52cae709d500ef117" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBXML_SAX1_ENABLED</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/globals.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/xmlerror.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/parser.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/parserInternals.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>xmlNewInputFromFile()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/tree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/debugXML.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/xmlmemory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">OpenRAVE<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a4838674098c908bd57c559f3fa7549d8" kindref="member">s_filesep</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="52" refid="namespaceOpenRAVE_1a4838674098c908bd57c559f3fa7549d8" refkind="member"><highlight class="preprocessor"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a4838674098c908bd57c559f3fa7549d8" kindref="member">s_filesep</ref><sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_CRLIBM)</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_ACCURACY_RESULTS_H</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>LIBM_ACCURACY_RESULTS_H</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>round-nearest<sp/>versions<sp/>since<sp/>it<sp/>is<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_EXP_ACCURATE</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga6adcc9e6c97a5451a24e9d2a007bc14e" kindref="member" tooltip="exponential">RaveExp</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp(f);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga6adcc9e6c97a5451a24e9d2a007bc14e" kindref="member" tooltip="exponential">RaveExp</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp_rn(f);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_LOG_ACCURATE</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga83499e2abeec72291e96f7afc38120a4" kindref="member" tooltip="logarithm">RaveLog</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log(f);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga83499e2abeec72291e96f7afc38120a4" kindref="member" tooltip="logarithm">RaveLog</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log_rn(f);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_COS_ACCURATE</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga7a5b5d031430f5e42038c4043a18d2a9" kindref="member" tooltip="cosine">RaveCos</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cos(f);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga7a5b5d031430f5e42038c4043a18d2a9" kindref="member" tooltip="cosine">RaveCos</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cos_rn(f);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_SIN_ACCURATE</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4909179343022636db56f4e4b664415" kindref="member" tooltip="sine">RaveSin</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sin(f);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4909179343022636db56f4e4b664415" kindref="member" tooltip="sine">RaveSin</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sin_rn(f);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_TAN_ACCURATE</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga551bddbd42a69da9c05b4d3e659cec9c" kindref="member" tooltip="tangent">RaveTan</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tan(f);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga551bddbd42a69da9c05b4d3e659cec9c" kindref="member" tooltip="tangent">RaveTan</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tan_rn(f);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_LOG2_ACCURATE</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4b2138f29ce2883e27096d0e061e37d" kindref="member" tooltip="base 2 logarithm">RaveLog2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log2(f);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4b2138f29ce2883e27096d0e061e37d" kindref="member" tooltip="base 2 logarithm">RaveLog2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log2_rn(f);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_LOG10_ACCURATE</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga1aa2efa7951a2a6a7c4f057081cc13a0" kindref="member" tooltip="base 10 logarithm">RaveLog10</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log10(f);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga1aa2efa7951a2a6a7c4f057081cc13a0" kindref="member" tooltip="base 10 logarithm">RaveLog10</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log10_rn(f);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_ACOS_ACCURATE</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga2ffd106aea1fe479ed88e7503a8c44f7" kindref="member" tooltip="arccosine">RaveAcos</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acos(f);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga2ffd106aea1fe479ed88e7503a8c44f7" kindref="member" tooltip="arccosine">RaveAcos</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acos_rn(f);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_ASIN_ACCURATE</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga756e28fdb4f459b0fbad627c6dfdae0e" kindref="member" tooltip="arcsine">RaveAsin</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asin(f);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga756e28fdb4f459b0fbad627c6dfdae0e" kindref="member" tooltip="arcsine">RaveAsin</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asin_rn(f);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_ATAN2_ACCURATE</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga6221cab32e5309e3c0371b4f5cbb3a11" kindref="member" tooltip="arctangent2 covering entire circle">RaveAtan2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>y,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atan2(y,x);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga6221cab32e5309e3c0371b4f5cbb3a11" kindref="member" tooltip="arctangent2 covering entire circle">RaveAtan2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>y,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>x)<sp/></highlight><highlight class="comment">//<sp/>unfortunately<sp/>no<sp/>atan2<sp/>in<sp/>crlibm...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>absx,<sp/>absy,<sp/>val;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>==<sp/>0)&amp;&amp;(y<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>absy<sp/>=<sp/>y<sp/>&lt;<sp/>0<sp/>?<sp/>-y<sp/>:<sp/>y;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>absx<sp/>=<sp/>x<sp/>&lt;<sp/>0<sp/>?<sp/>-x<sp/>:<sp/>x;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absy<sp/>-<sp/>absx<sp/>==<sp/>absy)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>negligible<sp/>compared<sp/>to<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>&lt;<sp/>0<sp/>?<sp/>-M_PI_2<sp/>:<sp/>M_PI_2;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absx<sp/>-<sp/>absy<sp/>==<sp/>absx)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>negligible<sp/>compared<sp/>to<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>atan_rn(y/x);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>or<sp/>fourth<sp/>quadrant;<sp/>already<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>quadrant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>-<sp/>M_PI;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val<sp/>+<sp/>M_PI;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_POW_ACCURATE</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga13111a44a6a62bbb80f65566718457ad" kindref="member" tooltip="power x^y">RavePow</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>x,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow(x,y);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga13111a44a6a62bbb80f65566718457ad" kindref="member" tooltip="power x^y">RavePow</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>x,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow_rn(x,y);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBM_SQRT_ACCURATE</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gafa1579e29c1d08021a480474661ea385" kindref="member" tooltip="square-root">RaveSqrt</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(f);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gafa1579e29c1d08021a480474661ea385" kindref="member" tooltip="square-root">RaveSqrt</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(f);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//dReal<sp/>RaveSqrt(dReal<sp/>f)<sp/>{<sp/>return<sp/>pow_rn(f,0.5);<sp/>}<sp/>//<sp/>NOTE:<sp/>this<sp/>is<sp/>really<sp/>slow,<sp/>is<sp/>it<sp/>really<sp/>worth<sp/>the<sp/>precision?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga500226250a97dadb70d64615b4526388" kindref="member" tooltip="absolute value">RaveFabs</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabs(f);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>use<sp/>all<sp/>standard<sp/>libm</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>OPENRAVE_PRECISION<sp/>==<sp/>0<sp/>//<sp/>floating-point</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga6adcc9e6c97a5451a24e9d2a007bc14e" kindref="member" tooltip="exponential">RaveExp</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expf(f);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga83499e2abeec72291e96f7afc38120a4" kindref="member" tooltip="logarithm">RaveLog</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>logf(f);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga7a5b5d031430f5e42038c4043a18d2a9" kindref="member" tooltip="cosine">RaveCos</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cosf(f);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4909179343022636db56f4e4b664415" kindref="member" tooltip="sine">RaveSin</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sinf(f);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga551bddbd42a69da9c05b4d3e659cec9c" kindref="member" tooltip="tangent">RaveTan</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tanf(f);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAS_LOG2</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4b2138f29ce2883e27096d0e061e37d" kindref="member" tooltip="base 2 logarithm">RaveLog2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log2f(f);</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4b2138f29ce2883e27096d0e061e37d" kindref="member" tooltip="base 2 logarithm">RaveLog2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>logf(f)/logf(2.0f);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga1aa2efa7951a2a6a7c4f057081cc13a0" kindref="member" tooltip="base 10 logarithm">RaveLog10</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log10f(f);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga2ffd106aea1fe479ed88e7503a8c44f7" kindref="member" tooltip="arccosine">RaveAcos</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acosf(f);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga756e28fdb4f459b0fbad627c6dfdae0e" kindref="member" tooltip="arcsine">RaveAsin</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asinf(f);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga6221cab32e5309e3c0371b4f5cbb3a11" kindref="member" tooltip="arctangent2 covering entire circle">RaveAtan2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fy,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fx)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atan2f(fy,fx);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga13111a44a6a62bbb80f65566718457ad" kindref="member" tooltip="power x^y">RavePow</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fx,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fy)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>powf(fx,fy);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gafa1579e29c1d08021a480474661ea385" kindref="member" tooltip="square-root">RaveSqrt</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrtf(f);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga500226250a97dadb70d64615b4526388" kindref="member" tooltip="absolute value">RaveFabs</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabsf(f);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="248" refid="group__affine__math_1ga6adcc9e6c97a5451a24e9d2a007bc14e" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga6adcc9e6c97a5451a24e9d2a007bc14e" kindref="member" tooltip="exponential">RaveExp</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp(f);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251" refid="group__affine__math_1ga83499e2abeec72291e96f7afc38120a4" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga83499e2abeec72291e96f7afc38120a4" kindref="member" tooltip="logarithm">RaveLog</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log(f);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254" refid="group__affine__math_1ga7a5b5d031430f5e42038c4043a18d2a9" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga7a5b5d031430f5e42038c4043a18d2a9" kindref="member" tooltip="cosine">RaveCos</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cos(f);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257" refid="group__affine__math_1gae4909179343022636db56f4e4b664415" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4909179343022636db56f4e4b664415" kindref="member" tooltip="sine">RaveSin</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sin(f);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260" refid="group__affine__math_1ga551bddbd42a69da9c05b4d3e659cec9c" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga551bddbd42a69da9c05b4d3e659cec9c" kindref="member" tooltip="tangent">RaveTan</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tan(f);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAS_LOG2</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4b2138f29ce2883e27096d0e061e37d" kindref="member" tooltip="base 2 logarithm">RaveLog2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log2(f);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="268" refid="group__affine__math_1gae4b2138f29ce2883e27096d0e061e37d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gae4b2138f29ce2883e27096d0e061e37d" kindref="member" tooltip="base 2 logarithm">RaveLog2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log(f)/log(2.0f);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="272" refid="group__affine__math_1ga1aa2efa7951a2a6a7c4f057081cc13a0" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga1aa2efa7951a2a6a7c4f057081cc13a0" kindref="member" tooltip="base 10 logarithm">RaveLog10</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log10(f);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275" refid="group__affine__math_1ga2ffd106aea1fe479ed88e7503a8c44f7" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga2ffd106aea1fe479ed88e7503a8c44f7" kindref="member" tooltip="arccosine">RaveAcos</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acos(f);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278" refid="group__affine__math_1ga756e28fdb4f459b0fbad627c6dfdae0e" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga756e28fdb4f459b0fbad627c6dfdae0e" kindref="member" tooltip="arcsine">RaveAsin</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asin(f);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281" refid="group__affine__math_1ga6221cab32e5309e3c0371b4f5cbb3a11" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga6221cab32e5309e3c0371b4f5cbb3a11" kindref="member" tooltip="arctangent2 covering entire circle">RaveAtan2</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fy,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fx)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atan2(fy,fx);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284" refid="group__affine__math_1ga13111a44a6a62bbb80f65566718457ad" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga13111a44a6a62bbb80f65566718457ad" kindref="member" tooltip="power x^y">RavePow</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fx,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fy)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow(fx,fy);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287" refid="group__affine__math_1gafa1579e29c1d08021a480474661ea385" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1gafa1579e29c1d08021a480474661ea385" kindref="member" tooltip="square-root">RaveSqrt</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(f);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290" refid="group__affine__math_1ga500226250a97dadb70d64615b4526388" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/><ref refid="group__affine__math_1ga500226250a97dadb70d64615b4526388" kindref="member" tooltip="absolute value">RaveFabs</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabs(f);</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="namespaceOpenRAVE_1a5ca8eb3cd339f687a1285ef1ceb86c59" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::once_flag<sp/><ref refid="namespaceOpenRAVE_1a5ca8eb3cd339f687a1285ef1ceb86c59" kindref="member">_onceRaveInitialize</ref><sp/>=<sp/>BOOST_ONCE_INIT;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classOpenRAVE_1_1RaveGlobal" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classOpenRAVE_1_1RaveGlobal" kindref="compound">RaveGlobal</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>boost::noncopyable,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>boost::enable_shared_from_this&lt;RaveGlobal&gt;,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1UserData" kindref="compound" tooltip="base class for all user data">UserData</ref></highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>CreateXMLReaderFn,<sp/>CaseInsensitiveCompare&gt;<sp/>READERSMAP;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal" kindref="compound">RaveGlobal</ref>()</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>this<sp/>really<sp/>necessary?<sp/>just<sp/>makes<sp/>bugs<sp/>hard<sp/>to<sp/>reproduce...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//srand(GetMilliTime());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//RaveInitRandomGeneration(GetMilliTime());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nDebugLevel<sp/>=<sp/><ref refid="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395ad32083b6cd4e99dafeafe16581277430" kindref="member">Level_Info</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nGlobalEnvironmentId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_Planner]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;planner&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_Robot]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;robot&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_SensorSystem]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sensorsystem&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_Controller]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;controller&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_Module]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;module&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_IkSolver]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;iksolver&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_KinBody]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;kinbody&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_PhysicsEngine]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;physicsengine&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_Sensor]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sensor&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_CollisionChecker]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;collisionchecker&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_Trajectory]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;trajectory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_Viewer]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;viewer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapinterfacenames[PT_SpaceSampler]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;spacesampler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(_mapinterfacenames.size()==PT_NumberOfInterfaces);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea33b4f04338b6d55fe993b6bdd9f66956" kindref="member" tooltip="end effector reaches desired 6D transformation">IKP_Transform6D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Transform6d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea125270b64ed51a89e7021ec7e6d71669" kindref="member" tooltip="end effector reaches desired 3D rotation">IKP_Rotation3D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Rotation3D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eae24724faf9388c7f2ae2c7cbbc9c5e94" kindref="member" tooltip="end effector origin reaches desired 3D translation">IKP_Translation3D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Translation3D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea31424bec585106a5464b4ebe4831acc9" kindref="member" tooltip="direction on end effector coordinate system reaches desired direction">IKP_Direction3D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Direction3D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea4971a1736a1ea39559c0c49601b17533" kindref="member" tooltip="ray on end effector coordinate system reaches desired global ray">IKP_Ray4D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Ray4D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea6c4188710cb0a7084725fefd4c80d642" kindref="member" tooltip="direction on end effector coordinate system points to desired 3D position">IKP_Lookat3D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Lookat3D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea68c40080732ab8a017608e45a2f20d33" kindref="member" tooltip="end effector origin and direction reaches desired 3D translation and direction. Can...">IKP_TranslationDirection5D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TranslationDirection5D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eadcf015cba2fad8597405a442c81e0612" kindref="member" tooltip="2D translation along XY plane">IKP_TranslationXY2D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TranslationXY2D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eacb13532b686d552c5a513aa5296a9465" kindref="member" tooltip="2D translation along XY plane and 1D rotation around Z axis. The offset of the rotation...">IKP_TranslationXYOrientation3D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TranslationXYOrientation3D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapikparameterization[<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea3acb8e5a6b84403f23286a338c46e5a7" kindref="member" tooltip="local point on end effector origin reaches desired 3D global point">IKP_TranslationLocalGlobal6D</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TranslationLocalGlobal6D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(_mapikparameterization.size()==<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eafc80ee4dec1e8de5665d49e6f4bb8d84" kindref="member" tooltip="number of parameterizations (does not count IKP_None)">IKP_NumberOfParameterizations</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="341" refid="classOpenRAVE_1_1RaveGlobal_1ac2539fefc0daeaade543ac67f490fef7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1ac2539fefc0daeaade543ac67f490fef7" kindref="member">~RaveGlobal</ref>()<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1ac919a991060ede6983343719401686de" kindref="member">Destroy</ref>();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::shared_ptr&lt;RaveGlobal&gt;&amp;<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">instance</ref>()</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::call_once(<ref refid="classOpenRAVE_1_1RaveGlobal_1aaefb65b6173e1904e4287a61020634f6" kindref="member">_create</ref>,<ref refid="namespaceOpenRAVE_1a5ca8eb3cd339f687a1285ef1ceb86c59" kindref="member">_onceRaveInitialize</ref>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_state;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="classOpenRAVE_1_1RaveGlobal_1a50aa1ff8ff27a294702189de445c180a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50aa1ff8ff27a294702189de445c180a" kindref="member">Initialize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bLoadAllPlugins,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1aa77713671793cd5226b3437bda30e353" kindref="member">_IsInitialized</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CRLIBM</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_crlibm_fpu_state<sp/>=<sp/>crlibm_init();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>the<sp/>classic<sp/>locale<sp/>so<sp/>that<sp/>number<sp/>serialization/hashing<sp/>works<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::locale::global(std::locale::classic());</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::runtime_error&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>to<sp/>C<sp/>locale:<sp/>%s\n&quot;</highlight><highlight class="normal">,e.what());</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nDebugLevel<sp/>=<sp/>level;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pdatabase.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RaveDatabase());</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!_pdatabase-&gt;Init(bLoadAllPlugins)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a68fcb9db405202c59a760eed602b6658" kindref="member">RAVELOG_FATAL</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>the<sp/>openrave<sp/>plugin<sp/>database\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>phomedir<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;OPENRAVE_HOME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>phomedir<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_homedirectory<sp/>=<sp/>string(getenv(</highlight><highlight class="stringliteral">&quot;HOME&quot;</highlight><highlight class="normal">))+string(</highlight><highlight class="stringliteral">&quot;/.openrave&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_homedirectory<sp/>=<sp/>string(getenv(</highlight><highlight class="stringliteral">&quot;HOMEDRIVE&quot;</highlight><highlight class="normal">))+string(getenv(</highlight><highlight class="stringliteral">&quot;HOMEPATH&quot;</highlight><highlight class="normal">))+string(</highlight><highlight class="stringliteral">&quot;\\.openrave&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_homedirectory<sp/>=<sp/>phomedir;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mkdir(_homedirectory.c_str(),S_IRUSR<sp/>|<sp/>S_IWUSR<sp/>|<sp/>S_IRGRP<sp/>|<sp/>S_IROTH<sp/>|<sp/>S_IRWXU);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CreateDirectory(_homedirectory.c_str(),NULL);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_vdbdirectories.clear();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="namespaceOpenRAVE_1a32f8afb07145a214f906ea827c14422d" kindref="member" tooltip="separates the directories from a string and returns them in a vector">RaveParseDirectories</ref>(getenv(</highlight><highlight class="stringliteral">&quot;OPENRAVE_DATABASE&quot;</highlight><highlight class="normal">),<sp/>_vdbdirectories)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_vdbdirectories.push_back(_homedirectory);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="classOpenRAVE_1_1RaveGlobal_1ac919a991060ede6983343719401686de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1ac919a991060ede6983343719401686de" kindref="member">Destroy</ref>()</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>use<sp/>any<sp/>log<sp/>statements<sp/>since<sp/>global<sp/>instance<sp/>might<sp/>be<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>environments<sp/>have<sp/>to<sp/>be<sp/>destroyed<sp/>carefully<sp/>since<sp/>their<sp/>destructors<sp/>can<sp/>be<sp/>called,<sp/>which<sp/>will<sp/>attempt<sp/>to<sp/>unregister<sp/>the<sp/>environment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>EnvironmentBase*&gt;<sp/>mapenvironments;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(_mutexXML);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapenvironments<sp/>=<sp/>_mapenvironments;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACH(itenv,mapenvironments)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equire<sp/>a<sp/>shared<sp/>pointer<sp/>to<sp/>prevent<sp/>environment<sp/>from<sp/>getting<sp/>deleted<sp/>during<sp/>Destroy<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv<sp/>=<sp/>itenv-&gt;second-&gt;shared_from_this();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>penv-&gt;Destroy();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapenvironments.clear();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapenvironments.clear();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pdefaultsampler.reset();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapreaders.clear();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pdatabase.reset();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CRLIBM</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crlibm_exit(_crlibm_fpu_state);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="classOpenRAVE_1_1RaveGlobal_1aef9910441ce581b6378f0774c05a20f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1aef9910441ce581b6378f0774c05a20f7" kindref="member">GetHomeDirectory</ref>()</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_homedirectory;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="classOpenRAVE_1_1RaveGlobal_1adf292de5999ffe77b742e5419f49d819" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1adf292de5999ffe77b742e5419f49d819" kindref="member">FindDatabaseFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bRead)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACH(itdirectory,_vdbdirectories)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_BOOST_FILESYSTEM</highlight></codeline>
<codeline lineno="432"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fullfilename<sp/>=<sp/>boost::filesystem::system_complete(boost::filesystem::path(*itdirectory)/filename).string();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fullfilename<sp/>=<sp/>*itdirectory;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullfilename<sp/>+=<sp/><ref refid="namespaceOpenRAVE_1a4838674098c908bd57c559f3fa7549d8" kindref="member">s_filesep</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullfilename<sp/>+=<sp/>filename;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>bRead<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!ifstream(fullfilename.c_str())<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullfilename;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fullfilename;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="classOpenRAVE_1_1RaveGlobal_1a34843268c054cbafe3593f44d0a5addb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a34843268c054cbafe3593f44d0a5addb" kindref="member">SetDebugLevel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nDebugLevel<sp/>=<sp/>level;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="classOpenRAVE_1_1RaveGlobal_1a95c27d789f04ceca6d61ccd1038a2917" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a95c27d789f04ceca6d61ccd1038a2917" kindref="member">GetDebugLevel</ref>()</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_nDebugLevel;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData" kindref="compound">XMLReaderFunctionData</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1UserData" kindref="compound" tooltip="base class for all user data">UserData</ref></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="463" refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a941511baf202b95699d1defefab4a3af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a941511baf202b95699d1defefab4a3af" kindref="member">XMLReaderFunctionData</ref>(InterfaceType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xmltag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1adec9e4596e96321e8bf28523753f5d2c" kindref="member">CreateXMLReaderFn</ref>&amp;<sp/>fn,<sp/>boost::shared_ptr&lt;RaveGlobal&gt;<sp/>global)<sp/>:<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ac321d12cd995ea02f624cb2c4c81e351" kindref="member">_global</ref>(global),<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ae662bc46efa44e85747d0d15e0ee56c5" kindref="member">_type</ref>(type),<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a0578402d60f9ef13b1d0b9210ddfad92" kindref="member">_xmltag</ref>(xmltag)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(global-&gt;_mutexXML);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1abfd6e813e61ba985b3f4272dd5d852e3" kindref="member">_oldfn</ref><sp/>=<sp/>global-&gt;_mapreaders[<ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ae662bc46efa44e85747d0d15e0ee56c5" kindref="member">_type</ref>][<ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a0578402d60f9ef13b1d0b9210ddfad92" kindref="member">_xmltag</ref>];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global-&gt;_mapreaders[<ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ae662bc46efa44e85747d0d15e0ee56c5" kindref="member">_type</ref>][<ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a0578402d60f9ef13b1d0b9210ddfad92" kindref="member">_xmltag</ref>]<sp/>=<sp/>fn;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469" refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a9930871bf0bc1b002548d69abd846cf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a9930871bf0bc1b002548d69abd846cf2" kindref="member">~XMLReaderFunctionData</ref>()</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;RaveGlobal&gt;<sp/>global<sp/>=<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ac321d12cd995ea02f624cb2c4c81e351" kindref="member">_global</ref>.lock();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!global<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(global-&gt;_mutexXML);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global-&gt;_mapreaders[<ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ae662bc46efa44e85747d0d15e0ee56c5" kindref="member">_type</ref>][<ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a0578402d60f9ef13b1d0b9210ddfad92" kindref="member">_xmltag</ref>]<sp/>=<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1abfd6e813e61ba985b3f4272dd5d852e3" kindref="member">_oldfn</ref>;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="478" refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1abfd6e813e61ba985b3f4272dd5d852e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1adec9e4596e96321e8bf28523753f5d2c" kindref="member">CreateXMLReaderFn</ref><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1abfd6e813e61ba985b3f4272dd5d852e3" kindref="member">_oldfn</ref>;</highlight></codeline>
<codeline lineno="479" refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ac321d12cd995ea02f624cb2c4c81e351" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::weak_ptr&lt;RaveGlobal&gt;<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ac321d12cd995ea02f624cb2c4c81e351" kindref="member">_global</ref>;</highlight></codeline>
<codeline lineno="480" refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ae662bc46efa44e85747d0d15e0ee56c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterfaceType<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1ae662bc46efa44e85747d0d15e0ee56c5" kindref="member">_type</ref>;</highlight></codeline>
<codeline lineno="481" refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a0578402d60f9ef13b1d0b9210ddfad92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData_1a0578402d60f9ef13b1d0b9210ddfad92" kindref="member">_xmltag</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="classOpenRAVE_1_1RaveGlobal_1a25e7f8f2670b052795003bb26d4f5be9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a25e7f8f2670b052795003bb26d4f5be9" kindref="member">RegisterXMLReader</ref>(InterfaceType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xmltag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1adec9e4596e96321e8bf28523753f5d2c" kindref="member">CreateXMLReaderFn</ref>&amp;<sp/>fn)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1_1XMLReaderFunctionData" kindref="compound">XMLReaderFunctionData</ref>(type,xmltag,fn,shared_from_this()));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489" refid="classOpenRAVE_1_1RaveGlobal_1a32bcb503114c722348dea239ba7aa75d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a32bcb503114c722348dea239ba7aa75d" kindref="member">CallXMLReader</ref>(InterfaceType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xmltag,<sp/><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref><sp/>pinterface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>&amp;<sp/>atts)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>READERSMAP::iterator<sp/>it<sp/>=<sp/>_mapreaders[type].find(xmltag);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>==<sp/>_mapreaders[type].end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//throw<sp/>openrave_exception(str(boost::format(&quot;No<sp/>function<sp/>registered<sp/>for<sp/>interface<sp/>%s<sp/>xml<sp/>tag<sp/>%s&quot;)%GetInterfaceName(type)%xmltag),ORE_InvalidArguments);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref>();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second(pinterface,atts);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="classOpenRAVE_1_1RaveGlobal_1ae58f5951903e445037f1e5f3bd05a91d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;RaveDatabase&gt;<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1ae58f5951903e445037f1e5f3bd05a91d" kindref="member">GetDatabase</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pdatabase;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502" refid="classOpenRAVE_1_1RaveGlobal_1a0f07ab97140ee0a8d6626e09f4eab39c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;InterfaceType,std::string&gt;&amp;<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a0f07ab97140ee0a8d6626e09f4eab39c" kindref="member">GetInterfaceNamesMap</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_mapinterfacenames;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505" refid="classOpenRAVE_1_1RaveGlobal_1a6250df26548e52b1c1c652ed6e29c933" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;IkParameterizationType,std::string&gt;&amp;<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a6250df26548e52b1c1c652ed6e29c933" kindref="member">GetIkParameterizationMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_mapikparameterization;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="classOpenRAVE_1_1RaveGlobal_1ada3adbcd8d765013b1966784795bf887" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1ada3adbcd8d765013b1966784795bf887" kindref="member">GetInterfaceName</ref>(InterfaceType<sp/>type)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;InterfaceType,std::string&gt;::const_iterator<sp/>it<sp/>=<sp/>_mapinterfacenames.find(type);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>==<sp/>_mapinterfacenames.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>type<sp/>%d<sp/>specified&quot;</highlight><highlight class="normal">,<sp/>type,<sp/><ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262caa22653a6ba4b451399c6e9f6aef60b10" kindref="member">ORE_Failed</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>take<sp/>in<sp/>pointer<sp/>instead<sp/>of<sp/>shared_ptr<sp/>since<sp/>method<sp/>will<sp/>be<sp/>called<sp/>in<sp/>EnvironmentBase<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="classOpenRAVE_1_1RaveGlobal_1a5a6cb32da5503770ce1adc19368033fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a5a6cb32da5503770ce1adc19368033fd" kindref="member">RegisterEnvironment</ref>(<ref refid="classOpenRAVE_1_1EnvironmentBase" kindref="compound" tooltip="Maintains a world state, which serves as the gateway to all functions offered through...">EnvironmentBase</ref>*<sp/>penv)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(!!_pdatabase);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(_mutexXML);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapenvironments[++_nGlobalEnvironmentId]<sp/>=<sp/>penv;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_nGlobalEnvironmentId;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="classOpenRAVE_1_1RaveGlobal_1abd8cbcc02982435ee5a3df16092a470a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1abd8cbcc02982435ee5a3df16092a470a" kindref="member">UnregisterEnvironment</ref>(<ref refid="classOpenRAVE_1_1EnvironmentBase" kindref="compound" tooltip="Maintains a world state, which serves as the gateway to all functions offered through...">EnvironmentBase</ref>*<sp/>penv)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(_mutexXML);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACH(it,<sp/>_mapenvironments)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it-&gt;second<sp/>==<sp/>penv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mapenvironments.erase(it);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="classOpenRAVE_1_1RaveGlobal_1ae01c4576e19ea56ac9229d7a568ffbe1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1ae01c4576e19ea56ac9229d7a568ffbe1" kindref="member">GetEnvironmentId</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(_mutexXML);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACH(it,_mapenvironments)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it-&gt;second<sp/>==<sp/>penv.get()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="classOpenRAVE_1_1RaveGlobal_1ade0cc732205f416430ad758daadfea7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1ade0cc732205f416430ad758daadfea7f" kindref="member">GetEnvironment</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(_mutexXML);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>EnvironmentBase*&gt;::iterator<sp/>it<sp/>=<sp/>_mapenvironments.find(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>==<sp/>_mapenvironments.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref>();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second-&gt;shared_from_this();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="classOpenRAVE_1_1RaveGlobal_1a7069f23418920ea13d985c390d5d2bc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a7069f23418920ea13d985c390d5d2bc0" kindref="member">GetEnvironments</ref>(std::list&lt;EnvironmentBasePtr&gt;&amp;<sp/>listenvironments)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listenvironments.clear();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(_mutexXML);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACH(it,_mapenvironments)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv<sp/>=<sp/>it-&gt;second-&gt;shared_from_this();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!penv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listenvironments.push_back(penv);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="classOpenRAVE_1_1RaveGlobal_1abd166dd5e3b8635f6a672b2694aa4b2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ad7176d63b178b8eab68b6947d4d850bb" kindref="member">SpaceSamplerBasePtr</ref><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1abd166dd5e3b8635f6a672b2694aa4b2b" kindref="member">GetDefaultSampler</ref>()</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!_pdefaultsampler<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>lock(_mutexXML);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(<sp/>_mapenvironments.size()<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pdefaultsampler<sp/>=<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1ae58f5951903e445037f1e5f3bd05a91d" kindref="member">GetDatabase</ref>()-&gt;CreateSpaceSampler(_mapenvironments.begin()-&gt;second-&gt;shared_from_this(),</highlight><highlight class="stringliteral">&quot;MT19937&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pdefaultsampler;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="582" refid="classOpenRAVE_1_1RaveGlobal_1aaefb65b6173e1904e4287a61020634f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1aaefb65b6173e1904e4287a61020634f6" kindref="member">_create</ref>()</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!_state<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_state.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal" kindref="compound">RaveGlobal</ref>());</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="classOpenRAVE_1_1RaveGlobal_1aa77713671793cd5226b3437bda30e353" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1aa77713671793cd5226b3437bda30e353" kindref="member">_IsInitialized</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!_pdatabase;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::shared_ptr&lt;RaveGlobal&gt;<sp/>_state;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>that<sp/>is<sp/>always<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>that<sp/>is<sp/>initialized/destroyed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;RaveDatabase&gt;<sp/>_pdatabase;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_nDebugLevel;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::mutex<sp/>_mutexXML;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;InterfaceType,<sp/>READERSMAP<sp/>&gt;<sp/>_mapreaders;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;InterfaceType,string&gt;<sp/>_mapinterfacenames;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;IkParameterizationType,string&gt;<sp/>_mapikparameterization;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>EnvironmentBase*&gt;<sp/>_mapenvironments;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_homedirectory;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>_vdbdirectories;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_nGlobalEnvironmentId;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ad7176d63b178b8eab68b6947d4d850bb" kindref="member">SpaceSamplerBasePtr</ref><sp/>_pdefaultsampler;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_CRLIBM</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>_crlibm_fpu_state;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a615b6f709467f6f0aa45c3cea686ba39" kindref="member" tooltip="Initializes the global state from an already loaded OpenRAVE environment.">RaveInitializeFromState</ref>(<ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a7e84c803da09036af3295e448bd0b17e" kindref="member" tooltip="A pointer to the global openrave state.">RaveGlobalState</ref>();</highlight></codeline>
<codeline lineno="615"><highlight class="normal">};</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">boost::shared_ptr&lt;RaveGlobal&gt;<sp/>RaveGlobal::_state;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619" refid="namespaceOpenRAVE_1a4565818cc5d4875f6c462cb6c5ab1a80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a4565818cc5d4875f6c462cb6c5ab1a80" kindref="member" tooltip="Sets the global openrave debug level. A combination of DebugLevel.">RaveSetDebugLevel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="620"><highlight class="normal">{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;SetDebugLevel(level);</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624" refid="namespaceOpenRAVE_1ab6231861994f01d7fb5732b54eef93d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab6231861994f01d7fb5732b54eef93d9" kindref="member" tooltip="Returns the openrave debug level.">RaveGetDebugLevel</ref>()</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDebugLevel();</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="namespaceOpenRAVE_1acdcdc83c8812c47516259f9e89a3bd1b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;InterfaceType,std::string&gt;&amp;<sp/><ref refid="namespaceOpenRAVE_1acdcdc83c8812c47516259f9e89a3bd1b" kindref="member" tooltip="returns a lower case string of the interface type">RaveGetInterfaceNamesMap</ref>()</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetInterfaceNamesMap();</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634" refid="namespaceOpenRAVE_1adc91f5fc0031c945fcfe34baaa9b610e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;IkParameterizationType,std::string&gt;&amp;<sp/><ref refid="namespaceOpenRAVE_1adc91f5fc0031c945fcfe34baaa9b610e" kindref="member" tooltip="returns a string of the ik parameterization type names (can include upper case in...">RaveGetIkParameterizationMap</ref>()</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetIkParameterizationMap();</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="namespaceOpenRAVE_1a057d105393f37c597a34f0875ab247c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="namespaceOpenRAVE_1a057d105393f37c597a34f0875ab247c6" kindref="member">RaveGetInterfaceName</ref>(InterfaceType<sp/>type)</highlight></codeline>
<codeline lineno="640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetInterfaceName(type);</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="namespaceOpenRAVE_1a87ddf8748858681ffdbe520817899d7f" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceOpenRAVE_1a87ddf8748858681ffdbe520817899d7f" kindref="member" tooltip="Returns the openrave home directory where settings, cache, and other files are stored...">RaveGetHomeDirectory</ref>()</highlight></codeline>
<codeline lineno="645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetHomeDirectory();</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="namespaceOpenRAVE_1a9405a328fe09cb60cccec64acd8d5b75" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceOpenRAVE_1a9405a328fe09cb60cccec64acd8d5b75" kindref="member" tooltip="Searches for a filename in the database and returns a full path/URL to it.">RaveFindDatabaseFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bRead)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;FindDatabaseFile(filename,bRead);</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654" refid="namespaceOpenRAVE_1ab89ccf2331c4ee81662f687cedaa1781" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab89ccf2331c4ee81662f687cedaa1781" kindref="member" tooltip="Explicitly initializes the global OpenRAVE state (optional).">RaveInitialize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bLoadAllPlugins,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;Initialize(bLoadAllPlugins,level);</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="namespaceOpenRAVE_1a4cad8fb5664f22d9c877fc520ec20abe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a4cad8fb5664f22d9c877fc520ec20abe" kindref="member" tooltip="Initializes the global state from an already loaded OpenRAVE environment.">RaveInitializeFromState</ref>(<ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref><sp/>globalstate)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>RaveGlobal::_state<sp/>=<sp/>boost::dynamic_pointer_cast&lt;<ref refid="classOpenRAVE_1_1RaveGlobal" kindref="compound">RaveGlobal</ref>&gt;(globalstate);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="namespaceOpenRAVE_1a7e84c803da09036af3295e448bd0b17e" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref><sp/><ref refid="namespaceOpenRAVE_1a7e84c803da09036af3295e448bd0b17e" kindref="member" tooltip="A pointer to the global openrave state.">RaveGlobalState</ref>()</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>return<sp/>valid<sp/>pointer<sp/>if<sp/>initialized!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;RaveGlobal&gt;<sp/>state<sp/>=<sp/>RaveGlobal::_state;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!state<sp/>&amp;&amp;<sp/>state-&gt;_IsInitialized()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref>();</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674" refid="namespaceOpenRAVE_1a0f405b1e7e95e6386c892fb4ad54d9b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a0f405b1e7e95e6386c892fb4ad54d9b5" kindref="member" tooltip="Destroys the entire OpenRAVE state and all loaded environments.">RaveDestroy</ref>()</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;Destroy();</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="namespaceOpenRAVE_1af1fc16c7ab4d623ae6c95ab6575b0cca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1af1fc16c7ab4d623ae6c95ab6575b0cca" kindref="member" tooltip="return the environment&amp;#39;s unique id, returns 0 if environment could not be found...">RaveGetEnvironmentId</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetEnvironmentId(penv);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684" refid="namespaceOpenRAVE_1ac5ad28f8313d016b3ecde4c01737d652" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1ac5ad28f8313d016b3ecde4c01737d652" kindref="member" tooltip="get the environment from its unique id">RaveGetEnvironment</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetEnvironment(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689" refid="namespaceOpenRAVE_1ad85edb7064e01ebfc1bbef55e84df69d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ad85edb7064e01ebfc1bbef55e84df69d" kindref="member" tooltip="Return all the created OpenRAVE environments.">RaveGetEnvironments</ref>(std::list&lt;EnvironmentBasePtr&gt;&amp;<sp/>listenvironments)</highlight></codeline>
<codeline lineno="690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetEnvironments(listenvironments);</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="namespaceOpenRAVE_1aad059c41a95449e019f153dc827658e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1aad059c41a95449e019f153dc827658e3" kindref="member" tooltip="Get all the loaded plugins and the interfaces they support.">RaveGetPluginInfo</ref>(std::list&lt;<sp/>std::pair&lt;std::string,<sp/>PLUGININFO&gt;<sp/>&gt;&amp;<sp/>plugins)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;GetPluginInfo(plugins);</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699" refid="namespaceOpenRAVE_1a27b3193df26a41f8373e44b2a8bf5521" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a27b3193df26a41f8373e44b2a8bf5521" kindref="member" tooltip="Get a list of all the loaded interfaces.">RaveGetLoadedInterfaces</ref>(std::map&lt;InterfaceType,<sp/>std::vector&lt;std::string&gt;<sp/>&gt;&amp;<sp/>interfacenames)</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;GetLoadedInterfaces(interfacenames);</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704" refid="namespaceOpenRAVE_1a26aae0eb8f16b559ffcbbacbb221d069" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a26aae0eb8f16b559ffcbbacbb221d069" kindref="member" tooltip="Reloads all the plugins.">RaveReloadPlugins</ref>()</highlight></codeline>
<codeline lineno="705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;ReloadPlugins();</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="namespaceOpenRAVE_1a0bdb20966417e80729f69b3d878c17b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a0bdb20966417e80729f69b3d878c17b0" kindref="member" tooltip="Load a plugin and its interfaces.">RaveLoadPlugin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>libraryname)</highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;LoadPlugin(libraryname);</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="namespaceOpenRAVE_1a5a875a2efe2e581f83c7f00c0237488e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a5a875a2efe2e581f83c7f00c0237488e" kindref="member" tooltip="Returns true if interface can be created, otherwise false.">RaveHasInterface</ref>(InterfaceType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>interfacename)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;HasInterface(type,interfacename);</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="namespaceOpenRAVE_1aec221546fbd969d5c0005a223d4e6f04" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1aec221546fbd969d5c0005a223d4e6f04" kindref="member">RaveCreateInterface</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/>InterfaceType<sp/>type,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>interfacename)</highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;Create(penv,<sp/>type,interfacename);</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="namespaceOpenRAVE_1a25751cf7b2fdb7f345101c5023224e46" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1a25751cf7b2fdb7f345101c5023224e46" kindref="member">RaveCreateRobot</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateRobot(penv,name);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="namespaceOpenRAVE_1a917047ebc086703b4eaf0bffd6ac9527" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1ab39121477d2dd841859e79f112b52a0b" kindref="member">PlannerBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1a917047ebc086703b4eaf0bffd6ac9527" kindref="member">RaveCreatePlanner</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreatePlanner(penv,<sp/>name);</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734" refid="namespaceOpenRAVE_1adaf28a3cc60e1de1993d002c62067df9" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1adeaf3fbb73ee82de32efcd886d780f0b" kindref="member">SensorSystemBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1adaf28a3cc60e1de1993d002c62067df9" kindref="member">RaveCreateSensorSystem</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateSensorSystem(penv,<sp/>name);</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739" refid="namespaceOpenRAVE_1a1df06dca7777efdfbd9e75b9ee568cd2" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a93f3c54acfadfefe33b745f7df0c81cf" kindref="member">ControllerBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1a1df06dca7777efdfbd9e75b9ee568cd2" kindref="member">RaveCreateController</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateController(penv,<sp/>name);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744" refid="namespaceOpenRAVE_1a85a2344a8c87ccc8573c58c05f17616e" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1a85a2344a8c87ccc8573c58c05f17616e" kindref="member">RaveCreateModule</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateModule(penv,<sp/>name);</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="namespaceOpenRAVE_1a211849aac354463d4a3617a20f13caea" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1a211849aac354463d4a3617a20f13caea" kindref="member">RaveCreateProblem</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateModule(penv,<sp/>name);</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="namespaceOpenRAVE_1a09d6138c724a27138cae1c19971ae205" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1a09d6138c724a27138cae1c19971ae205" kindref="member">RaveCreateProblemInstance</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateModule(penv,<sp/>name);</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="namespaceOpenRAVE_1aa2aeb37827349f5b7bf6d7d6a804cbd4" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1adc64503b74e38e98eedcbc031b3e37ff" kindref="member">IkSolverBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1aa2aeb37827349f5b7bf6d7d6a804cbd4" kindref="member">RaveCreateIkSolver</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateIkSolver(penv,<sp/>name);</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="namespaceOpenRAVE_1ab08a89586f8780b19a4da7cc142cbcf4" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a1f7cd9b111d097614987d789deaf960e" kindref="member">PhysicsEngineBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1ab08a89586f8780b19a4da7cc142cbcf4" kindref="member">RaveCreatePhysicsEngine</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreatePhysicsEngine(penv,<sp/>name);</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769" refid="namespaceOpenRAVE_1a198ddcd597357362c40e9353c5a70f31" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1adb9a2496735bc0d80ced5a5d7dfb653b" kindref="member">SensorBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1a198ddcd597357362c40e9353c5a70f31" kindref="member">RaveCreateSensor</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateSensor(penv,<sp/>name);</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774" refid="namespaceOpenRAVE_1adad7199c542d5330699204473c9eadcc" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1ae3e7611a64b7d4204203d69014f45fe8" kindref="member">CollisionCheckerBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1adad7199c542d5330699204473c9eadcc" kindref="member">RaveCreateCollisionChecker</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateCollisionChecker(penv,<sp/>name);</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779" refid="namespaceOpenRAVE_1a75b6125ec62afca70c38afe81f572db1" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1af0d19499c5ac95f5e1ac60b29187d7c4" kindref="member">ViewerBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1a75b6125ec62afca70c38afe81f572db1" kindref="member">RaveCreateViewer</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateViewer(penv,<sp/>name);</highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="namespaceOpenRAVE_1af670bfd0341386b625f2290d8484c9d3" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref><sp/><ref refid="namespaceOpenRAVE_1af670bfd0341386b625f2290d8484c9d3" kindref="member">RaveCreateKinBody</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateKinBody(penv,<sp/>name);</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789" refid="namespaceOpenRAVE_1aa987900651248eee02dc1ce6647dc543" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" kindref="member">TrajectoryBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1aa987900651248eee02dc1ce6647dc543" kindref="member" tooltip="Return an empty trajectory instance.">RaveCreateTrajectory</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateTrajectory(penv,<sp/>name);</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794" refid="namespaceOpenRAVE_1a50aeb06ab0f51d83c99d8938b01b747d" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" kindref="member">TrajectoryBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1aa987900651248eee02dc1ce6647dc543" kindref="member" tooltip="Return an empty trajectory instance.">RaveCreateTrajectory</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof)</highlight></codeline>
<codeline lineno="795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1aa987900651248eee02dc1ce6647dc543" kindref="member" tooltip="Return an empty trajectory instance.">RaveCreateTrajectory</ref>(penv,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="namespaceOpenRAVE_1ac30d0d73a3d6b5e06ee740fb978eeeba" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1ad7176d63b178b8eab68b6947d4d850bb" kindref="member">SpaceSamplerBasePtr</ref><sp/><ref refid="namespaceOpenRAVE_1ac30d0d73a3d6b5e06ee740fb978eeeba" kindref="member">RaveCreateSpaceSampler</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;CreateSpaceSampler(penv,<sp/>name);</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804" refid="namespaceOpenRAVE_1a331d3070544589695a6a05e7da0f419f" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref><sp/><ref refid="namespaceOpenRAVE_1a331d3070544589695a6a05e7da0f419f" kindref="member" tooltip="Registers a function to create an interface, this allows the interface to be created...">RaveRegisterInterface</ref>(InterfaceType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>interfacehash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>envhash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::function&lt;<ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref>,<sp/>std::istream&amp;)&gt;&amp;<sp/>createfn)</highlight></codeline>
<codeline lineno="805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDatabase()-&gt;RegisterInterface(type,<sp/>name,<sp/>interfacehash,envhash,createfn);</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809" refid="namespaceOpenRAVE_1a9ad0884135aded97f58a39cd75e80bbf" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref><sp/><ref refid="namespaceOpenRAVE_1a9ad0884135aded97f58a39cd75e80bbf" kindref="member" tooltip="Registers a custom xml reader for a particular interface.">RaveRegisterXMLReader</ref>(InterfaceType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xmltag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1adec9e4596e96321e8bf28523753f5d2c" kindref="member">CreateXMLReaderFn</ref>&amp;<sp/>fn)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;RegisterXMLReader(type,xmltag,fn);</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814" refid="namespaceOpenRAVE_1a5d55294a3a1b108acea6bbf1ebe1555a" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref><sp/><ref refid="namespaceOpenRAVE_1a5d55294a3a1b108acea6bbf1ebe1555a" kindref="member" tooltip="Returns the current registered reader for the interface type/xmlid.">RaveCallXMLReader</ref>(InterfaceType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>xmltag,<sp/><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref><sp/>pinterface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>&amp;<sp/>atts)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;CallXMLReader(type,xmltag,pinterface,atts);</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="classOpenRAVE_1_1IkParameterization_1a2fcf986571f272008b879fba7d49e208" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/><ref refid="classOpenRAVE_1_1IkParameterization_1a4bd290d9263727845b76174c40ff070c" kindref="member">IkParameterization::GetConfigurationSpecification</ref>(<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2e" kindref="member" tooltip="The types of inverse kinematics parameterizations supported.">IkParameterizationType</ref><sp/>iktype)</highlight></codeline>
<codeline lineno="820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/>spec;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.resize(1);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].dof<sp/>=<sp/><ref refid="classOpenRAVE_1_1IkParameterization_1ac914934393fca4ffa7cc103ac9068ece" kindref="member" tooltip="Returns the number of values used to represent the parameterization ( &amp;gt;= dof )...">IkParameterization::GetNumberOfValues</ref>(iktype);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].name<sp/>=<sp/>str(boost::format(</highlight><highlight class="stringliteral">&quot;ikparam_values<sp/>%d&quot;</highlight><highlight class="normal">)%iktype);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].interpolation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;linear&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spec;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830" refid="namespaceOpenRAVE_1a1d933f784084dc1ee9ebbf79f09ab8f1" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceOpenRAVE_1a6659af9ccf72e04a53b444437acd0a42" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>O,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound" tooltip="Parameterization of basic primitives for querying inverse-kinematics solutions.">IkParameterization</ref><sp/>&amp;ikparam)</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a157d1d383fc3c763780da24d52bb5870" kindref="member">_type</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a157d1d383fc3c763780da24d52bb5870" kindref="member">_type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea33b4f04338b6d55fe993b6bdd9f66956" kindref="member" tooltip="end effector reaches desired 6D transformation">IKP_Transform6D</ref>:</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1aaeeb892fc06951b35559a535c379729d" kindref="member">GetTransform6D</ref>();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea125270b64ed51a89e7021ec7e6d71669" kindref="member" tooltip="end effector reaches desired 3D rotation">IKP_Rotation3D</ref>:</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1aeb96b077bcd4d37b46a3b07467a020c3" kindref="member">GetRotation3D</ref>();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eae24724faf9388c7f2ae2c7cbbc9c5e94" kindref="member" tooltip="end effector origin reaches desired 3D translation">IKP_Translation3D</ref>:<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v<sp/>=<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1ad500888055d46211491d6c1ca86260fe" kindref="member">GetTranslation3D</ref>();</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>v.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea31424bec585106a5464b4ebe4831acc9" kindref="member" tooltip="direction on end effector coordinate system reaches desired direction">IKP_Direction3D</ref>:<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v<sp/>=<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a59a61d5e202e10fe4dfe61aa8c0a6aac" kindref="member">GetDirection3D</ref>();</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>v.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea4971a1736a1ea39559c0c49601b17533" kindref="member" tooltip="ray on end effector coordinate system reaches desired global ray">IKP_Ray4D</ref>:<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a84f91a79fcdfc891d616c99cdd136529" kindref="member">GetRay4D</ref>();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea6c4188710cb0a7084725fefd4c80d642" kindref="member" tooltip="direction on end effector coordinate system points to desired 3D position">IKP_Lookat3D</ref>:<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v<sp/>=<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a385b47df91447b80429d4d85526d292f" kindref="member">GetLookat3D</ref>();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>v.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea68c40080732ab8a017608e45a2f20d33" kindref="member" tooltip="end effector origin and direction reaches desired 3D translation and direction. Can...">IKP_TranslationDirection5D</ref>:</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1ac74ff1ac2cbc55b259d2e2cd564b9139" kindref="member">GetTranslationDirection5D</ref>();</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eadcf015cba2fad8597405a442c81e0612" kindref="member" tooltip="2D translation along XY plane">IKP_TranslationXY2D</ref>:<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v<sp/>=<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a2806e15bd61ecdbd9aadfb0a58c9d52e" kindref="member">GetTranslationXY2D</ref>();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>v.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eacb13532b686d552c5a513aa5296a9465" kindref="member" tooltip="2D translation along XY plane and 1D rotation around Z axis. The offset of the rotation...">IKP_TranslationXYOrientation3D</ref>:<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v<sp/>=<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1ae04de3d274c7d9006c5b145ee5c19015" kindref="member">GetTranslationXYOrientation3D</ref>();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>v.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea3acb8e5a6b84403f23286a338c46e5a7" kindref="member" tooltip="local point on end effector origin reaches desired 3D global point">IKP_TranslationLocalGlobal6D</ref>:<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;Vector,Vector&gt;<sp/>p<sp/>=<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a8ce7e26e09a9ee89f3180038d96dd352" kindref="member">GetTranslationLocalGlobal6D</ref>();</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/>p.first.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.first.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.first.z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.second.x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.second.y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.second.z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>support<sp/>parameterization<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1ad45c935f79db7a84f920ac78cb14c8d2" kindref="member">GetType</ref>(),<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>O;</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="namespaceOpenRAVE_1a4f83144b80873f248fb58410e992dced" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespaceOpenRAVE_1a8e429f020d431c017ca32b65df5cfcd8" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>I,<sp/><ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound" tooltip="Parameterization of basic primitives for querying inverse-kinematics solutions.">IkParameterization</ref>&amp;<sp/>ikparam)</highlight></codeline>
<codeline lineno="884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type=<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea26d93743c6292ee325f9b2dc3fe17b7a" kindref="member">IKP_None</ref>;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>&gt;&gt;<sp/>type;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a157d1d383fc3c763780da24d52bb5870" kindref="member">_type</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2e" kindref="member" tooltip="The types of inverse kinematics parameterizations supported.">IkParameterizationType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a157d1d383fc3c763780da24d52bb5870" kindref="member">_type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea33b4f04338b6d55fe993b6bdd9f66956" kindref="member" tooltip="end effector reaches desired 6D transformation">IKP_Transform6D</ref>:<sp/>{<sp/><ref refid="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" kindref="member">Transform</ref><sp/>t;<sp/>I<sp/>&gt;&gt;<sp/>t;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a0ec3118069977eebb68a61f5966146f2" kindref="member">SetTransform6D</ref>(t);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea125270b64ed51a89e7021ec7e6d71669" kindref="member" tooltip="end effector reaches desired 3D rotation">IKP_Rotation3D</ref>:<sp/>{<sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v;<sp/>I<sp/>&gt;&gt;<sp/>v;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a03781ddd35d63d859a387d28db2bedf9" kindref="member">SetRotation3D</ref>(v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eae24724faf9388c7f2ae2c7cbbc9c5e94" kindref="member" tooltip="end effector origin reaches desired 3D translation">IKP_Translation3D</ref>:<sp/>{<sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v;<sp/>I<sp/>&gt;&gt;<sp/>v.x<sp/>&gt;&gt;<sp/>v.y<sp/>&gt;&gt;<sp/>v.z;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a25ddbe2fc5db5250b54d9f9d1169f21b" kindref="member">SetTranslation3D</ref>(v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea31424bec585106a5464b4ebe4831acc9" kindref="member" tooltip="direction on end effector coordinate system reaches desired direction">IKP_Direction3D</ref>:<sp/>{<sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v;<sp/>I<sp/>&gt;&gt;<sp/>v.x<sp/>&gt;&gt;<sp/>v.y<sp/>&gt;&gt;<sp/>v.z;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a7ac4fa8318df772b477ef589164b721a" kindref="member">SetDirection3D</ref>(v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea4971a1736a1ea39559c0c49601b17533" kindref="member" tooltip="ray on end effector coordinate system reaches desired global ray">IKP_Ray4D</ref>:<sp/>{<sp/><ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound" tooltip="A ray defined by an origin and a direction.">RAY</ref><sp/>r;<sp/>I<sp/>&gt;&gt;<sp/>r;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1ad12e02bd808ccbac29bc7572c44e103e" kindref="member">SetRay4D</ref>(r);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea6c4188710cb0a7084725fefd4c80d642" kindref="member" tooltip="direction on end effector coordinate system points to desired 3D position">IKP_Lookat3D</ref>:<sp/>{<sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v;<sp/>I<sp/>&gt;&gt;<sp/>v.x<sp/>&gt;&gt;<sp/>v.y<sp/>&gt;&gt;<sp/>v.z;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a093c25024d128db072a0d6a60b85812c" kindref="member">SetLookat3D</ref>(v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea68c40080732ab8a017608e45a2f20d33" kindref="member" tooltip="end effector origin and direction reaches desired 3D translation and direction. Can...">IKP_TranslationDirection5D</ref>:<sp/>{<sp/><ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound" tooltip="A ray defined by an origin and a direction.">RAY</ref><sp/>r;<sp/>I<sp/>&gt;&gt;<sp/>r;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a71b9c930c10b762432346b00ab5ec9c1" kindref="member">SetTranslationDirection5D</ref>(r);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eadcf015cba2fad8597405a442c81e0612" kindref="member" tooltip="2D translation along XY plane">IKP_TranslationXY2D</ref>:<sp/>{<sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v;<sp/>I<sp/>&gt;&gt;<sp/>v.y<sp/>&gt;&gt;<sp/>v.y;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a09ba343487264fd8b56a6db983f1f601" kindref="member">SetTranslationXY2D</ref>(v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eacb13532b686d552c5a513aa5296a9465" kindref="member" tooltip="2D translation along XY plane and 1D rotation around Z axis. The offset of the rotation...">IKP_TranslationXYOrientation3D</ref>:<sp/>{<sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>v;<sp/>I<sp/>&gt;&gt;<sp/>v.y<sp/>&gt;&gt;<sp/>v.y<sp/>&gt;&gt;<sp/>v.z;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a267a51621bbf2dc920fa2c5b3b345c53" kindref="member">SetTranslationXYOrientation3D</ref>(v);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea3acb8e5a6b84403f23286a338c46e5a7" kindref="member" tooltip="local point on end effector origin reaches desired 3D global point">IKP_TranslationLocalGlobal6D</ref>:<sp/>{<sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>localtrans,<sp/>trans;<sp/>I<sp/>&gt;&gt;<sp/>localtrans.x<sp/>&gt;&gt;<sp/>localtrans.y<sp/>&gt;&gt;<sp/>localtrans.z<sp/>&gt;&gt;<sp/>trans.x<sp/>&gt;&gt;<sp/>trans.y<sp/>&gt;&gt;<sp/>trans.z;<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1ae6dc1416509fd7044c5c8444cb94b7d0" kindref="member">SetTranslationLocalGlobal6D</ref>(localtrans,trans);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>support<sp/>parameterization<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1ad45c935f79db7a84f920ac78cb14c8d2" kindref="member">GetType</ref>(),<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905" refid="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" kindref="member" tooltip="Given a mask of affine dofs and a dof inside that mask, returns the index where the...">RaveGetIndexFromAffineDOF</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs,<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" kindref="member" tooltip="Selects which DOFs of the affine transformation to include in the active configuration...">DOFAffine</ref><sp/>_dof)</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_dof);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>dof<sp/>&amp;=<sp/>affinedofs;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>dof&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a631e4be716fa05920e2708264c946507" kindref="member" tooltip="can move in the x direction">DOF_X</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_X<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>dof&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a052eaa27c587eff647f89537d85414f2" kindref="member" tooltip="can move in the y direction">DOF_Y</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_Y<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>dof&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98ab8457ea80d330d3a701781b6bc9a935b" kindref="member" tooltip="can move in the z direction">DOF_Z</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_Z<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>dof&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member" tooltip="can rotate around an axis (1 dof)">DOF_RotationAxis</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>dof&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" kindref="member">DOF_Rotation3D</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>dof&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;unspecified<sp/>dof<sp/>0x%x,<sp/>0x%x&quot;</highlight><highlight class="normal">,affinedofs%dof,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940" refid="namespaceOpenRAVE_1aa74e6e2a15fb305f40f1c111ccba4409" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" kindref="member" tooltip="Selects which DOFs of the affine transformation to include in the active configuration...">DOFAffine</ref><sp/><ref refid="namespaceOpenRAVE_1aa74e6e2a15fb305f40f1c111ccba4409" kindref="member" tooltip="Given a mask of affine dofs and an index into the array, returns the affine dof that...">RaveGetAffineDOFFromIndex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>requestedindex)</highlight></codeline>
<codeline lineno="941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_ASSERT(requestedindex<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>index<sp/>==<sp/>requestedindex<sp/>&amp;&amp;<sp/>(affinedofs&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a631e4be716fa05920e2708264c946507" kindref="member" tooltip="can move in the x direction">DOF_X</ref>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOF_X;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_X<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>index<sp/>==<sp/>requestedindex<sp/>&amp;&amp;<sp/>(affinedofs&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a052eaa27c587eff647f89537d85414f2" kindref="member" tooltip="can move in the y direction">DOF_Y</ref>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOF_Y;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_Y<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>index<sp/>==<sp/>requestedindex<sp/><sp/>&amp;&amp;<sp/>(affinedofs&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98ab8457ea80d330d3a701781b6bc9a935b" kindref="member" tooltip="can move in the z direction">DOF_Z</ref>))<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOF_Z;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_Z<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>index<sp/>&lt;=<sp/>requestedindex<sp/>&amp;&amp;<sp/>index+3<sp/>&gt;<sp/>requestedindex<sp/>&amp;&amp;<sp/>(affinedofs&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member" tooltip="can rotate around an axis (1 dof)">DOF_RotationAxis</ref>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOF_RotationAxis;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>index<sp/>&lt;=<sp/>requestedindex<sp/>&amp;&amp;<sp/>index+3<sp/>&gt;<sp/>requestedindex<sp/>&amp;&amp;<sp/>(affinedofs&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" kindref="member">DOF_Rotation3D</ref>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOF_Rotation3D;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>index<sp/>&lt;=<sp/>requestedindex<sp/>&amp;&amp;<sp/>index+4<sp/>&gt;<sp/>requestedindex<sp/>&amp;&amp;<sp/>(affinedofs&amp;<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOF_RotationQuat;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;requested<sp/>index<sp/>out<sp/>of<sp/>bounds<sp/>%d<sp/>(affinemask=0x%x)&quot;</highlight><highlight class="normal">,requestedindex%affinedofs,<sp/><ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974" refid="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" kindref="member" tooltip="Returns the degrees of freedom needed to represent all the values in the affine dof...">RaveGetAffineDOF</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs)</highlight></codeline>
<codeline lineno="975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member" tooltip="can rotate around an axis (1 dof)">DOF_RotationAxis</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(<sp/>!(affinedofs<sp/>&amp;<sp/>(<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" kindref="member">DOF_Rotation3D</ref>|<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref>))<sp/>);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" kindref="member">DOF_Rotation3D</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(<sp/>!(affinedofs<sp/>&amp;<sp/>(DOF_RotationAxis|<ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref>))<sp/>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(<sp/>!(affinedofs<sp/>&amp;<sp/>(DOF_Rotation3D|DOF_RotationAxis))<sp/>);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a631e4be716fa05920e2708264c946507" kindref="member" tooltip="can move in the x direction">DOF_X</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dof++;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a052eaa27c587eff647f89537d85414f2" kindref="member" tooltip="can move in the y direction">DOF_Y</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dof++;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98ab8457ea80d330d3a701781b6bc9a935b" kindref="member" tooltip="can move in the z direction">DOF_Z</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dof++;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_RotationAxis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dof++;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_Rotation3D<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dof<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/>DOF_RotationQuat<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dof<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dof;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007" refid="namespaceOpenRAVE_1acee29007f1d29ce38571cadfec3ba99e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1acee29007f1d29ce38571cadfec3ba99e" kindref="member" tooltip="Converts the transformation matrix into the specified affine values format.">RaveGetAffineDOFValuesFromTransform</ref>(std::vector&lt;dReal&gt;::iterator<sp/>itvalues,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" kindref="member">Transform</ref>&amp;<sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>&amp;<sp/>vActvAffineRotationAxis)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a631e4be716fa05920e2708264c946507" kindref="member" tooltip="can move in the x direction">DOF_X</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>t.trans.x;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a052eaa27c587eff647f89537d85414f2" kindref="member" tooltip="can move in the y direction">DOF_Y</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>t.trans.y;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98ab8457ea80d330d3a701781b6bc9a935b" kindref="member" tooltip="can move in the z direction">DOF_Z</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>t.trans.z;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member" tooltip="can rotate around an axis (1 dof)">DOF_RotationAxis</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>that<sp/>rot.yzw<sp/>~=<sp/>vActvAffineRotationAxis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fsin<sp/>=<sp/><ref refid="group__affine__math_1gafa1579e29c1d08021a480474661ea385" kindref="member" tooltip="square-root">RaveSqrt</ref>(t.rot.y<sp/>*<sp/>t.rot.y<sp/>+<sp/>t.rot.z<sp/>*<sp/>t.rot.z<sp/>+<sp/>t.rot.w<sp/>*<sp/>t.rot.w);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>figure<sp/>out<sp/>correct<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(t.rot.y<sp/>&gt;<sp/>0)<sp/>!=<sp/>(vActvAffineRotationAxis.x&gt;0)<sp/>||<sp/>(t.rot.z<sp/>&gt;<sp/>0)<sp/>!=<sp/>(vActvAffineRotationAxis.y&gt;0)<sp/>||<sp/>(t.rot.w<sp/>&gt;<sp/>0)<sp/>!=<sp/>(vActvAffineRotationAxis.z&gt;0)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsin<sp/>=<sp/>-fsin;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>2<sp/>*<sp/><ref refid="group__affine__math_1ga6221cab32e5309e3c0371b4f5cbb3a11" kindref="member" tooltip="arctangent2 covering entire circle">RaveAtan2</ref>(fsin,<sp/>t.rot.x);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" kindref="member">DOF_Rotation3D</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fsin<sp/>=<sp/><ref refid="group__affine__math_1gafa1579e29c1d08021a480474661ea385" kindref="member" tooltip="square-root">RaveSqrt</ref>(t.rot.y<sp/>*<sp/>t.rot.y<sp/>+<sp/>t.rot.z<sp/>*<sp/>t.rot.z<sp/>+<sp/>t.rot.w<sp/>*<sp/>t.rot.w);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fangle<sp/>=<sp/>2<sp/>*<sp/>atan2(fsin,<sp/>t.rot.x);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fsin<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>normalizer<sp/>=<sp/>fangle<sp/>/<sp/>fsin;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>normalizer<sp/>*<sp/>t.rot.y;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>normalizer<sp/>*<sp/>t.rot.z;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>normalizer<sp/>*<sp/>t.rot.w;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>t.rot.x;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>t.rot.y;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>t.rot.z;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itvalues++<sp/>=<sp/>t.rot.w;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051" refid="namespaceOpenRAVE_1a065035f3b1323bcfd8ed090ea86a5e3d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a065035f3b1323bcfd8ed090ea86a5e3d" kindref="member" tooltip="Converts affine dof values into a transform.">RaveGetTransformFromAffineDOFValues</ref>(<ref refid="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" kindref="member">Transform</ref>&amp;<sp/>t,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itvalues,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>&amp;<sp/>vActvAffineRotationAxis)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a631e4be716fa05920e2708264c946507" kindref="member" tooltip="can move in the x direction">DOF_X</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.trans.x<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a052eaa27c587eff647f89537d85414f2" kindref="member" tooltip="can move in the y direction">DOF_Y</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.trans.y<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98ab8457ea80d330d3a701781b6bc9a935b" kindref="member" tooltip="can move in the z direction">DOF_Z</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.trans.z<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member" tooltip="can rotate around an axis (1 dof)">DOF_RotationAxis</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>angle<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fsin<sp/>=<sp/><ref refid="group__affine__math_1gae4909179343022636db56f4e4b664415" kindref="member" tooltip="sine">RaveSin</ref>(angle*(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>)0.5);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.x<sp/>=<sp/><ref refid="group__affine__math_1ga7a5b5d031430f5e42038c4043a18d2a9" kindref="member" tooltip="cosine">RaveCos</ref>(angle*(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>)0.5);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.y<sp/>=<sp/>vActvAffineRotationAxis.x<sp/>*<sp/>fsin;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.z<sp/>=<sp/>vActvAffineRotationAxis.y<sp/>*<sp/>fsin;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.w<sp/>=<sp/>vActvAffineRotationAxis.z<sp/>*<sp/>fsin;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" kindref="member">DOF_Rotation3D</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>x<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>y<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>z<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fang<sp/>=<sp/><ref refid="group__affine__math_1gafa1579e29c1d08021a480474661ea385" kindref="member" tooltip="square-root">RaveSqrt</ref>(x*x<sp/>+<sp/>y*y<sp/>+<sp/>z*z);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fang<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>fnormalizer<sp/>=<sp/>sin((<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>)0.5<sp/>*<sp/>fang)<sp/>/<sp/>fang;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.x<sp/>=<sp/>cos((<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>)0.5<sp/>*<sp/>fang);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.y<sp/>=<sp/>fnormalizer<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.z<sp/>=<sp/>fnormalizer<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.w<sp/>=<sp/>fnormalizer<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot<sp/>=<sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>(1,0,0,0);<sp/></highlight><highlight class="comment">//<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>normalize<sp/>since<sp/>user<sp/>might<sp/>not<sp/>be<sp/>aware<sp/>of<sp/>this<sp/>particular<sp/>parameterization<sp/>of<sp/>rotations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.x<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.y<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.z<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.w<sp/>=<sp/>*itvalues++;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.rot.normalize4();</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096" refid="namespaceOpenRAVE_1aaf02457d3c30e6e9439392175a6e23b4" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/><ref refid="namespaceOpenRAVE_1aaf02457d3c30e6e9439392175a6e23b4" kindref="member">RaveGetAffineConfigurationSpecification</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs,<ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref><sp/>pbody)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/>spec;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.resize(1);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].dof<sp/>=<sp/><ref refid="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" kindref="member" tooltip="Returns the degrees of freedom needed to represent all the values in the affine dof...">RaveGetAffineDOF</ref>(affinedofs);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].interpolation<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;linear&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!pbody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].name<sp/>=<sp/>str(boost::format(</highlight><highlight class="stringliteral">&quot;affine_transform<sp/>%s<sp/>%d&quot;</highlight><highlight class="normal">)%pbody-&gt;GetName()%affinedofs);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[0].name<sp/>=<sp/>str(boost::format(</highlight><highlight class="stringliteral">&quot;affine_transform<sp/>__dummy__<sp/>%d&quot;</highlight><highlight class="normal">)%affinedofs);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spec;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112" refid="classOpenRAVE_1_1ConfigurationSpecification_1ac938a6c271285a5468b805a3243e20e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ac938a6c271285a5468b805a3243e20e6" kindref="member" tooltip="return the dimension of the configuraiton space (degrees of freedom)">ConfigurationSpecification::GetDOF</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1113"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxdof<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(it,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdof<sp/>=<sp/>max(maxdof,it-&gt;offset+it-&gt;dof);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxdof;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121" refid="classOpenRAVE_1_1ConfigurationSpecification_1afa8720abaf6972d6dac22a8cd1a67225" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1afa8720abaf6972d6dac22a8cd1a67225" kindref="member" tooltip="check if the groups form a continguous space">ConfigurationSpecification::IsValid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1122"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;uint8_t&gt;<sp/>occupied(<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ac938a6c271285a5468b805a3243e20e6" kindref="member" tooltip="return the dimension of the configuraiton space (degrees of freedom)">GetDOF</ref>(),0);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(it,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;offset<sp/>&lt;<sp/>0<sp/>||<sp/>it-&gt;dof<sp/>&lt;=<sp/>0<sp/>||<sp/>it-&gt;offset+it-&gt;dof<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)occupied.size())<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>it-&gt;offset;<sp/>i<sp/>&lt;<sp/>it-&gt;offset+it-&gt;dof;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>occupied[i]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>occupied[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACH(it,occupied)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*it<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>repeating<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(it,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;Group&gt;::const_iterator<sp/>it2<sp/>=<sp/>it+1;<sp/>it2<sp/>!=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it-&gt;name<sp/>==<sp/>it2-&gt;name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151" refid="classOpenRAVE_1_1ConfigurationSpecification_1a960ebd93cb8c58ceab0eb48b047faa98" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a960ebd93cb8c58ceab0eb48b047faa98" kindref="member">ConfigurationSpecification::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref>&amp;<sp/>r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1152"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size()<sp/>!=<sp/>r.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>groups<sp/>could<sp/>be<sp/>out<sp/>of<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j<sp/>&lt;<sp/>r.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[i].offset<sp/>==<sp/>r.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[j].offset<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[i]<sp/>!=<sp/>r.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[j]<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>j<sp/>&gt;=<sp/>r.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174" refid="classOpenRAVE_1_1ConfigurationSpecification_1ab88bf03e1e56cb6f0ed1d48bb3ea60c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ab88bf03e1e56cb6f0ed1d48bb3ea60c0" kindref="member">ConfigurationSpecification::operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref>&amp;<sp/>r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1175"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!this-&gt;<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a960ebd93cb8c58ceab0eb48b047faa98" kindref="member">operator==</ref>(r);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179" refid="classOpenRAVE_1_1ConfigurationSpecification_1a00dca7273ad0d271e131ecc1119683c2" refkind="member"><highlight class="normal">std::vector&lt;ConfigurationSpecification::Group&gt;::const_iterator<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a00dca7273ad0d271e131ecc1119683c2" kindref="member" tooltip="finds the most compatible group to the given group">ConfigurationSpecification::FindCompatibleGroup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref>&amp;<sp/>g,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exactmatch)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1180"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ConfigurationSpecification::Group&gt;::const_iterator<sp/>itsemanticmatch<sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.end();</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bestmatchscore<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss(g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tokens((istream_iterator&lt;std::string&gt;(ss)),<sp/>istream_iterator&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tokens.size()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.end();</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name<sp/>==<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>&amp;&amp;<sp/>itgroup-&gt;dof<sp/>==<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itgroup;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exactmatch<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.clear();</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.str(itgroup-&gt;name);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>curtokens((istream_iterator&lt;std::string&gt;(ss)),<sp/>istream_iterator&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>curtokens.size()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>curtokens.at(0)<sp/>==<sp/>tokens.at(0)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>matchscore=1;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>curtokens.size()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>tokens.size()<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>curtokens.at(1)<sp/>==<sp/>tokens.at(1)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchscore<sp/>+=<sp/>0x80000000;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>curtokens.size()<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>tokens.size()<sp/>&gt;<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>tokens.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>find(curtokens.begin()+2,curtokens.end(),tokens[i])<sp/>!=<sp/>curtokens.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchscore<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>bestmatchscore<sp/>&lt;<sp/>matchscore<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsemanticmatch<sp/>=<sp/>itgroup;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itsemanticmatch;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223" refid="classOpenRAVE_1_1ConfigurationSpecification_1a87b31e59fa16769e474a12ba0a9f8e08" refkind="member"><highlight class="normal">std::vector&lt;ConfigurationSpecification::Group&gt;::const_iterator<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a87b31e59fa16769e474a12ba0a9f8e08" kindref="member" tooltip="Return the most compatible group that represents the time-derivative data of the...">ConfigurationSpecification::FindTimeDerivativeGroup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref>&amp;<sp/>g,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exactmatch)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1224"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref><sp/>gderivative;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.size()<sp/>&gt;=<sp/>12<sp/>&amp;&amp;<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(0,12)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;joint_values&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gderivative.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;joint_velocities&quot;</highlight><highlight class="normal">)<sp/>+<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(12);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.size()<sp/>&gt;=<sp/>16<sp/>&amp;&amp;<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(0,16)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;joint_velocities&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gderivative.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;joint_accelerations&quot;</highlight><highlight class="normal">)<sp/>+<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(16);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.size()<sp/>&gt;=<sp/>16<sp/>&amp;&amp;<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(0,16)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;affine_transform&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gderivative.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;affine_velocities&quot;</highlight><highlight class="normal">)<sp/>+<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(16);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.size()<sp/>&gt;=<sp/>17<sp/>&amp;&amp;<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;affine_velocities&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gderivative.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;affine_accelerations&quot;</highlight><highlight class="normal">)<sp/>+<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(17);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.size()<sp/>&gt;=<sp/>14<sp/>&amp;&amp;<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ikparam_values&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gderivative.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;ikparam_velocities&quot;</highlight><highlight class="normal">)<sp/>+<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>.substr(14);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.end();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>gderivative.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref><sp/>=<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a00dca7273ad0d271e131ecc1119683c2" kindref="member" tooltip="finds the most compatible group to the given group">FindCompatibleGroup</ref>(gderivative,exactmatch);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248" refid="classOpenRAVE_1_1ConfigurationSpecification_1a09106b9e4924dea94502089f75b20d89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a09106b9e4924dea94502089f75b20d89" kindref="member" tooltip="adds a velocity group for every position group.">ConfigurationSpecification::AddVelocityGroups</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>adddeltatime)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;std::vector&lt;ConfigurationSpecification::Group&gt;::iterator&gt;<sp/>listtoremove;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;ConfigurationSpecification::Group&gt;<sp/>listadd;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ac938a6c271285a5468b805a3243e20e6" kindref="member" tooltip="return the dimension of the configuraiton space (degrees of freedom)">GetDOF</ref>();</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasdeltatime<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACH(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>replacename;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>12<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,12)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;joint_values&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;joint_velocities&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>16<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,16)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;affine_transform&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;affine_velocities&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>14<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ikparam_values&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ikparam_velocities&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>offset<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref><sp/>g;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/>replacename<sp/>+<sp/>itgroup-&gt;name.substr(offset);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref><sp/>=<sp/>itgroup-&gt;dof;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ConfigurationSpecification::Group&gt;::const_iterator<sp/>itcompat<sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a00dca7273ad0d271e131ecc1119683c2" kindref="member" tooltip="finds the most compatible group to the given group">FindCompatibleGroup</ref>(g);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itcompat<sp/>!=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itcompat-&gt;dof<sp/>==<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref>&amp;<sp/>gmodify<sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.at(itcompat-<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.begin());</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmodify.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listtoremove.push_back(<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.begin()+(itcompat-<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.begin()));</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listadd.push_back(g);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listadd.push_back(g);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!hasdeltatime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasdeltatime<sp/>=<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>9<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,9)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;deltatime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>listtoremove.size()<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACH(it,listtoremove)<sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.erase(*it);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a54f613faeb77f06c9942d09833274962" kindref="member" tooltip="set the offsets of each group in order to get a contiguous configuration space">ResetGroupOffsets</ref>();</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ac938a6c271285a5468b805a3243e20e6" kindref="member" tooltip="return the dimension of the configuraiton space (degrees of freedom)">GetDOF</ref>();</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACH(itadd,<sp/>listadd)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itadd-&gt;offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>itadd-&gt;dof;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.push_back(*itadd);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!hasdeltatime<sp/>&amp;&amp;<sp/>adddeltatime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a5624a2dfc350dfe608dc26d86b7e7c08" kindref="member" tooltip="adds the deltatime tag to the end if one doesn&amp;#39;t exist and returns the index...">AddDeltaTime</ref>();</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315" refid="classOpenRAVE_1_1ConfigurationSpecification_1a6be51f9b2c8e8199ad72e978b6e6c4da" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a6be51f9b2c8e8199ad72e978b6e6c4da" kindref="member" tooltip="converts all the groups to the corresponding velocity groups and returns the specification...">ConfigurationSpecification::ConvertToVelocitySpecification</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1316"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/>vspec;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>vspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref><sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACH(itgroup,vspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>12<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,12)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;joint_values&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itgroup-&gt;name<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;joint_velocities&quot;</highlight><highlight class="normal">)<sp/>+<sp/>itgroup-&gt;name.substr(12);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>16<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,16)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;affine_transform&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itgroup-&gt;name<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;affine_velocities&quot;</highlight><highlight class="normal">)<sp/>+<sp/>itgroup-&gt;name.substr(16);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>14<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ikparam_values&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itgroup-&gt;name<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;ikparam_velocities&quot;</highlight><highlight class="normal">)<sp/>+<sp/>itgroup-&gt;name.substr(14);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vspec;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333" refid="classOpenRAVE_1_1ConfigurationSpecification_1a047529d130cdde5c5fb9e17798a97a6c" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a047529d130cdde5c5fb9e17798a97a6c" kindref="member" tooltip="returns a new specification of just particular time-derivative groups.">ConfigurationSpecification::GetTimeDerivativeSpecification</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timederivative)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1334"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/>vspec;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>vspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref><sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::array&lt;string,3&gt;<sp/>posgroups<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;joint_values&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;affine_transform&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ikparam_values&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::array&lt;string,3&gt;<sp/>velgroups<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;joint_velocities&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;affine_velocities&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ikparam_velocities&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::array&lt;string,3&gt;<sp/>accgroups<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;joint_accelerations&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;affine_accelerations&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ikparam_accelerations&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::array&lt;string,3&gt;*<sp/>pgroup=NULL;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>timederivative<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pgroup<sp/>=<sp/>&amp;posgroups;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>timederivative<sp/>==<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pgroup<sp/>=<sp/>&amp;velgroups;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>timederivative<sp/>==<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pgroup<sp/>=<sp/>&amp;accgroups;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ad10ef3ff91ab904ff479d57d66ae2abd" kindref="member">OPENRAVE_EXCEPTION_FORMAT0</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>timederivative&quot;</highlight><highlight class="normal">,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACH(itgroup,vspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pgroup-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>name<sp/>=<sp/>pgroup-&gt;at(i);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>name.size()<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,name.size())<sp/>==<sp/>name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.push_back(*itgroup);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>vspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a54f613faeb77f06c9942d09833274962" kindref="member" tooltip="set the offsets of each group in order to get a contiguous configuration space">ResetGroupOffsets</ref>();</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vspec;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367" refid="classOpenRAVE_1_1ConfigurationSpecification_1a54f613faeb77f06c9942d09833274962" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a54f613faeb77f06c9942d09833274962" kindref="member" tooltip="set the offsets of each group in order to get a contiguous configuration space">ConfigurationSpecification::ResetGroupOffsets</ref>()</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACH(it,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>it-&gt;dof;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376" refid="classOpenRAVE_1_1ConfigurationSpecification_1a5624a2dfc350dfe608dc26d86b7e7c08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a5624a2dfc350dfe608dc26d86b7e7c08" kindref="member" tooltip="adds the deltatime tag to the end if one doesn&amp;#39;t exist and returns the index...">ConfigurationSpecification::AddDeltaTime</ref>()</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dof<sp/>=<sp/>max(dof,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[i].offset+<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[i].dof);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[i].name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;deltatime&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[i].offset;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref><sp/>g;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;deltatime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1aed7ea92f45bd273dde380a45ddced592" kindref="member" tooltip="For each data point, the number of values to offset before data for this group starts...">offset</ref><sp/>=<sp/>dof;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.push_back(g);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1aed7ea92f45bd273dde380a45ddced592" kindref="member" tooltip="For each data point, the number of values to offset before data for this group starts...">offset</ref>;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393" refid="classOpenRAVE_1_1ConfigurationSpecification_1abe95cfefe50156e8f37edca80cb87154" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1abe95cfefe50156e8f37edca80cb87154" kindref="member" tooltip="extracts an affine transform given the start of a configuration space point">ConfigurationSpecification::ExtractTransform</ref>(<ref refid="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" kindref="member">Transform</ref>&amp;<sp/>t,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itdata,<sp/><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref><sp/>pbody)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1394"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>16<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,16)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;affine_transform&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(itgroup-&gt;name.substr(16));</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>bodyname;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs=0;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>bodyname<sp/>&gt;&gt;<sp/>affinedofs;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!ss<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!pbody<sp/>&amp;&amp;<sp/>bodyname<sp/>!=<sp/>pbody-&gt;GetName()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a065035f3b1323bcfd8ed090ea86a5e3d" kindref="member" tooltip="Converts affine dof values into a transform.">RaveGetTransformFromAffineDOFValues</ref>(t,itdata+itgroup-&gt;offset,affinedofs);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bfound;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414" refid="classOpenRAVE_1_1ConfigurationSpecification_1a74cb255b5496f80fa38cbde4cfb853e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a74cb255b5496f80fa38cbde4cfb853e4" kindref="member" tooltip="extracts an ikparameterization given the start of a configuration space point">ConfigurationSpecification::ExtractIkParameterization</ref>(<ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound" tooltip="Parameterization of basic primitives for querying inverse-kinematics solutions.">IkParameterization</ref>&amp;<sp/>ikparam,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itdata,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timederivative)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1415"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>searchname;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>timederivative<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ikparam_values&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ikparam_velocities&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ad10ef3ff91ab904ff479d57d66ae2abd" kindref="member">OPENRAVE_EXCEPTION_FORMAT0</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>time<sp/>derivative&quot;</highlight><highlight class="normal">,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>searchname.size()<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,searchname.size())<sp/>==<sp/>searchname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(itgroup-&gt;name.substr(searchname.size()));</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iktype<sp/>=<sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea26d93743c6292ee325f9b2dc3fe17b7a" kindref="member">IKP_None</ref>;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>iktype;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!ss<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ikparam.<ref refid="classOpenRAVE_1_1IkParameterization_1a42cd2297d86211c05de797d6b47076a3" kindref="member">Set</ref>(itdata+itgroup-&gt;offset,static_cast&lt;IkParameterizationType&gt;(iktype));</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bfound;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438" refid="classOpenRAVE_1_1ConfigurationSpecification_1ac58749acb6422259c079fdb0b62a6d59" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ac58749acb6422259c079fdb0b62a6d59" kindref="member" tooltip="extracts the affine values">ConfigurationSpecification::ExtractAffineValues</ref>(std::vector&lt;dReal&gt;::iterator<sp/>itvalues,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itdata,<sp/><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref><sp/>pbody,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timederivative)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1439"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinedofs<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>searchname;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>timederivative<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;affine_values&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;affine_velocities&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;affine_accelerations&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ad10ef3ff91ab904ff479d57d66ae2abd" kindref="member">OPENRAVE_EXCEPTION_FORMAT0</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>time<sp/>derivative&quot;</highlight><highlight class="normal">,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>searchname.size()<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,searchname.size())<sp/>==<sp/>searchname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(itgroup-&gt;name.substr(searchname.size()));</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>bodyname;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceaffinedofs=0;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>bodyname<sp/>&gt;&gt;<sp/>sourceaffinedofs;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!ss<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!pbody<sp/>&amp;&amp;<sp/>bodyname<sp/>!=<sp/>pbody-&gt;GetName()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/><ref refid="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" kindref="member" tooltip="Returns the degrees of freedom needed to represent all the values in the affine dof...">RaveGetAffineDOF</ref>(affinedofs);<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" kindref="member" tooltip="Selects which DOFs of the affine transformation to include in the active configuration...">DOFAffine</ref><sp/>dof<sp/>=<sp/><ref refid="namespaceOpenRAVE_1aa74e6e2a15fb305f40f1c111ccba4409" kindref="member" tooltip="Given a mask of affine dofs and an index into the array, returns the affine dof that...">RaveGetAffineDOFFromIndex</ref>(affinedofs,index);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startindex<sp/>=<sp/><ref refid="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" kindref="member" tooltip="Given a mask of affine dofs and a dof inside that mask, returns the index where the...">RaveGetIndexFromAffineDOF</ref>(affinedofs,dof);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>sourceaffinedofs<sp/>&amp;<sp/>dof<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceindex<sp/>=<sp/><ref refid="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" kindref="member" tooltip="Given a mask of affine dofs and a dof inside that mask, returns the index where the...">RaveGetIndexFromAffineDOF</ref>(sourceaffinedofs,dof);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(itvalues+index)<sp/>=<sp/>*(itdata<sp/>+<sp/>sourceindex<sp/>+<sp/>(index-startindex));</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bfound;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478" refid="classOpenRAVE_1_1ConfigurationSpecification_1a982a9ba9c94e0c983df1824b2464ddef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a982a9ba9c94e0c983df1824b2464ddef" kindref="member" tooltip="extracts a body&amp;#39;s joint values given the start of a configuration space point...">ConfigurationSpecification::ExtractJointValues</ref>(std::vector&lt;dReal&gt;::iterator<sp/>itvalues,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itdata,<sp/><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref><sp/>pbody,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timederivative)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1479"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>indices.size()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>searchname;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>timederivative<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;joint_values&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;joint_velocities&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;joint_accelerations&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ad10ef3ff91ab904ff479d57d66ae2abd" kindref="member">OPENRAVE_EXCEPTION_FORMAT0</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>time<sp/>derivative&quot;</highlight><highlight class="normal">,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>searchname.size()<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,searchname.size())<sp/>==<sp/>searchname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(itgroup-&gt;name.substr(searchname.size()));</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>bodyname;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>bodyname;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!ss<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!pbody<sp/>&amp;&amp;<sp/>bodyname<sp/>!=<sp/>pbody-&gt;GetName()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>vgroupindices((istream_iterator&lt;int&gt;(ss)),<sp/>istream_iterator&lt;int&gt;());</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>indices.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>find(vgroupindices.begin(),vgroupindices.end(),indices[i]);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>!=<sp/>vgroupindices.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(itvalues+i)<sp/>=<sp/>*(itdata+itgroup-&gt;offset+(it-vgroupindices.begin()));</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bfound;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515" refid="classOpenRAVE_1_1ConfigurationSpecification_1ad8c580ee81ec1c23acc74af42a5422de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ad8c580ee81ec1c23acc74af42a5422de" kindref="member" tooltip="extracts the delta time from the configuration if one exists">ConfigurationSpecification::ExtractDeltaTime</ref>(<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>&amp;<sp/>deltatime,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itdata)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1516"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;deltatime&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltatime<sp/>=<sp/>*(itdata+itgroup-&gt;offset);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526" refid="classOpenRAVE_1_1ConfigurationSpecification_1ab4da99dc9ebd9975a68a3d87abb1f236" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ab4da99dc9ebd9975a68a3d87abb1f236" kindref="member" tooltip="inserts a set of joint values into a configuration space point">ConfigurationSpecification::InsertJointValues</ref>(std::vector&lt;dReal&gt;::iterator<sp/>itdata,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itvalues,<sp/><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref><sp/>pbody,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timederivative)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1527"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>indices.size()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>searchname;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>timederivative<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;joint_values&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;joint_velocities&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>searchname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;joint_accelerations&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ad10ef3ff91ab904ff479d57d66ae2abd" kindref="member">OPENRAVE_EXCEPTION_FORMAT0</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>time<sp/>derivative&quot;</highlight><highlight class="normal">,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name.size()<sp/>&gt;=<sp/>searchname.size()<sp/>&amp;&amp;<sp/>itgroup-&gt;name.substr(0,searchname.size())<sp/>==<sp/>searchname<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(itgroup-&gt;name.substr(searchname.size()));</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>bodyname;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>bodyname;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!ss<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!pbody<sp/>&amp;&amp;<sp/>bodyname<sp/>!=<sp/>pbody-&gt;GetName()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>vgroupindices((istream_iterator&lt;int&gt;(ss)),<sp/>istream_iterator&lt;int&gt;());</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vgroupindices.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::const_iterator<sp/>it<sp/>=<sp/>find(indices.begin(),indices.end(),vgroupindices[i]);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>!=<sp/>indices.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(itdata+itgroup-&gt;offset+i)<sp/>=<sp/>*(itvalues+*it);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bfound;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563" refid="classOpenRAVE_1_1ConfigurationSpecification_1ab65b63518528950d146752020602107d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ab65b63518528950d146752020602107d" kindref="member" tooltip="sets the deltatime field of the data if one exists">ConfigurationSpecification::InsertDeltaTime</ref>(std::vector&lt;dReal&gt;::iterator<sp/>itdata,<sp/><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref><sp/>deltatime)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itgroup,<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itgroup-&gt;name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;deltatime&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(itdata+itgroup-&gt;offset)<sp/>=<sp/>deltatime;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bfound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bfound;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575" refid="namespaceOpenRAVE_1a3d83feefc90b66c4bcf4de1d2fd852f6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a3d83feefc90b66c4bcf4de1d2fd852f6" kindref="member">ConvertDOFRotation_AxisFrom3D</ref>(std::vector&lt;dReal&gt;::iterator<sp/>ittarget,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itsource,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>&amp;<sp/>vaxis)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>axisangle(*(itsource+0),*(itsource+1),*(itsource+2));</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>*ittarget<sp/>=<sp/><ref refid="group__affine__math_1ga436efaa950bb38f3b3b8a891e5da5591" kindref="member" tooltip="Find the rotation theta around axis such that rot(axis,theta) * q is closest to the...">normalizeAxisRotation</ref>(vaxis,<ref refid="group__affine__math_1ga8a5d9ee6c215ae740e449a8310e4e9d4" kindref="member" tooltip="Converts an axis-angle rotation into a quaternion.">quatFromAxisAngle</ref>(axisangle)).first;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581" refid="namespaceOpenRAVE_1a4d0a60f4de4cfa52a602471c44b8e3aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a4d0a60f4de4cfa52a602471c44b8e3aa" kindref="member">ConvertDOFRotation_AxisFromQuat</ref>(std::vector&lt;dReal&gt;::iterator<sp/>ittarget,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itsource,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>&amp;<sp/>vaxis)</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>quat(*(itsource+0),*(itsource+1),*(itsource+2),*(itsource+3));</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>*ittarget<sp/>=<sp/><ref refid="group__affine__math_1ga436efaa950bb38f3b3b8a891e5da5591" kindref="member" tooltip="Find the rotation theta around axis such that rot(axis,theta) * q is closest to the...">normalizeAxisRotation</ref>(vaxis,quat).first;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587" refid="namespaceOpenRAVE_1acfbf6c5e490568e0db3236cddb4f04d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1acfbf6c5e490568e0db3236cddb4f04d2" kindref="member">ConvertDOFRotation_3DFromAxis</ref>(std::vector&lt;dReal&gt;::iterator<sp/>ittarget,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itsource,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>&amp;<sp/>vaxis)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+0)<sp/>=<sp/>vaxis[0]*<sp/>*itsource;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+1)<sp/>=<sp/>vaxis[1]*<sp/>*itsource;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+2)<sp/>=<sp/>vaxis[2]*<sp/>*itsource;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1593" refid="namespaceOpenRAVE_1ac9a12562ccc708c1215b178b66ba985c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ac9a12562ccc708c1215b178b66ba985c" kindref="member">ConvertDOFRotation_3DFromQuat</ref>(std::vector&lt;dReal&gt;::iterator<sp/>ittarget,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itsource)</highlight></codeline>
<codeline lineno="1594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>quat(*(itsource+0),*(itsource+1),*(itsource+2),*(itsource+3));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>axisangle<sp/>=<sp/><ref refid="group__affine__math_1ga8a5d9ee6c215ae740e449a8310e4e9d4" kindref="member" tooltip="Converts an axis-angle rotation into a quaternion.">quatFromAxisAngle</ref>(quat);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+0)<sp/>=<sp/>axisangle[0];</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+1)<sp/>=<sp/>axisangle[1];</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+2)<sp/>=<sp/>axisangle[2];</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1601" refid="namespaceOpenRAVE_1a778de70a7a9f357806744a71aac51e01" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a778de70a7a9f357806744a71aac51e01" kindref="member">ConvertDOFRotation_QuatFromAxis</ref>(std::vector&lt;dReal&gt;::iterator<sp/>ittarget,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itsource,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>&amp;<sp/>vaxis)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>axisangle<sp/>=<sp/>vaxis<sp/>*<sp/>*itsource;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>quat<sp/>=<sp/><ref refid="group__affine__math_1ga8a5d9ee6c215ae740e449a8310e4e9d4" kindref="member" tooltip="Converts an axis-angle rotation into a quaternion.">quatFromAxisAngle</ref>(axisangle);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+0)<sp/>=<sp/>quat[0];</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+1)<sp/>=<sp/>quat[1];</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+2)<sp/>=<sp/>quat[2];</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+3)<sp/>=<sp/>quat[3];</highlight></codeline>
<codeline lineno="1609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611" refid="namespaceOpenRAVE_1ab03184219b5e98e42defe2e18234c305" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ab03184219b5e98e42defe2e18234c305" kindref="member">ConvertDOFRotation_QuatFrom3D</ref>(std::vector&lt;dReal&gt;::iterator<sp/>ittarget,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itsource)</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>axisangle(*(itsource+0),*(itsource+1),*(itsource+2));</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>quat<sp/>=<sp/><ref refid="group__affine__math_1ga8a5d9ee6c215ae740e449a8310e4e9d4" kindref="member" tooltip="Converts an axis-angle rotation into a quaternion.">quatFromAxisAngle</ref>(axisangle);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+0)<sp/>=<sp/>quat[0];</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+1)<sp/>=<sp/>quat[1];</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+2)<sp/>=<sp/>quat[2];</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ittarget+3)<sp/>=<sp/>quat[3];</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621" refid="classOpenRAVE_1_1ConfigurationSpecification_1a42b91113c92f1a813682f355d51b43df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a42b91113c92f1a813682f355d51b43df" kindref="member" tooltip="given two compatible groups, convers data represented in the source group to data...">ConfigurationSpecification::ConvertGroupData</ref>(std::vector&lt;dReal&gt;::iterator<sp/>ittargetdata,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>targetstride,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref>&amp;<sp/>gtarget,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itsourcedata,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sourcestride,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref>&amp;<sp/>gsource,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numpoints,<sp/><ref refid="namespaceOpenRAVE_1aae90d424b7f3d69b2f382c5e30d1ae57" kindref="member">EnvironmentBaseConstPtr</ref><sp/>penv)</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>numpoints<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(targetstride<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>sourcestride<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>==<sp/>gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>==gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numpoints;<sp/>++i,<sp/>itsourcedata<sp/>+=<sp/>sourcestride,<sp/>ittargetdata<sp/>+=<sp/>targetstride)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(itsourcedata,itsourcedata+gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>,ittargetdata);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>targettokens((istream_iterator&lt;std::string&gt;(ss)),<sp/>istream_iterator&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.clear();</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.str(gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>sourcetokens((istream_iterator&lt;std::string&gt;(ss)),<sp/>istream_iterator&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(targettokens.at(0)<sp/>==<sp/>sourcetokens.at(0));</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>vtransferindices;<sp/>vtransferindices.reserve(gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;dReal&gt;<sp/>vdefaultvalues;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens.at(0).size()<sp/>&gt;=<sp/>6<sp/>&amp;&amp;<sp/>targettokens.at(0).substr(0,6)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;joint_&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>vsourceindices(gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>),<sp/>vtargetindices(gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)sourcetokens.size()<sp/>&lt;<sp/>gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>+2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a5c5058dd8a101f87dca4d6ca16bc7ebc" kindref="member">RAVELOG_DEBUG</ref>(str(boost::format(</highlight><highlight class="stringliteral">&quot;source<sp/>tokens<sp/>&apos;%s&apos;<sp/>do<sp/>not<sp/>have<sp/>%d<sp/>dof<sp/>indices,<sp/>guessing....&quot;</highlight><highlight class="normal">)%gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>%gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>));</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsourceindices[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsourceindices[i]<sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(sourcetokens.at(i+2));</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)targettokens.size()<sp/>&lt;<sp/>gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>+2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(str(boost::format(</highlight><highlight class="stringliteral">&quot;target<sp/>tokens<sp/>&apos;%s&apos;<sp/>do<sp/>not<sp/>match<sp/>dof<sp/>&apos;%d&apos;,<sp/>guessing....&quot;</highlight><highlight class="normal">)%gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>%gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>));</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtargetindices[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtargetindices[i]<sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(targettokens.at(i+2));</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bUninitializedData=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACH(ittargetindex,vtargetindices)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>find(vsourceindices.begin(),vsourceindices.end(),*ittargetindex);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>==<sp/>vsourceindices.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bUninitializedData<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtransferindices.push_back(-1);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtransferindices.push_back(static_cast&lt;int&gt;(it-vsourceindices.begin()));</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>bUninitializedData<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref><sp/>pbody;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens.size()<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbody<sp/>=<sp/>penv-&gt;GetKinBody(targettokens.at(1));</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!pbody<sp/>&amp;&amp;<sp/>sourcetokens.size()<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbody<sp/>=<sp/>penv-&gt;GetKinBody(sourcetokens.at(1));</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!pbody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(str(boost::format(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>find<sp/>body<sp/>&apos;%s&apos;<sp/>or<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">)%gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>%gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>));</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdefaultvalues.resize(vtargetindices.size(),0);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;dReal&gt;<sp/>vbodyvalues;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdefaultvalues.resize(vtargetindices.size(),0);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;joint_values&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbody-&gt;GetDOFValues(vbodyvalues);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;joint_velocities&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbody-&gt;GetDOFVelocities(vbodyvalues);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vbodyvalues.size()<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vdefaultvalues.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdefaultvalues[i]<sp/>=<sp/>vbodyvalues.at(vtargetindices[i]);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens.at(0).size()<sp/>&gt;=<sp/>7<sp/>&amp;&amp;<sp/>targettokens.at(0).substr(0,7)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;affine_&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinesource<sp/>=<sp/>0,<sp/>affinetarget<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref><sp/>sourceaxis(0,0,1),<sp/>targetaxis(0,0,1);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>sourcetokens.size()<sp/>&lt;<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens.size()<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref><sp/>==<sp/>gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>targettokens.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtransferindices[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;source<sp/>affine<sp/>information<sp/>not<sp/>present<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>affinesource<sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(sourcetokens.at(2));</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(<ref refid="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" kindref="member" tooltip="Returns the degrees of freedom needed to represent all the values in the affine dof...">RaveGetAffineDOF</ref>(affinesource)<sp/>==<sp/>gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(affinesource<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member" tooltip="can rotate around an axis (1 dof)">DOF_RotationAxis</ref>)<sp/>&amp;&amp;<sp/>sourcetokens.size()<sp/>&gt;=<sp/>6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceaxis.x<sp/>=<sp/>boost::lexical_cast&lt;<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>&gt;(sourcetokens.at(3));</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceaxis.y<sp/>=<sp/>boost::lexical_cast&lt;<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>&gt;(sourcetokens.at(4));</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceaxis.z<sp/>=<sp/>boost::lexical_cast&lt;<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>&gt;(sourcetokens.at(5));</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vtransferindices.size()<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens.size()<sp/>&lt;<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;target<sp/>affine<sp/>information<sp/>not<sp/>present<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>affinetarget<sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(targettokens.at(2));</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(<ref refid="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" kindref="member" tooltip="Returns the degrees of freedom needed to represent all the values in the affine dof...">RaveGetAffineDOF</ref>(affinetarget)<sp/>==<sp/>gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(affinetarget<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member" tooltip="can rotate around an axis (1 dof)">DOF_RotationAxis</ref>)<sp/>&amp;&amp;<sp/>targettokens.size()<sp/>&gt;=<sp/>6<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetaxis.x<sp/>=<sp/>boost::lexical_cast&lt;<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>&gt;(targettokens.at(3));</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetaxis.y<sp/>=<sp/>boost::lexical_cast&lt;<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>&gt;(targettokens.at(4));</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetaxis.z<sp/>=<sp/>boost::lexical_cast&lt;<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>&gt;(targettokens.at(5));</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>commondata<sp/>=<sp/>affinesource&amp;affinetarget;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uninitdata<sp/>=<sp/>affinetarget&amp;(~commondata);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourcerotationstart<sp/>=<sp/>-1,<sp/>targetrotationstart<sp/>=<sp/>-1,<sp/>targetrotationend<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::function&lt;<sp/>void(std::vector&lt;dReal&gt;::iterator,<sp/>std::vector&lt;dReal&gt;::const_iterator)<sp/>&gt;<sp/>rotconverterfn;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(uninitdata<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a8d26ee42cff6b4d775040f3b8b7cda8d" kindref="member" tooltip="mask for all bits representing 3D rotations">DOF_RotationMask</ref>)<sp/>&amp;&amp;<sp/>(affinetarget<sp/>&amp;<sp/>DOF_RotationMask)<sp/>&amp;&amp;<sp/>(affinesource<sp/>&amp;<sp/>DOF_RotationMask)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>hold<sp/>rotations,<sp/>but<sp/>need<sp/>to<sp/>convert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uninitdata<sp/>&amp;=<sp/>~DOF_RotationMask;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourcerotationstart<sp/>=<sp/><ref refid="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" kindref="member" tooltip="Given a mask of affine dofs and a dof inside that mask, returns the index where the...">RaveGetIndexFromAffineDOF</ref>(affinesource,DOF_RotationMask);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetrotationstart<sp/>=<sp/><ref refid="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" kindref="member" tooltip="Given a mask of affine dofs and a dof inside that mask, returns the index where the...">RaveGetIndexFromAffineDOF</ref>(affinetarget,DOF_RotationMask);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetrotationend<sp/>=<sp/>targetrotationstart+<ref refid="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" kindref="member" tooltip="Returns the degrees of freedom needed to represent all the values in the affine dof...">RaveGetAffineDOF</ref>(affinetarget&amp;DOF_RotationMask);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinetarget<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member" tooltip="can rotate around an axis (1 dof)">DOF_RotationAxis</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinesource<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" kindref="member">DOF_Rotation3D</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotconverterfn<sp/>=<sp/>boost::bind(<ref refid="namespaceOpenRAVE_1a3d83feefc90b66c4bcf4de1d2fd852f6" kindref="member">ConvertDOFRotation_AxisFrom3D</ref>,_1,_2,targetaxis);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinesource<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotconverterfn<sp/>=<sp/>boost::bind(<ref refid="namespaceOpenRAVE_1a4d0a60f4de4cfa52a602471c44b8e3aa" kindref="member">ConvertDOFRotation_AxisFromQuat</ref>,_1,_2,targetaxis);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinetarget<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" kindref="member">DOF_Rotation3D</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinesource<sp/>&amp;<sp/>DOF_RotationAxis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotconverterfn<sp/>=<sp/>boost::bind(<ref refid="namespaceOpenRAVE_1acfbf6c5e490568e0db3236cddb4f04d2" kindref="member">ConvertDOFRotation_3DFromAxis</ref>,_1,_2,sourceaxis);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinesource<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotconverterfn<sp/>=<sp/><ref refid="namespaceOpenRAVE_1ac9a12562ccc708c1215b178b66ba985c" kindref="member">ConvertDOFRotation_3DFromQuat</ref>;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinetarget<sp/>&amp;<sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" kindref="member" tooltip="can rotate freely (4 dof), parameterization is a quaternion. In order for limits...">DOF_RotationQuat</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinesource<sp/>&amp;<sp/>DOF_RotationAxis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotconverterfn<sp/>=<sp/>boost::bind(<ref refid="namespaceOpenRAVE_1a778de70a7a9f357806744a71aac51e01" kindref="member">ConvertDOFRotation_QuatFromAxis</ref>,_1,_2,sourceaxis);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinesource<sp/>&amp;<sp/>DOF_Rotation3D<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotconverterfn<sp/>=<sp/><ref refid="namespaceOpenRAVE_1ab03184219b5e98e42defe2e18234c305" kindref="member">ConvertDOFRotation_QuatFrom3D</ref>;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(!!rotconverterfn);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uninitdata<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>with<sp/>the<sp/>current<sp/>body<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref><sp/>pbody;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens.size()<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbody<sp/>=<sp/>penv-&gt;GetKinBody(targettokens.at(1));</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!pbody<sp/>&amp;&amp;<sp/>sourcetokens.size()<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbody<sp/>=<sp/>penv-&gt;GetKinBody(sourcetokens.at(1));</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!pbody<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(str(boost::format(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>find<sp/>body<sp/>&apos;%s&apos;<sp/>or<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">)%gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>%gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>));</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdefaultvalues.resize(gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>,0);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdefaultvalues.resize(gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1acee29007f1d29ce38571cadfec3ba99e" kindref="member" tooltip="Converts the transformation matrix into the specified affine values format.">RaveGetAffineDOFValuesFromTransform</ref>(vdefaultvalues.begin(),pbody-&gt;GetTransform(),affinetarget);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref>;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" kindref="member" tooltip="Selects which DOFs of the affine transformation to include in the active configuration...">DOFAffine</ref><sp/>dof<sp/>=<sp/><ref refid="namespaceOpenRAVE_1aa74e6e2a15fb305f40f1c111ccba4409" kindref="member" tooltip="Given a mask of affine dofs and an index into the array, returns the affine dof that...">RaveGetAffineDOFFromIndex</ref>(affinetarget,index);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startindex<sp/>=<sp/><ref refid="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" kindref="member" tooltip="Given a mask of affine dofs and a dof inside that mask, returns the index where the...">RaveGetIndexFromAffineDOF</ref>(affinetarget,dof);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>affinesource<sp/>&amp;<sp/>dof<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceindex<sp/>=<sp/><ref refid="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" kindref="member" tooltip="Given a mask of affine dofs and a dof inside that mask, returns the index where the...">RaveGetIndexFromAffineDOF</ref>(affinesource,dof);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtransferindices.push_back(sourceindex<sp/>+<sp/>(index-startindex));</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtransferindices.push_back(-1);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numpoints;<sp/>++i,<sp/>itsourcedata<sp/>+=<sp/>sourcestride,<sp/>ittargetdata<sp/>+=<sp/>targetstride)<sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)vtransferindices.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vtransferindices[j]<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(ittargetdata+j)<sp/>=<sp/>*(itsourcedata+vtransferindices[j]);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>j<sp/>&gt;=<sp/>targetrotationstart<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>targetrotationend<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>j<sp/>==<sp/>targetrotationstart<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>convert<sp/>when<sp/>at<sp/>first<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotconverterfn(ittargetdata+targetrotationstart,itsourcedata+sourcerotationstart);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(ittargetdata+j)<sp/>=<sp/>vdefaultvalues.at(j);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens.at(0).size()<sp/>&gt;=<sp/>8<sp/>&amp;&amp;<sp/>targettokens.at(0).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ikparam_&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2e" kindref="member" tooltip="The types of inverse kinematics parameterizations supported.">IkParameterizationType</ref><sp/>iktypesource,<sp/>iktypetarget;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>sourcetokens.size()<sp/>&gt;=<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iktypesource<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2e" kindref="member" tooltip="The types of inverse kinematics parameterizations supported.">IkParameterizationType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(boost::lexical_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(sourcetokens[1]));</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;ikparam<sp/>type<sp/>not<sp/>present<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,gsource.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>targettokens.size()<sp/>&gt;=<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iktypetarget<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2e" kindref="member" tooltip="The types of inverse kinematics parameterizations supported.">IkParameterizationType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(boost::lexical_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(targettokens[1]));</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;ikparam<sp/>type<sp/>not<sp/>present<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>iktypetarget<sp/>==<sp/>iktypesource<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtransferindices.resize(<ref refid="classOpenRAVE_1_1IkParameterization_1ac938a6c271285a5468b805a3243e20e6" kindref="member" tooltip="Returns the minimum degree of freedoms required for the IK type.">IkParameterization::GetDOF</ref>(iktypetarget));</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vtransferindices.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtransferindices[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;ikparam<sp/>types<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>token<sp/>conversion:<sp/>%s&quot;</highlight><highlight class="normal">,gtarget.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref>,<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numpoints;<sp/>++i,<sp/>itsourcedata<sp/>+=<sp/>sourcestride,<sp/>ittargetdata<sp/>+=<sp/>targetstride)<sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vtransferindices.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vtransferindices[j]<sp/>&gt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(ittargetdata+j)<sp/>=<sp/>*(itsourcedata+vtransferindices[j]);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(ittargetdata+j)<sp/>=<sp/>vdefaultvalues.at(j);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874" refid="classOpenRAVE_1_1ConfigurationSpecification_1a10788f496736608c276546db6127792a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a10788f496736608c276546db6127792a" kindref="member" tooltip="Converts from one specification to another.">ConfigurationSpecification::ConvertData</ref>(std::vector&lt;dReal&gt;::iterator<sp/>ittargetdata,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/>&amp;targetspec,<sp/>std::vector&lt;dReal&gt;::const_iterator<sp/>itsourcedata,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/>&amp;sourcespec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numpoints,<sp/><ref refid="namespaceOpenRAVE_1aae90d424b7f3d69b2f382c5e30d1ae57" kindref="member">EnvironmentBaseConstPtr</ref><sp/>penv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>filluninitialized)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>igroup<sp/>=<sp/>0;<sp/>igroup<sp/>&lt;<sp/>targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size();<sp/>++igroup)<sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ConfigurationSpecification::Group&gt;::const_iterator<sp/>itcompatgroup<sp/>=<sp/>sourcespec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a00dca7273ad0d271e131ecc1119683c2" kindref="member" tooltip="finds the most compatible group to the given group">FindCompatibleGroup</ref>(targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[igroup]);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itcompatgroup<sp/>!=<sp/>sourcespec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a42b91113c92f1a813682f355d51b43df" kindref="member" tooltip="given two compatible groups, convers data represented in the source group to data...">ConfigurationSpecification::ConvertGroupData</ref>(ittargetdata+targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[igroup].offset,<sp/>targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ac938a6c271285a5468b805a3243e20e6" kindref="member" tooltip="return the dimension of the configuraiton space (degrees of freedom)">GetDOF</ref>(),<sp/>targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[igroup],<sp/>itsourcedata+itcompatgroup-&gt;offset,<sp/>sourcespec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ac938a6c271285a5468b805a3243e20e6" kindref="member" tooltip="return the dimension of the configuraiton space (degrees of freedom)">GetDOF</ref>(),<sp/>*itcompatgroup,numpoints,penv);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>filluninitialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;dReal&gt;<sp/>vdefaultvalues(targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[igroup].dof,0);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>name<sp/>=<sp/>targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[igroup].name;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name.size()<sp/>&gt;=<sp/>12<sp/>&amp;&amp;<sp/>name.substr(0,12)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;joint_values&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>bodyname;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(name.substr(12));</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>bodyname;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!ss<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!penv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref><sp/>body<sp/>=<sp/>penv-&gt;GetKinBody(bodyname);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;dReal&gt;<sp/>values;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;GetDOFValues(values);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>indices((istream_iterator&lt;int&gt;(ss)),<sp/>istream_iterator&lt;int&gt;());</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>indices.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdefaultvalues.at(i)<sp/>=<sp/>values.at(indices[i]);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name.size()<sp/>&gt;=<sp/>16<sp/>&amp;&amp;<sp/>name.substr(0,16)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;affine_transform&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>bodyname;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>affinedofs;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss(name.substr(16));</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>bodyname<sp/>&gt;&gt;<sp/>affinedofs;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!ss<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" kindref="member">Transform</ref><sp/>tdefault;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!penv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref><sp/>body<sp/>=<sp/>penv-&gt;GetKinBody(bodyname);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!body<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tdefault<sp/>=<sp/>body-&gt;GetTransform();</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)vdefaultvalues.size()<sp/>==<sp/><ref refid="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" kindref="member" tooltip="Returns the degrees of freedom needed to represent all the values in the affine dof...">RaveGetAffineDOF</ref>(affinedofs));</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1acee29007f1d29ce38571cadfec3ba99e" kindref="member" tooltip="Converts the transformation matrix into the specified affine values format.">RaveGetAffineDOFValuesFromTransform</ref>(vdefaultvalues.begin(),tdefault,affinedofs);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;deltatime&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a5731d8d29ec32fe32d4901990066a95c" kindref="member">RAVELOG_VERBOSE</ref>(str(boost::format(</highlight><highlight class="stringliteral">&quot;cannot<sp/>initialize<sp/>unknown<sp/>group<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">)%name));</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>[igroup].offset;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numpoints;<sp/>++i,<sp/>offset<sp/>+=<sp/>targetspec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1ac938a6c271285a5468b805a3243e20e6" kindref="member" tooltip="return the dimension of the configuraiton space (degrees of freedom)">GetDOF</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vdefaultvalues.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(ittargetdata+offset+j)<sp/>=<sp/>vdefaultvalues[j];</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932" refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a4422b3b2e898c8a358d6f1eade2c1aea" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a4422b3b2e898c8a358d6f1eade2c1aea" kindref="member">ConfigurationSpecification::Reader::Reader</ref>(<ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref>&amp;<sp/>spec)<sp/>:<sp/>_spec(spec)</highlight></codeline>
<codeline lineno="1933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a130cc590322dd03ebeb4d862308293c7" kindref="member">_spec</ref><sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref>();<sp/></highlight><highlight class="comment">//<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937" refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1ac774a5875e3574f18e13f0bb78f42c6f" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9" kindref="member">BaseXMLReader::ProcessElement</ref><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1ac774a5875e3574f18e13f0bb78f42c6f" kindref="member">ConfigurationSpecification::Reader::startElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref><sp/>&amp;atts)</highlight></codeline>
<codeline lineno="1938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1ab4d8dc52e167678ba742d5e74fa8bbd2" kindref="member">_ss</ref>.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>clear<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;group&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a130cc590322dd03ebeb4d862308293c7" kindref="member">_spec</ref>.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.resize(<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a130cc590322dd03ebeb4d862308293c7" kindref="member">_spec</ref>.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.size()+1);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group" kindref="compound" tooltip="A group referencing the values of one body in the environment.">ConfigurationSpecification::Group</ref>&amp;<sp/>g<sp/>=<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a130cc590322dd03ebeb4d862308293c7" kindref="member">_spec</ref>.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>.back();</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACHC(itatt,atts)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itatt-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a9b45b3e13bd9167aab02e17e08916231" kindref="member" tooltip="semantic information on what part of the environment the group refers to.">name</ref><sp/>=<sp/>itatt-&gt;second;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itatt-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;interpolation&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1ac5505c39cf473d93d9ef8690d181d007" kindref="member" tooltip="Describes how the data should be interpolated. Common methods are:">interpolation</ref><sp/>=<sp/>itatt-&gt;second;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itatt-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;offset&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1aed7ea92f45bd273dde380a45ddced592" kindref="member" tooltip="For each data point, the number of values to offset before data for this group starts...">offset</ref><sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(itatt-&gt;second);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itatt-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;dof&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Group_1a03745287ca42590ead4a18807041fc66" kindref="member" tooltip="The number of values in this group.">dof</ref><sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(itatt-&gt;second);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9a5123a3d32d744694919844d9675ede67" kindref="member" tooltip="current tag will be processed by this class">PE_Support</ref>;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9a55670b1a206d4da09ef69e3690ee7bba" kindref="member" tooltip="current tag was not supported, so pass onto another class">PE_Pass</ref>;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962" refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a657c251dd2fbd2e107a114294f921bf7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a657c251dd2fbd2e107a114294f921bf7" kindref="member">ConfigurationSpecification::Reader::endElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;configuration&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970" refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a5d492a895c2aa0a0d048f2262e1f7405" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1a5d492a895c2aa0a0d048f2262e1f7405" kindref="member">ConfigurationSpecification::Reader::characters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>ch)</highlight></codeline>
<codeline lineno="1971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1ab4d8dc52e167678ba742d5e74fa8bbd2" kindref="member">_ss</ref>.clear();</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader_1ab4d8dc52e167678ba742d5e74fa8bbd2" kindref="member">_ss</ref><sp/>&lt;&lt;<sp/>ch;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976" refid="namespaceOpenRAVE_1aaedb7f5b8cdd08c3b341da81d4ad8340" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceOpenRAVE_1a6659af9ccf72e04a53b444437acd0a42" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>O,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref><sp/>&amp;spec)</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;configuration&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(it,spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1a63d9b7e5c662b5da5584f0d927368812" kindref="member">_vgroups</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;group<sp/>name=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>offset=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;offset<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>dof=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;dof<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>interpolation=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;interpolation<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;/&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>O<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/configuration&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>O;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986" refid="namespaceOpenRAVE_1ae9398a9daa44871c9233018c348f4b78" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespaceOpenRAVE_1a8e429f020d431c017ca32b65df5cfcd8" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>I,<sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound" tooltip="A configuration specification references values in the environment that then define...">ConfigurationSpecification</ref>&amp;<sp/>spec)</highlight></codeline>
<codeline lineno="1987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!I)<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringbuf<sp/>buf;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream::streampos<sp/>pos<sp/>=<sp/>I.tellg();</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.get(buf,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>get<sp/>all<sp/>the<sp/>data,<sp/>yes<sp/>this<sp/>is<sp/>inefficient,<sp/>not<sp/>sure<sp/>if<sp/>there<sp/>anyway<sp/>to<sp/>search<sp/>in<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>pbuf<sp/>=<sp/>buf.str();</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>strcasestr(pbuf.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&lt;/configuration&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ppsize=-1;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.clear();</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppsize=(p-pbuf.c_str())+20;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.seekg((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)pos+ppsize);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="openrave_8h_1ae21b57a0ab5ecc52fb9b4a9432a68b36" kindref="member">OPENRAVE_EXCEPTION_FORMAT</ref>(</highlight><highlight class="stringliteral">&quot;error,<sp/>failed<sp/>to<sp/>find<sp/>&lt;/configuration&gt;<sp/>in<sp/>%s&quot;</highlight><highlight class="normal">,buf.str(),<ref refid="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" kindref="member">ORE_InvalidArguments</ref>);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1ConfigurationSpecification_1_1Reader" kindref="compound">ConfigurationSpecification::Reader</ref><sp/>reader(spec);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1a509c2492a6af93fb83c0e25ba24867f8" kindref="member">LocalXML::ParseXMLData</ref>(<ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref>(&amp;reader,null_deleter()),<sp/>pbuf.c_str(),<sp/>ppsize);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(spec.<ref refid="classOpenRAVE_1_1ConfigurationSpecification_1afa8720abaf6972d6dac22a8cd1a67225" kindref="member" tooltip="check if the groups form a continguous space">IsValid</ref>());</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012" refid="classOpenRAVE_1_1CollisionReport_1a40e8cbeb2c34e4d900eb2dfe7086a1e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a40e8cbeb2c34e4d900eb2dfe7086a1e4" kindref="member">CollisionReport::Reset</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coloptions)</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a849fa981f121eb25a67e4e14392840ba" kindref="member" tooltip="the options that the CollisionReport was called with">options</ref><sp/>=<sp/>coloptions;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a39ecee22e3be662c17e9c9d28215dd66" kindref="member" tooltip="minimum distance from last query, filled if CO_Distance option is set">minDistance</ref><sp/>=<sp/>1e20f;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a2d4acb52d99b57b5b524aaa557ab91eb" kindref="member" tooltip="this is the number of objects that collide with the object of interest">numCols</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a04fc6ba3cfd80183ace93d10661cf32f" kindref="member" tooltip="number of objects within tolerance of this object, filled if CO_UseTolerance option...">numWithinTol</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1CollisionReport_1afd310727fc8474b0057786fadf2088df" kindref="member" tooltip="the convention is that the normal will be &amp;quot;out&amp;quot; of plink1&amp;#39;s surface...">contacts</ref>.resize(0);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a4d32ef985c209aaaca9a4e61c9855e0b" kindref="member" tooltip="objects colliding with this object">vLinkColliding</ref>.resize(0);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022" refid="classOpenRAVE_1_1CollisionReport_1a197d6a1cee7fe4171230acf60afa0a51" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a197d6a1cee7fe4171230acf60afa0a51" kindref="member">CollisionReport::__str__</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2023"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>s;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!<ref refid="classOpenRAVE_1_1CollisionReport_1a81562e5e77f8d4ee032d8990e5e1741e" kindref="member">plink1</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a81562e5e77f8d4ee032d8990e5e1741e" kindref="member">plink1</ref>-&gt;GetParent()-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a81562e5e77f8d4ee032d8990e5e1741e" kindref="member">plink1</ref>-&gt;GetName();</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)x(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!<ref refid="classOpenRAVE_1_1CollisionReport_1a66034fcc62ac4142477872950ef70663" kindref="member" tooltip="the colliding links if a collision involves a bodies. Collisions do not always occur...">plink2</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a66034fcc62ac4142477872950ef70663" kindref="member" tooltip="the colliding links if a collision involves a bodies. Collisions do not always occur...">plink2</ref>-&gt;GetParent()-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classOpenRAVE_1_1CollisionReport_1a66034fcc62ac4142477872950ef70663" kindref="member" tooltip="the colliding links if a collision involves a bodies. Collisions do not always occur...">plink2</ref>-&gt;GetName();</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>contacts=&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="classOpenRAVE_1_1CollisionReport_1afd310727fc8474b0057786fadf2088df" kindref="member" tooltip="the convention is that the normal will be &amp;quot;out&amp;quot; of plink1&amp;#39;s surface...">contacts</ref>.size();</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.str();</highlight></codeline>
<codeline lineno="2035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dummy<sp/>Reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038" refid="classOpenRAVE_1_1DummyXMLReader_1a188d3a43687ec1ff6818f43b512dff00" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1DummyXMLReader_1a188d3a43687ec1ff6818f43b512dff00" kindref="member">DummyXMLReader::DummyXMLReader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fieldname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>pparentname,<sp/>boost::shared_ptr&lt;std::ostream&gt;<sp/>osrecord)<sp/>:<sp/>_fieldname(fieldname),<sp/>_osrecord(osrecord)</highlight></codeline>
<codeline lineno="2039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>_parentname<sp/>=<sp/>pparentname;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>_parentname<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>_parentname<sp/>+=<sp/>_fieldname;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045" refid="classOpenRAVE_1_1DummyXMLReader_1ac774a5875e3574f18e13f0bb78f42c6f" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9" kindref="member">BaseXMLReader::ProcessElement</ref><sp/><ref refid="classOpenRAVE_1_1DummyXMLReader_1ac774a5875e3574f18e13f0bb78f42c6f" kindref="member">DummyXMLReader::startElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref><sp/>&amp;atts)</highlight></codeline>
<codeline lineno="2046"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!_pcurreader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>_pcurreader-&gt;startElement(name,<sp/>atts)<sp/>==<sp/><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9a5123a3d32d744694919844d9675ede67" kindref="member" tooltip="current tag will be processed by this class">PE_Support</ref><sp/>)</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9a5123a3d32d744694919844d9675ede67" kindref="member" tooltip="current tag will be processed by this class">PE_Support</ref>;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9a14953fbbe151fd55cd76395cdccc4af6" kindref="member" tooltip="current tag and all its children should be ignored">PE_Ignore</ref>;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!_osrecord<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*_osrecord<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACHC(itatt,<sp/>atts)</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*_osrecord<sp/>&lt;&lt;<sp/>itatt-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>itatt-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*_osrecord<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>_pcurreader.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1DummyXMLReader_1a188d3a43687ec1ff6818f43b512dff00" kindref="member">DummyXMLReader</ref>(name,<sp/>_parentname,_osrecord));</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9a5123a3d32d744694919844d9675ede67" kindref="member" tooltip="current tag will be processed by this class">PE_Support</ref>;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065" refid="classOpenRAVE_1_1DummyXMLReader_1a657c251dd2fbd2e107a114294f921bf7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1DummyXMLReader_1a657c251dd2fbd2e107a114294f921bf7" kindref="member">DummyXMLReader::endElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="2066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!_pcurreader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>_pcurreader-&gt;endElement(name)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pcurreader.reset();</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!_osrecord<sp/>)</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*_osrecord<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name<sp/>==<sp/>_fieldname<sp/>)</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a4299f3db31dd3149dc36eeffbb6a65db" kindref="member">RAVELOG_ERROR</ref>(str(boost::format(</highlight><highlight class="stringliteral">&quot;invalid<sp/>xml<sp/>tag<sp/>%s\n&quot;</highlight><highlight class="normal">)%name));</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082" refid="classOpenRAVE_1_1DummyXMLReader_1a5d492a895c2aa0a0d048f2262e1f7405" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1DummyXMLReader_1a5d492a895c2aa0a0d048f2262e1f7405" kindref="member">DummyXMLReader::characters</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>ch)</highlight></codeline>
<codeline lineno="2083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!_pcurreader<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!_osrecord<sp/>)</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*_osrecord<sp/>&lt;&lt;<sp/>ch;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pcurreader-&gt;characters(ch);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093" refid="classOpenRAVE_1_1EnvironmentBase_1a9dca6d574f53b7867ee206bbcce8aeff" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1EnvironmentBase_1a9dca6d574f53b7867ee206bbcce8aeff" kindref="member">EnvironmentBase::EnvironmentBase</ref>()</highlight></codeline>
<codeline lineno="2094"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="namespaceOpenRAVE_1a7e84c803da09036af3295e448bd0b17e" kindref="member" tooltip="A pointer to the global openrave state.">RaveGlobalState</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;OpenRAVE<sp/>global<sp/>state<sp/>not<sp/>initialized!<sp/>Need<sp/>to<sp/>call<sp/>RaveInitialize<sp/>before<sp/>any<sp/>OpenRAVE<sp/>services<sp/>can<sp/>be<sp/>used.<sp/>For<sp/>now,<sp/>initializing<sp/>with<sp/>default<sp/>parameters.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab89ccf2331c4ee81662f687cedaa1781" kindref="member" tooltip="Explicitly initializes the global OpenRAVE state (optional).">RaveInitialize</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>__nUniqueId<sp/>=<sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;RegisterEnvironment(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102" refid="classOpenRAVE_1_1EnvironmentBase_1a7c0e0c7c7dc15da85092a93a4cc93fb9" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1EnvironmentBase_1a7c0e0c7c7dc15da85092a93a4cc93fb9" kindref="member">EnvironmentBase::~EnvironmentBase</ref>()</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;UnregisterEnvironment(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108" refid="classOpenRAVE_1_1SensorBase_1_1SensorData_1a27324341bb2e28fa2be2cfd0b7f0e985" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1SensorBase_1_1SensorData_1a27324341bb2e28fa2be2cfd0b7f0e985" kindref="member" tooltip="Serialize the sensor data to stream in XML format.">SensorBase::SensorData::serialize</ref>(std::ostream&amp;<sp/>O)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2109"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;SensorData<sp/>XML<sp/>serialization<sp/>not<sp/>implemented\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114" refid="classOpenRAVE_1_1SensorBase_1_1LaserSensorData_1a27324341bb2e28fa2be2cfd0b7f0e985" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1SensorBase_1_1LaserSensorData_1a27324341bb2e28fa2be2cfd0b7f0e985" kindref="member" tooltip="Serialize the sensor data to stream in XML format.">SensorBase::LaserSensorData::serialize</ref>(std::ostream&amp;<sp/>O)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2115"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;LaserSensorData<sp/>XML<sp/>serialization<sp/>not<sp/>implemented\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2119" refid="classOpenRAVE_1_1SensorBase_1_1TouchSensorData_1a27324341bb2e28fa2be2cfd0b7f0e985" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1SensorBase_1_1TouchSensorData_1a27324341bb2e28fa2be2cfd0b7f0e985" kindref="member" tooltip="Serialize the sensor data to stream in XML format.">SensorBase::TouchSensorData::serialize</ref>(std::ostream&amp;<sp/>O)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2120"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;TouchSensorData<sp/>XML<sp/>serialization<sp/>not<sp/>implemented\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126" refid="classOpenRAVE_1_1SensorBase_1_1CameraSensorData_1a27324341bb2e28fa2be2cfd0b7f0e985" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1SensorBase_1_1CameraSensorData_1a27324341bb2e28fa2be2cfd0b7f0e985" kindref="member" tooltip="Serialize the sensor data to stream in XML format.">SensorBase::CameraSensorData::serialize</ref>(std::ostream&amp;<sp/>O)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2127"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a9bbbf668aa39f398c341e946ab8a43f5" kindref="member">RAVELOG_WARN</ref>(</highlight><highlight class="stringliteral">&quot;CameraSensorData<sp/>XML<sp/>serialization<sp/>not<sp/>implemented\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132" refid="classOpenRAVE_1_1CollisionOptionsStateSaver_1a89b2ace932ac3dd88380d4480568d038" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1CollisionOptionsStateSaver_1a89b2ace932ac3dd88380d4480568d038" kindref="member">CollisionOptionsStateSaver::CollisionOptionsStateSaver</ref>(<ref refid="namespaceOpenRAVE_1ae3e7611a64b7d4204203d69014f45fe8" kindref="member">CollisionCheckerBasePtr</ref><sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newoptions,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>required)</highlight></codeline>
<codeline lineno="2133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>_oldoptions<sp/>=<sp/>p-&gt;GetCollisionOptions();</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>_p<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!_p-&gt;SetCollisionOptions(newoptions)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>required<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound" tooltip="Exception that all OpenRAVE internal methods throw; the error codes are held in OpenRAVEErrorCode...">openrave_exception</ref>(str(boost::format(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>collision<sp/>options<sp/>%d<sp/>in<sp/>checker<sp/>%s\n&quot;</highlight><highlight class="normal">)%newoptions%_p-&gt;GetXMLId()));</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143" refid="classOpenRAVE_1_1CollisionOptionsStateSaver_1af555c726e606d1ad162de608b8e92854" refkind="member"><highlight class="normal"><ref refid="classOpenRAVE_1_1CollisionOptionsStateSaver_1af555c726e606d1ad162de608b8e92854" kindref="member">CollisionOptionsStateSaver::~CollisionOptionsStateSaver</ref>()</highlight></codeline>
<codeline lineno="2144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>_p-&gt;SetCollisionOptions(_oldoptions);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148" refid="namespaceOpenRAVE_1ac39e4bc60516ff7945dd5e506a2f7018" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1ac39e4bc60516ff7945dd5e506a2f7018" kindref="member">RaveInitRandomGeneration</ref>(uint32_t<sp/>seed)</highlight></codeline>
<codeline lineno="2149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDefaultSampler()-&gt;SetSeed(seed);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153" refid="namespaceOpenRAVE_1a71fdac6520a636ef5daab82808551813" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="namespaceOpenRAVE_1a71fdac6520a636ef5daab82808551813" kindref="member">RaveRandomInt</ref>()</highlight></codeline>
<codeline lineno="2154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>sample;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDefaultSampler()-&gt;SampleSequence(sample);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample.at(0);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160" refid="namespaceOpenRAVE_1af106eea57ab2fbb2e632347a3371a813" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1af106eea57ab2fbb2e632347a3371a813" kindref="member">RaveRandomFloat</ref>(<ref refid="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937" kindref="member" tooltip="Specifies the boundary conditions of intervals for sampling.">IntervalType</ref><sp/>interval)</highlight></codeline>
<codeline lineno="2161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;dReal&gt;<sp/>sample;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDefaultSampler()-&gt;SampleSequence(sample,1,interval);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample.at(0);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167" refid="namespaceOpenRAVE_1afca2ae5739f7ecc30350b9ab7ffad941" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1afca2ae5739f7ecc30350b9ab7ffad941" kindref="member">RaveRandomDouble</ref>(<ref refid="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937" kindref="member" tooltip="Specifies the boundary conditions of intervals for sampling.">IntervalType</ref><sp/>interval)</highlight></codeline>
<codeline lineno="2168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;dReal&gt;<sp/>sample;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classOpenRAVE_1_1RaveGlobal_1a50e66cf68a1a02c3b7b4e4f7405a0c26" kindref="member">RaveGlobal::instance</ref>()-&gt;GetDefaultSampler()-&gt;SampleSequence(sample,1,interval);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample.at(0);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174" refid="namespaceOpenRAVE_1ad183eaaf5d06fa4ef512e176b647909d" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceOpenRAVE_1ad183eaaf5d06fa4ef512e176b647909d" kindref="member">GetMD5HashString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="2175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s.size()<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_state_t<sp/>state;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_byte_t<sp/>digest[16];</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_init(&amp;state);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_append(&amp;state,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>md5_byte_t<sp/>*)s.c_str(),<sp/>s.size());</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_finish(&amp;state,<sp/>digest);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>hex_output;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>hex_output.resize(32);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>di<sp/>=<sp/>0;<sp/>di<sp/>&lt;<sp/>16;<sp/>++di)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(digest[di]&amp;0xf);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hex_output[2*di+1]<sp/>=<sp/>n<sp/>&gt;<sp/>9<sp/>?<sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">+n-10)<sp/>:<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">+n);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(digest[di]&amp;0xf0)&gt;&gt;4;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hex_output[2*di+0]<sp/>=<sp/>n<sp/>&gt;<sp/>9<sp/>?<sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">+n-10)<sp/>:<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">+n);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hex_output;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196" refid="namespaceOpenRAVE_1abf02b34cd96419036a4e0786023d87b2" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceOpenRAVE_1ad183eaaf5d06fa4ef512e176b647909d" kindref="member">GetMD5HashString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;&amp;v)</highlight></codeline>
<codeline lineno="2197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>v.size()<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_state_t<sp/>state;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_byte_t<sp/>digest[16];</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_init(&amp;state);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_append(&amp;state,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>md5_byte_t<sp/>*)&amp;v[0],<sp/>v.size());</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>md5_finish(&amp;state,<sp/>digest);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>hex_output;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>hex_output.resize(32);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>di<sp/>=<sp/>0;<sp/>di<sp/>&lt;<sp/>16;<sp/>++di)<sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(digest[di]&amp;0xf);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hex_output[2*di+0]<sp/>=<sp/>n<sp/>&gt;<sp/>9<sp/>?<sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">+n-10)<sp/>:<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">+n);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(digest[di]&amp;0xf0)&gt;&gt;4;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hex_output[2*di+1]<sp/>=<sp/>n<sp/>&gt;<sp/>9<sp/>?<sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">+n-10)<sp/>:<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">+n);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hex_output;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218" refid="namespaceOpenRAVE_1a5228dccd48432a2bda7e57fb45a560c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a5228dccd48432a2bda7e57fb45a560c8" kindref="member">PairStringLengthCompare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,<sp/>std::string&gt;&amp;p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,<sp/>std::string&gt;&amp;p1)</highlight></codeline>
<codeline lineno="2219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p0.first.size()<sp/>&gt;<sp/>p1.first.size();</highlight></codeline>
<codeline lineno="2221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223" refid="namespaceOpenRAVE_1ab8cc310307860144e591da7bd391a35b" refkind="member"><highlight class="normal">std::string&amp;<sp/><ref refid="namespaceOpenRAVE_1ab8cc310307860144e591da7bd391a35b" kindref="member">SearchAndReplace</ref>(std::string&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>&gt;&amp;_pairs)</highlight></codeline>
<codeline lineno="2224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_ASSERT(&amp;out<sp/>!=<sp/>&amp;in);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>FOREACHC(itp,_pairs)<sp/>{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ASSERT(itp-&gt;first.size()&gt;0);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>&gt;<sp/>pairs<sp/>=<sp/>_pairs;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/>stable_sort(pairs.begin(),pairs.end(),<ref refid="namespaceOpenRAVE_1a5228dccd48432a2bda7e57fb45a560c8" kindref="member">PairStringLengthCompare</ref>);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>out.resize(0);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>startindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(startindex<sp/>&lt;<sp/>in.size())<sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nextindex=std::string::npos;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>&gt;::const_iterator<sp/>itbestp;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREACHC(itp,pairs)<sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>in.find(itp-&gt;first,startindex);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((nextindex<sp/>==<sp/>std::string::npos)||<sp/>((index<sp/>!=<sp/>std::string::npos)&amp;&amp;(index<sp/>&lt;<sp/>nextindex))<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextindex<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itbestp<sp/>=<sp/>itp;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>nextindex<sp/>==<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>in.substr(startindex);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>in.substr(startindex,nextindex-startindex);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>itbestp-&gt;second;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startindex<sp/>=<sp/>nextindex+itbestp-&gt;first.size();</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254" refid="namespaceOpenRAVE_1_1LocalXML" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">LocalXML<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256" refid="namespaceOpenRAVE_1_1LocalXML_1afe895c0fdff78b5cde3e7c8a820955c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1afe895c0fdff78b5cde3e7c8a820955c1" kindref="member">RaveXMLErrorFunc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/>...)</highlight></codeline>
<codeline lineno="2257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>msg);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a4299f3db31dd3149dc36eeffbb6a65db" kindref="member">RAVELOG_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;XML<sp/>Parse<sp/>error:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>vprintf(msg,args);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266" refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref></highlight></codeline>
<codeline lineno="2267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2268" refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a1edffa39d2413647340c8fcbbc6d767e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a1edffa39d2413647340c8fcbbc6d767e" kindref="member">XMLREADERDATA</ref>(<ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref><sp/>preader,<sp/>xmlParserCtxtPtr<sp/>ctxt)<sp/>:<sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a4f526a49d49cf3706a0575aabd21dd71" kindref="member">_preader</ref>(preader),<sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a228b749326371a299846b6e074976699" kindref="member">_ctxt</ref>(ctxt)<sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2270" refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a4f526a49d49cf3706a0575aabd21dd71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref><sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a4f526a49d49cf3706a0575aabd21dd71" kindref="member">_preader</ref>,<sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref>;</highlight></codeline>
<codeline lineno="2271" refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a228b749326371a299846b6e074976699" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlParserCtxtPtr<sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a228b749326371a299846b6e074976699" kindref="member">_ctxt</ref>;</highlight></codeline>
<codeline lineno="2272"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274" refid="namespaceOpenRAVE_1_1LocalXML_1af4b816d19ab1ab7a5d0c0479ba1d445c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1af4b816d19ab1ab7a5d0c0479ba1d445c" kindref="member">DefaultStartElementSAXFunc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>**atts)</highlight></codeline>
<codeline lineno="2275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref><sp/>listatts;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>atts<sp/>!=<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>(atts[i]<sp/>!=<sp/>NULL);<sp/>i+=2)<sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listatts.push_back(make_pair(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)atts[i]),</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)atts[i+1])));</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(listatts.back().first.begin(),<sp/>listatts.back().first.end(),<sp/>listatts.back().first.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref>*<sp/>pdata<sp/>=<sp/>(<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref>*)ctx;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)name;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(s.begin(),<sp/>s.end(),<sp/>s.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a5731d8d29ec32fe32d4901990066a95c" kindref="member">RAVELOG_VERBOSE</ref>(str(boost::format(</highlight><highlight class="stringliteral">&quot;unknown<sp/>field<sp/>%s\n&quot;</highlight><highlight class="normal">)%s));</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref>-&gt;startElement(s,listatts);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>((<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref>*)ctx)-&gt;_preader-&gt;startElement(s,<sp/>listatts)<sp/>!=<sp/><ref refid="classOpenRAVE_1_1BaseXMLReader_1a5f6b74d2490bcfd578227b002ec9c5d9a5123a3d32d744694919844d9675ede67" kindref="member" tooltip="current tag will be processed by this class">BaseXMLReader::PE_Support</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>handling,<sp/>so<sp/>create<sp/>a<sp/>temporary<sp/>class<sp/>to<sp/>handle<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1DummyXMLReader" kindref="compound" tooltip="reads until the tag ends">DummyXMLReader</ref>(s,</highlight><highlight class="stringliteral">&quot;(libxml)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299" refid="namespaceOpenRAVE_1_1LocalXML_1afb29139f4bf6b6820617f4ef86528e49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1afb29139f4bf6b6820617f4ef86528e49" kindref="member">DefaultEndElementSAXFunc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*name)</highlight></codeline>
<codeline lineno="2300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref>*<sp/>pdata<sp/>=<sp/>(<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref>*)ctx;</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)name;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(s.begin(),<sp/>s.end(),<sp/>s.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref>-&gt;endElement(s)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref>.reset();</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a4f526a49d49cf3706a0575aabd21dd71" kindref="member">_preader</ref>-&gt;endElement(s)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//RAVEPRINT(L&quot;%s<sp/>size<sp/>read<sp/>%d\n&quot;,<sp/>name,<sp/>data-&gt;_ctxt-&gt;input-&gt;consumed);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlStopParser(pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a228b749326371a299846b6e074976699" kindref="member">_ctxt</ref>);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317" refid="namespaceOpenRAVE_1_1LocalXML_1aa81c170a6cccaae40b42ef8e0c3b323f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1aa81c170a6cccaae40b42ef8e0c3b323f" kindref="member">DefaultCharactersSAXFunc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*ch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref>*<sp/>pdata<sp/>=<sp/>(<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref>*)ctx;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!!pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1abb6520f28dc1b9bbf6bc027ddd6de337" kindref="member">_pdummy</ref>-&gt;characters(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ch,<sp/>len));</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdata-&gt;<ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA_1a4f526a49d49cf3706a0575aabd21dd71" kindref="member">_preader</ref>-&gt;characters(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ch,<sp/>len));</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328" refid="namespaceOpenRAVE_1_1LocalXML_1a26dcac9b9415c2195046e2b91a7654b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1a26dcac9b9415c2195046e2b91a7654b0" kindref="member">xmlDetectSAX2</ref>(xmlParserCtxtPtr<sp/>ctxt)</highlight></codeline>
<codeline lineno="2329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctxt<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LIBXML_SAX1_ENABLED</highlight></codeline>
<codeline lineno="2334"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ctxt-&gt;sax)<sp/>&amp;&amp;<sp/><sp/>(ctxt-&gt;sax-&gt;initialized<sp/>==<sp/>XML_SAX2_MAGIC)<sp/>&amp;&amp;<sp/>((ctxt-&gt;sax-&gt;startElementNs<sp/>!=<sp/>NULL)<sp/>||<sp/>(ctxt-&gt;sax-&gt;endElementNs<sp/>!=<sp/>NULL)))<sp/>{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctxt-&gt;sax2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2338"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ctxt-&gt;sax2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2340"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>ctxt-&gt;str_xml<sp/>=<sp/>xmlDictLookup(ctxt-&gt;dict,<sp/>BAD_CAST<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>ctxt-&gt;str_xmlns<sp/>=<sp/>xmlDictLookup(ctxt-&gt;dict,<sp/>BAD_CAST<sp/></highlight><highlight class="stringliteral">&quot;xmlns&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>ctxt-&gt;str_xml_ns<sp/>=<sp/>xmlDictLookup(ctxt-&gt;dict,<sp/>XML_XML_NAMESPACE,<sp/>36);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ctxt-&gt;str_xml==NULL)<sp/>||<sp/>(ctxt-&gt;str_xmlns==NULL)<sp/>||<sp/>(ctxt-&gt;str_xml_ns<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350" refid="namespaceOpenRAVE_1_1LocalXML_1a509c2492a6af93fb83c0e25ba24867f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1a509c2492a6af93fb83c0e25ba24867f8" kindref="member">ParseXMLData</ref>(<ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref><sp/>preader,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="2351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>xmlSAXHandler<sp/>s_DefaultSAXHandler<sp/>=<sp/>{<sp/>0};</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>size<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>strlen(buffer);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!s_DefaultSAXHandler.initialized<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>time,<sp/>so<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_DefaultSAXHandler.startElement<sp/>=<sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1af4b816d19ab1ab7a5d0c0479ba1d445c" kindref="member">DefaultStartElementSAXFunc</ref>;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_DefaultSAXHandler.endElement<sp/>=<sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1afb29139f4bf6b6820617f4ef86528e49" kindref="member">DefaultEndElementSAXFunc</ref>;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_DefaultSAXHandler.characters<sp/>=<sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1aa81c170a6cccaae40b42ef8e0c3b323f" kindref="member">DefaultCharactersSAXFunc</ref>;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_DefaultSAXHandler.error<sp/>=<sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1afe895c0fdff78b5cde3e7c8a820955c1" kindref="member">RaveXMLErrorFunc</ref>;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_DefaultSAXHandler.initialized<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlSAXHandlerPtr<sp/>sax<sp/>=<sp/>&amp;s_DefaultSAXHandler;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlParserCtxtPtr<sp/>ctxt;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>ctxt<sp/>=<sp/>xmlCreateMemoryParserCtxt(buffer,<sp/>size);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctxt<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctxt-&gt;sax<sp/>!=<sp/>(xmlSAXHandlerPtr)<sp/>&amp;xmlDefaultSAXHandler)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlFree(ctxt-&gt;sax);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/>ctxt-&gt;sax<sp/>=<sp/>sax;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1_1LocalXML_1a26dcac9b9415c2195046e2b91a7654b0" kindref="member">xmlDetectSAX2</ref>(ctxt);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structOpenRAVE_1_1LocalXML_1_1XMLREADERDATA" kindref="compound">XMLREADERDATA</ref><sp/>reader(preader,<sp/>ctxt);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/>ctxt-&gt;userData<sp/>=<sp/>&amp;reader;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlParseDocument(ctxt);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctxt-&gt;wellFormed)<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctxt-&gt;errNo<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>ctxt-&gt;errNo;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sax<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctxt-&gt;sax<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctxt-&gt;myDoc<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlFreeDoc(ctxt-&gt;myDoc);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctxt-&gt;myDoc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>xmlFreeParserCtxt(ctxt);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret==0;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>OpenRAVE</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp"/>
  </compounddef>
</doxygen>
