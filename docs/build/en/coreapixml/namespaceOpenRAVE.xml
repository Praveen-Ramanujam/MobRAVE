<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="namespaceOpenRAVE" kind="namespace">
    <compoundname>OpenRAVE</compoundname>
    <innerclass refid="classOpenRAVE_1_1CollisionReport" prot="public">OpenRAVE::CollisionReport</innerclass>
    <innerclass refid="classOpenRAVE_1_1CollisionCheckerBase" prot="public">OpenRAVE::CollisionCheckerBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1CollisionOptionsStateSaver" prot="public">OpenRAVE::CollisionOptionsStateSaver</innerclass>
    <innerclass refid="classOpenRAVE_1_1ControllerBase" prot="public">OpenRAVE::ControllerBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1MultiController" prot="public">OpenRAVE::MultiController</innerclass>
    <innerclass refid="classOpenRAVE_1_1EnvironmentBase" prot="public">OpenRAVE::EnvironmentBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1IkSolverBase" prot="public">OpenRAVE::IkSolverBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1InterfaceBase" prot="public">OpenRAVE::InterfaceBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1KinBody" prot="public">OpenRAVE::KinBody</innerclass>
    <innerclass refid="classOpenRAVE_1_1ModuleBase" prot="public">OpenRAVE::ModuleBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1openrave__exception" prot="public">OpenRAVE::openrave_exception</innerclass>
    <innerclass refid="classOpenRAVE_1_1CaseInsensitiveCompare" prot="public">OpenRAVE::CaseInsensitiveCompare</innerclass>
    <innerclass refid="classOpenRAVE_1_1UserData" prot="public">OpenRAVE::UserData</innerclass>
    <innerclass refid="classOpenRAVE_1_1XMLReadable" prot="public">OpenRAVE::XMLReadable</innerclass>
    <innerclass refid="classOpenRAVE_1_1BaseXMLReader" prot="public">OpenRAVE::BaseXMLReader</innerclass>
    <innerclass refid="classOpenRAVE_1_1DummyXMLReader" prot="public">OpenRAVE::DummyXMLReader</innerclass>
    <innerclass refid="classOpenRAVE_1_1ConfigurationSpecification" prot="public">OpenRAVE::ConfigurationSpecification</innerclass>
    <innerclass refid="classOpenRAVE_1_1IkParameterization" prot="public">OpenRAVE::IkParameterization</innerclass>
    <innerclass refid="classOpenRAVE_1_1PhysicsEngineBase" prot="public">OpenRAVE::PhysicsEngineBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1PlannerBase" prot="public">OpenRAVE::PlannerBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1PLUGININFO" prot="public">OpenRAVE::PLUGININFO</innerclass>
    <innerclass refid="classOpenRAVE_1_1RobotBase" prot="public">OpenRAVE::RobotBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1SensorBase" prot="public">OpenRAVE::SensorBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1SensorSystemBase" prot="public">OpenRAVE::SensorSystemBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1SimpleSensorSystem" prot="public">OpenRAVE::SimpleSensorSystem</innerclass>
    <innerclass refid="classOpenRAVE_1_1SpaceSamplerBase" prot="public">OpenRAVE::SpaceSamplerBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1TrajectoryBase" prot="public">OpenRAVE::TrajectoryBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1GraphHandle" prot="public">OpenRAVE::GraphHandle</innerclass>
    <innerclass refid="classOpenRAVE_1_1ViewerBase" prot="public">OpenRAVE::ViewerBase</innerclass>
    <innerclass refid="classOpenRAVE_1_1RaveGlobal" prot="public">OpenRAVE::RaveGlobal</innerclass>
    <innernamespace refid="namespaceOpenRAVE_1_1geometry">OpenRAVE::geometry</innernamespace>
    <innernamespace refid="namespaceOpenRAVE_1_1LocalXML">OpenRAVE::LocalXML</innernamespace>
    <innernamespace refid="namespaceOpenRAVE_1_1mathextra">OpenRAVE::mathextra</innernamespace>
    <innernamespace refid="namespaceOpenRAVE_1_1planningutils">OpenRAVE::planningutils</innernamespace>
      <sectiondef kind="user-defined">
      <description><para><anchor id="_1amgrpd41d8cd98f00b204e9800998ecf8427e"/> </para></description>
      <memberdef kind="function" id="group__affine__math_1ga6adcc9e6c97a5451a24e9d2a007bc14e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveExp</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveExp</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>exponential </para>        </briefdescription>
        <detaileddescription>
<para>Wrappers of common basic math functions, allows <ref refid="namespaceOpenRAVE" kindref="compound">OpenRAVE</ref> to control the precision requirements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="109" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga83499e2abeec72291e96f7afc38120a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveLog</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveLog</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>logarithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="111" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga7a5b5d031430f5e42038c4043a18d2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveCos</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveCos</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>cosine </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="113" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1gae4909179343022636db56f4e4b664415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveSin</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveSin</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>sine </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="115" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga551bddbd42a69da9c05b4d3e659cec9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveTan</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveTan</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>tangent </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="117" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1gae4b2138f29ce2883e27096d0e061e37d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveLog2</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveLog2</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>base 2 logarithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="119" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga1aa2efa7951a2a6a7c4f057081cc13a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveLog10</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveLog10</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>base 10 logarithm </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="121" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="272" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga2ffd106aea1fe479ed88e7503a8c44f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveAcos</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveAcos</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>arccosine </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="123" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga756e28fdb4f459b0fbad627c6dfdae0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveAsin</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveAsin</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>arcsine </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="125" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga6221cab32e5309e3c0371b4f5cbb3a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveAtan2</definition>
        <argsstring>(dReal fy, dReal fx)</argsstring>
        <name>RaveAtan2</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>fx</declname>
        </param>
        <briefdescription>
<para>arctangent2 covering entire circle </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="127" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="281" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga13111a44a6a62bbb80f65566718457ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RavePow</definition>
        <argsstring>(dReal fx, dReal fy)</argsstring>
        <name>RavePow</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>fy</declname>
        </param>
        <briefdescription>
<para>power x^y </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="129" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1gafa1579e29c1d08021a480474661ea385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveSqrt</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveSqrt</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>square-root </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="131" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="287" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__affine__math_1ga500226250a97dadb70d64615b4526388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>dReal RaveFabs</definition>
        <argsstring>(dReal f)</argsstring>
        <name>RaveFabs</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>absolute value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="133" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="290" bodyend="292"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Global Functionality - Interface Creation, Plugin Management, Logging</header>
      <description><para><anchor id="_1amgrpa44636317fec477debce11f23bc74d59"/> <anchor id="namespaceOpenRAVE_1global_functionality"/> </para></description>
      <memberdef kind="function" id="namespaceOpenRAVE_1a58037fbef85e1f0c8695edd7e2537172" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* OpenRAVE::RaveGetInterfaceHash</definition>
        <argsstring>(InterfaceType type)</argsstring>
        <name>RaveGetInterfaceHash</name>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns the a 16 character null-terminated string specifying a hash of the interfaces used for checking changes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1582" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1581" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a5f46fb9ff755f614ea5636851a89952c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>boost::shared_ptr&lt; T &gt;</type>
        <definition>boost::shared_ptr&lt;T&gt; OpenRAVE::RaveInterfaceCast</definition>
        <argsstring>(InterfaceBasePtr pinterface)</argsstring>
        <name>RaveInterfaceCast</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <briefdescription>
<para>Safely casts from the base interface class to an openrave interface using static_pointer_cast. </para>        </briefdescription>
        <detaileddescription>
<para>The reason why dynamic_pointer_cast cannot be used is because interfaces might be created by different plugins, and the runtime type information will be different. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1608" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1607" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1adf731ae412bd36fe76b35c4e2e4f6478" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>boost::shared_ptr&lt; T const  &gt;</type>
        <definition>boost::shared_ptr&lt;T const&gt; OpenRAVE::RaveInterfaceConstCast</definition>
        <argsstring>(InterfaceBaseConstPtr pinterface)</argsstring>
        <name>RaveInterfaceConstCast</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a98930a0f0fa346643e6694577adac990" kindref="member">InterfaceBaseConstPtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <briefdescription>
<para>Safely casts from the base interface class to an openrave interface using static_pointer_cast. </para>        </briefdescription>
        <detaileddescription>
<para>The reason why dynamic_pointer_cast cannot be used is because interfaces might be created by different plugins, and the runtime type information will be different. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1626" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1625" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1acdcdc83c8812c47516259f9e89a3bd1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API const std::map&lt; InterfaceType, std::string &gt; &amp;</type>
        <definition>const std::map&lt; InterfaceType, std::string &gt; &amp; RaveGetInterfaceNamesMap</definition>
        <argsstring>()</argsstring>
        <name>RaveGetInterfaceNamesMap</name>
        <briefdescription>
<para>returns a lower case string of the interface type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1640" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="629" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a057d105393f37c597a34f0875ab247c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API const std::string &amp;</type>
        <definition>const std::string &amp; RaveGetInterfaceName</definition>
        <argsstring>(InterfaceType type)</argsstring>
        <name>RaveGetInterfaceName</name>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1641" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="639" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1adc91f5fc0031c945fcfe34baaa9b610e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API const std::map&lt; <ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2e" kindref="member">IkParameterizationType</ref>, std::string &gt; &amp;</type>
        <definition>const std::map&lt; IkParameterizationType, std::string &gt; &amp; RaveGetIkParameterizationMap</definition>
        <argsstring>()</argsstring>
        <name>RaveGetIkParameterizationMap</name>
        <briefdescription>
<para>returns a string of the ik parameterization type names (can include upper case in order to match <ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2e" kindref="member">IkParameterizationType</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1644" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="634" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a87ddf8748858681ffdbe520817899d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::string</type>
        <definition>std::string RaveGetHomeDirectory</definition>
        <argsstring>()</argsstring>
        <name>RaveGetHomeDirectory</name>
        <briefdescription>
<para>Returns the openrave home directory where settings, cache, and other files are stored. </para>        </briefdescription>
        <detaileddescription>
<para>On Linux/Unix systems, this is usually $HOME/.openrave, on Windows this is $HOMEPATH/.openrave </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1649" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="644" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a9405a328fe09cb60cccec64acd8d5b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::string</type>
        <definition>std::string RaveFindDatabaseFile</definition>
        <argsstring>(const std::string &amp;filename, bool bRead=true)</argsstring>
        <name>RaveFindDatabaseFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bRead</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Searches for a filename in the database and returns a full path/URL to it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the relative filename in the database </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bRead</parametername>
</parameternamelist>
<parameterdescription>
<para>if true will only return a file if it exists. If false, will return the filename of the first valid database directory. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a non-empty string if a file could be found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1656" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ab89ccf2331c4ee81662f687cedaa1781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API int</type>
        <definition>int RaveInitialize</definition>
        <argsstring>(bool bLoadAllPlugins=true, int level=Level_Info)</argsstring>
        <name>RaveInitialize</name>
        <param>
          <type>bool</type>
          <declname>bLoadAllPlugins</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
          <defval>Level_Info</defval>
        </param>
        <briefdescription>
<para>Explicitly initializes the global <ref refid="namespaceOpenRAVE" kindref="compound">OpenRAVE</ref> state (optional). </para>        </briefdescription>
        <detaileddescription>
<para>Optional function to initialize openrave plugins and logging. Although environment creation will automatically make sure this function is called, users might want explicit control of when this happens. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bLoadAllPlugins</parametername>
</parameternamelist>
<parameterdescription>
<para>If true will load all the openrave plugins automatically that can be found in the OPENRAVE_PLUGINS environment path </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, otherwise an error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1665" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="654" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a4cad8fb5664f22d9c877fc520ec20abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveInitializeFromState</definition>
        <argsstring>(UserDataPtr globalstate)</argsstring>
        <name>RaveInitializeFromState</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
          <declname>globalstate</declname>
        </param>
        <briefdescription>
<para>Initializes the global state from an already loaded <ref refid="namespaceOpenRAVE" kindref="compound">OpenRAVE</ref> environment. </para>        </briefdescription>
        <detaileddescription>
<para>Because of shared object boundaries, it is necessary to pass the global state pointer around. If using <ref refid="plugin_8h" kindref="compound">plugin.h</ref>, this function is automatically called by <ref refid="group__plugin__exports_1ga468c900067e08689383b3f8da642141f" kindref="member">CreateInterfaceValidated</ref>. It is also called by and every <ref refid="classOpenRAVE_1_1InterfaceBase" kindref="compound">InterfaceBase</ref> constructor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">globalstate</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1673" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="659" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a7e84c803da09036af3295e448bd0b17e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
        <definition>UserDataPtr RaveGlobalState</definition>
        <argsstring>()</argsstring>
        <name>RaveGlobalState</name>
        <briefdescription>
<para>A pointer to the global openrave state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a managed pointer to the state. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1677" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="664" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a0f405b1e7e95e6386c892fb4ad54d9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveDestroy</definition>
        <argsstring>()</argsstring>
        <name>RaveDestroy</name>
        <briefdescription>
<para>Destroys the entire <ref refid="namespaceOpenRAVE" kindref="compound">OpenRAVE</ref> state and all loaded environments. </para>        </briefdescription>
        <detaileddescription>
<para>This functions should be always called before program shutdown in order to assure all resources are relased appropriately. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1683" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="674" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aad059c41a95449e019f153dc827658e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveGetPluginInfo</definition>
        <argsstring>(std::list&lt; std::pair&lt; std::string, PLUGININFO &gt; &gt; &amp;plugins)</argsstring>
        <name>RaveGetPluginInfo</name>
        <param>
          <type>std::list&lt; std::pair&lt; std::string, <ref refid="classOpenRAVE_1_1PLUGININFO" kindref="compound">PLUGININFO</ref> &gt; &gt; &amp;</type>
          <declname>plugins</declname>
        </param>
        <briefdescription>
<para>Get all the loaded plugins and the interfaces they support. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plugins</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of plugins. Each entry has the plugin name and the interfaces it supports </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1688" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="694" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a27b3193df26a41f8373e44b2a8bf5521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveGetLoadedInterfaces</definition>
        <argsstring>(std::map&lt; InterfaceType, std::vector&lt; std::string &gt; &gt; &amp;interfacenames)</argsstring>
        <name>RaveGetLoadedInterfaces</name>
        <param>
          <type>std::map&lt; InterfaceType, std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>interfacenames</declname>
        </param>
        <briefdescription>
<para>Get a list of all the loaded interfaces. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1691" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="699" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a26aae0eb8f16b559ffcbbacbb221d069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveReloadPlugins</definition>
        <argsstring>()</argsstring>
        <name>RaveReloadPlugins</name>
        <briefdescription>
<para>Reloads all the plugins. </para>        </briefdescription>
        <detaileddescription>
<para>The interfaces currently created remain will continue using the old plugins, so this function is safe in that plugins currently loaded remain loaded until the last interface that uses them is released. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1696" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="704" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a0bdb20966417e80729f69b3d878c17b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API bool</type>
        <definition>bool RaveLoadPlugin</definition>
        <argsstring>(const std::string &amp;libraryname)</argsstring>
        <name>RaveLoadPlugin</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>libraryname</declname>
        </param>
        <briefdescription>
<para>Load a plugin and its interfaces. </para>        </briefdescription>
        <detaileddescription>
<para>If the plugin is already loaded, will reload it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename of the plugin to load </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1702" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="709" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a5a875a2efe2e581f83c7f00c0237488e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API bool</type>
        <definition>bool RaveHasInterface</definition>
        <argsstring>(InterfaceType type, const std::string &amp;interfacename)</argsstring>
        <name>RaveHasInterface</name>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>interfacename</declname>
        </param>
        <briefdescription>
<para>Returns true if interface can be created, otherwise false. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1705" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="714" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aec221546fbd969d5c0005a223d4e6f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
        <definition>InterfaceBasePtr RaveCreateInterface</definition>
        <argsstring>(EnvironmentBasePtr penv, InterfaceType type, const std::string &amp;interfacename)</argsstring>
        <name>RaveCreateInterface</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>interfacename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1707" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="719" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a25751cf7b2fdb7f345101c5023224e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
        <definition>RobotBasePtr RaveCreateRobot</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>RaveCreateRobot</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1708" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a917047ebc086703b4eaf0bffd6ac9527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1ab39121477d2dd841859e79f112b52a0b" kindref="member">PlannerBasePtr</ref></type>
        <definition>PlannerBasePtr RaveCreatePlanner</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreatePlanner</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1709" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1adaf28a3cc60e1de1993d002c62067df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1adeaf3fbb73ee82de32efcd886d780f0b" kindref="member">SensorSystemBasePtr</ref></type>
        <definition>SensorSystemBasePtr RaveCreateSensorSystem</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateSensorSystem</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1710" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="734" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a1df06dca7777efdfbd9e75b9ee568cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a93f3c54acfadfefe33b745f7df0c81cf" kindref="member">ControllerBasePtr</ref></type>
        <definition>ControllerBasePtr RaveCreateController</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateController</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1711" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="739" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a85a2344a8c87ccc8573c58c05f17616e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref></type>
        <definition>ModuleBasePtr RaveCreateModule</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateModule</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1712" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="744" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a211849aac354463d4a3617a20f13caea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref></type>
        <definition>ModuleBasePtr RaveCreateProblem</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateProblem</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1713" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="749" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a09d6138c724a27138cae1c19971ae205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref></type>
        <definition>ModuleBasePtr RaveCreateProblemInstance</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateProblemInstance</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1714" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="754" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aa2aeb37827349f5b7bf6d7d6a804cbd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1adc64503b74e38e98eedcbc031b3e37ff" kindref="member">IkSolverBasePtr</ref></type>
        <definition>IkSolverBasePtr RaveCreateIkSolver</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateIkSolver</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1715" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="759" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ab08a89586f8780b19a4da7cc142cbcf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a1f7cd9b111d097614987d789deaf960e" kindref="member">PhysicsEngineBasePtr</ref></type>
        <definition>PhysicsEngineBasePtr RaveCreatePhysicsEngine</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreatePhysicsEngine</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1716" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="764" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a198ddcd597357362c40e9353c5a70f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1adb9a2496735bc0d80ced5a5d7dfb653b" kindref="member">SensorBasePtr</ref></type>
        <definition>SensorBasePtr RaveCreateSensor</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateSensor</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1717" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="769" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1adad7199c542d5330699204473c9eadcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1ae3e7611a64b7d4204203d69014f45fe8" kindref="member">CollisionCheckerBasePtr</ref></type>
        <definition>CollisionCheckerBasePtr RaveCreateCollisionChecker</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateCollisionChecker</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1718" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="774" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a75b6125ec62afca70c38afe81f572db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1af0d19499c5ac95f5e1ac60b29187d7c4" kindref="member">ViewerBasePtr</ref></type>
        <definition>ViewerBasePtr RaveCreateViewer</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateViewer</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1719" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="779" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ac30d0d73a3d6b5e06ee740fb978eeeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1ad7176d63b178b8eab68b6947d4d850bb" kindref="member">SpaceSamplerBasePtr</ref></type>
        <definition>SpaceSamplerBasePtr RaveCreateSpaceSampler</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name)</argsstring>
        <name>RaveCreateSpaceSampler</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1720" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="799" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1af670bfd0341386b625f2290d8484c9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>KinBodyPtr RaveCreateKinBody</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>RaveCreateKinBody</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1721" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="784" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aa987900651248eee02dc1ce6647dc543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" kindref="member">TrajectoryBasePtr</ref></type>
        <definition>TrajectoryBasePtr RaveCreateTrajectory</definition>
        <argsstring>(EnvironmentBasePtr penv, const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>RaveCreateTrajectory</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Return an empty trajectory instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1723" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="789" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a50aeb06ab0f51d83c99d8938b01b747d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" kindref="member">TrajectoryBasePtr</ref></type>
        <definition>TrajectoryBasePtr RaveCreateTrajectory</definition>
        <argsstring>(EnvironmentBasePtr penv, int dof) RAVE_DEPRECATED</argsstring>
        <name>RaveCreateTrajectory</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dof</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1725" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="794" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a331d3070544589695a6a05e7da0f419f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
        <definition>UserDataPtr RaveRegisterInterface</definition>
        <argsstring>(InterfaceType type, const std::string &amp;name, const char *interfacehash, const char *envhash, const boost::function&lt; InterfaceBasePtr(EnvironmentBasePtr, std::istream &amp;)&gt; &amp;createfn)</argsstring>
        <name>RaveRegisterInterface</name>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>interfacehash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>envhash</declname>
        </param>
        <param>
          <type>const boost::function&lt; <ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref>(<ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref>, std::istream &amp;)&gt; &amp;</type>
          <declname>createfn</declname>
        </param>
        <briefdescription>
<para>Registers a function to create an interface, this allows the interface to be created by other modules. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>interface type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>interface name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interfacehash</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash of the interface being created (use the global defines OPENRAVE_X_HASH) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>envhash</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash of the environment (use the global define OPENRAVE_ENVIRONMENT_HASH) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>createfn</parametername>
</parameternamelist>
<parameterdescription>
<para>functions to create the interface it takes two parameters: the environment and an istream to the rest of the interface creation arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a handle if function is successfully registered. By destroying the handle, the interface will be automatically unregistered. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Will throw with ORE_InvalidInterfaceHash if hashes do not match </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1737" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="804" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a9ad0884135aded97f58a39cd75e80bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
        <definition>UserDataPtr RaveRegisterXMLReader</definition>
        <argsstring>(InterfaceType type, const std::string &amp;xmltag, const CreateXMLReaderFn &amp;fn)</argsstring>
        <name>RaveRegisterXMLReader</name>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>xmltag</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1adec9e4596e96321e8bf28523753f5d2c" kindref="member">CreateXMLReaderFn</ref> &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Registers a custom xml reader for a particular interface. </para>        </briefdescription>
        <detaileddescription>
<para>Once registered, anytime an interface is created through XML and the xmltag is seen, the function CreateXMLReaderFn will be called to get a reader for that tag <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmltag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag specified in xmltag is seen in the interface, the the custom reader will be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>CreateXMLReaderFn(pinterface,atts) - passed in the pointer to the interface where the tag was seen along with the list of attributes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer holding the registration, releasing the pointer will unregister the XML reader </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1747" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="809" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1af1fc16c7ab4d623ae6c95ab6575b0cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API int</type>
        <definition>int RaveGetEnvironmentId</definition>
        <argsstring>(EnvironmentBasePtr penv)</argsstring>
        <name>RaveGetEnvironmentId</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <briefdescription>
<para>return the environment&apos;s unique id, returns 0 if environment could not be found or not registered </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1750" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="679" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ac5ad28f8313d016b3ecde4c01737d652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
        <definition>EnvironmentBasePtr RaveGetEnvironment</definition>
        <argsstring>(int id)</argsstring>
        <name>RaveGetEnvironment</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>get the environment from its unique id </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the unique environment id returned by <ref refid="namespaceOpenRAVE_1af1fc16c7ab4d623ae6c95ab6575b0cca" kindref="member">RaveGetEnvironmentId</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1754" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="684" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ad85edb7064e01ebfc1bbef55e84df69d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveGetEnvironments</definition>
        <argsstring>(std::list&lt; EnvironmentBasePtr &gt; &amp;listenvironments)</argsstring>
        <name>RaveGetEnvironments</name>
        <param>
          <type>std::list&lt; <ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref> &gt; &amp;</type>
          <declname>listenvironments</declname>
        </param>
        <briefdescription>
<para>Return all the created <ref refid="namespaceOpenRAVE" kindref="compound">OpenRAVE</ref> environments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1757" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a5d55294a3a1b108acea6bbf1ebe1555a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref></type>
        <definition>BaseXMLReaderPtr RaveCallXMLReader</definition>
        <argsstring>(InterfaceType type, const std::string &amp;xmltag, InterfaceBasePtr pinterface, const AttributesList &amp;atts)</argsstring>
        <name>RaveCallXMLReader</name>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>xmltag</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
        </param>
        <briefdescription>
<para>Returns the current registered reader for the interface type/xmlid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Will throw with ORE_InvalidArguments if registered function could not be found. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1762" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="814" bodyend="817"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceOpenRAVE_1a6963e4ecb981351b8fb2e3f9e85acf77" prot="public" static="no">
        <name>CollisionOptions</name>
        <enumvalue id="namespaceOpenRAVE_1a6963e4ecb981351b8fb2e3f9e85acf77aa5d8d85bd05b340ada98305788f161d4" prot="public">
          <name>CO_Distance</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Compute distance measurements, this is usually slow and not all checkers support it. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a6963e4ecb981351b8fb2e3f9e85acf77add08e96e785c0ad01b5687ffc50a095d" prot="public">
          <name>CO_UseTolerance</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>not used </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a6963e4ecb981351b8fb2e3f9e85acf77a9bc2191e9e7b6bfc5fa1807812c45c6c" prot="public">
          <name>CO_Contacts</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Return the contact points of the collision in the <ref refid="classOpenRAVE_1_1CollisionReport" kindref="compound">CollisionReport</ref>. Note that this takes longer to compute. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a6963e4ecb981351b8fb2e3f9e85acf77a7572c8fd23c74ad1aa04e18eb36808b6" prot="public">
          <name>CO_RayAnyHit</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>When performing collision with rays, if this is set, algorithm just returns any hit instead of the closest (can be faster). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a6963e4ecb981351b8fb2e3f9e85acf77a95a75683a1fcadcd3de27e6465d74552" prot="public">
          <name>CO_ActiveDOFs</name>
          <initializer> 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Allows planners to greatly reduce redundant collision checks. If set and the target object is a robot, then only the links controlled by the currently set active DOFs and their attached bodies will be checked for collisions.</para><para>The things that **will not be** checked for collision are:<itemizedlist>
<listitem><para>links that do not remove with respect to each other as a result of moving the active dofs. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>options for collision checker </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="27" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="26" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1aec38ff628d76ac03cb4ac5d8f5cf3664" prot="public" static="no">
        <name>CollisionAction</name>
        <enumvalue id="namespaceOpenRAVE_1aec38ff628d76ac03cb4ac5d8f5cf3664a513d78b13cab5e6407e97b8210ae20ca" prot="public">
          <name>CA_DefaultAction</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>let the physics/collision engine resolve the action </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1aec38ff628d76ac03cb4ac5d8f5cf3664a0ff1e9bcfdd50e768f778a18183da252" prot="public">
          <name>CA_Ignore</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>do nothing </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>action to perform whenever a collision is detected between objects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="44" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a7a8cf38163621e225d83b4b3a8ff62e9" prot="public" static="no">
        <name>IkFilterReturn</name>
        <enumvalue id="namespaceOpenRAVE_1a7a8cf38163621e225d83b4b3a8ff62e9a7a0f5642b1a33ef86868e24bb1e2ea39" prot="public">
          <name>IKFR_Success</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>the ik solution is good </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a7a8cf38163621e225d83b4b3a8ff62e9ae0a9b98b94852a81354da20c4c388929" prot="public">
          <name>IKFR_Reject</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>reject the ik solution </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a7a8cf38163621e225d83b4b3a8ff62e9a818a27efa66560252c93cc569caae79e" prot="public">
          <name>IKFR_Quit</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>the ik solution is rejected and the ik call itself should quit with failure </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return value for the ik filter that can be optionally set on an ik solver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/iksolver.h" line="27" bodyfile="/home/pra3cob/openrave/include/openrave/iksolver.h" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a89401ff7c557d6d1ede96b550fb22bdc" prot="public" static="no">
        <name>IkFilterOptions</name>
        <enumvalue id="namespaceOpenRAVE_1a89401ff7c557d6d1ede96b550fb22bdca9e6c06d6ccbfbbe56de480a37cf0381b" prot="public">
          <name>IKFO_CheckEnvCollisions</name>
          <initializer>1</initializer>
          <briefdescription>
<para>will check environment collisions with the robot (not checked by default) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a89401ff7c557d6d1ede96b550fb22bdca1bc83e529a1beb8fc6c7cb59fa477166" prot="public">
          <name>IKFO_IgnoreSelfCollisions</name>
          <initializer>2</initializer>
          <briefdescription>
<para>will not check the self-collision of the robot (checked by default) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a89401ff7c557d6d1ede96b550fb22bdcad66d86a301f3ccd5d17bcc1197f9c321" prot="public">
          <name>IKFO_IgnoreJointLimits</name>
          <initializer>4</initializer>
          <briefdescription>
<para>will not check the joint limits of the robot (checked by default) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a89401ff7c557d6d1ede96b550fb22bdcaf98c0e29d2aee38b7af964e15a43ff3b" prot="public">
          <name>IKFO_IgnoreCustomFilters</name>
          <initializer>8</initializer>
          <briefdescription>
<para>will not use the custom filter, even if one is set </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a89401ff7c557d6d1ede96b550fb22bdcab6c6760e71911d36d392c861002e2a6c" prot="public">
          <name>IKFO_IgnoreEndEffectorCollisions</name>
          <initializer>16</initializer>
          <briefdescription>
<para>will not check collision with the environment and the end effector links and bodies attached to the end effector links. The end effector links are defined by <ref refid="classOpenRAVE_1_1RobotBase_1_1Manipulator_1a235e6b3b9b27422cdf11846a71f5ca66" kindref="member">RobotBase::Manipulator::GetChildLinks</ref>. Use this option when <ref refid="classOpenRAVE_1_1RobotBase_1_1Manipulator_1a409973001a95f36e715c2f227fd28c5a" kindref="member">RobotBase::Manipulator::CheckEndEffectorCollision</ref> has already been called, or it is ok for the end effector to collide given the IK constraints. Self-collisions between the moving links and end effector are still checked. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Controls what information gets validated when searching for an inverse kinematics solution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/iksolver.h" line="35" bodyfile="/home/pra3cob/openrave/include/openrave/iksolver.h" bodystart="34" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a93a1dd60e5da7bb4710cc7ca1e041d88" prot="public" static="no">
        <name>SerializationOptions</name>
        <enumvalue id="namespaceOpenRAVE_1a93a1dd60e5da7bb4710cc7ca1e041d88a4f89b08487512e4239c8c8936f7c2de4" prot="public">
          <name>SO_Kinematics</name>
          <initializer> 0x01</initializer>
          <briefdescription>
<para>kinematics information </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a93a1dd60e5da7bb4710cc7ca1e041d88afa503c3acf6b50e3c292bee576395ff0" prot="public">
          <name>SO_Dynamics</name>
          <initializer> 0x02</initializer>
          <briefdescription>
<para>dynamics information </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a93a1dd60e5da7bb4710cc7ca1e041d88a78580517a26880616f5b1c6fcfdb0945" prot="public">
          <name>SO_BodyState</name>
          <initializer> 0x04</initializer>
          <briefdescription>
<para>state of the body </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a93a1dd60e5da7bb4710cc7ca1e041d88a7517f05542512917f3fe40abff6adb10" prot="public">
          <name>SO_NamesAndFiles</name>
          <initializer> 0x08</initializer>
          <briefdescription>
<para>resource files and names </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a93a1dd60e5da7bb4710cc7ca1e041d88aeb7e387f766567c9ced7e93677fb30a3" prot="public">
          <name>SO_RobotManipulators</name>
          <initializer> 0x10</initializer>
          <briefdescription>
<para>serialize robot manipulators </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a93a1dd60e5da7bb4710cc7ca1e041d88ac7670ed300cd49644318eaf3580585df" prot="public">
          <name>SO_RobotSensors</name>
          <initializer> 0x20</initializer>
          <briefdescription>
<para>serialize robot sensors </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a93a1dd60e5da7bb4710cc7ca1e041d88ab81e3effdc7d19a9da6cb868a564abeb" prot="public">
          <name>SO_Geometry</name>
          <initializer> 0x40</initializer>
          <briefdescription>
<para>geometry information (for collision detection) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>serialization options for interfaces </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/interface.h" line="27" bodyfile="/home/pra3cob/openrave/include/openrave/interface.h" bodystart="26" bodyend="35"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262c" prot="public" static="no">
        <name>OpenRAVEErrorCode</name>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262caa22653a6ba4b451399c6e9f6aef60b10" prot="public">
          <name>ORE_Failed</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262ca481978390d144f4f222a971b4e09b713" prot="public">
          <name>ORE_InvalidArguments</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262cac10e4c55e82ea2bbb5b2028a4bf4e3cb" prot="public">
          <name>ORE_EnvironmentNotLocked</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262cad33c9bd2b6b21be295e2a983f19e6006" prot="public">
          <name>ORE_CommandNotSupported</name>
          <initializer>3</initializer>
          <briefdescription>
<para>string command could not be parsed or is not supported </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262cabc7cf06618f512f7c2172b855dba7e20" prot="public">
          <name>ORE_Assert</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262cab6eaf97936dda5f10b34d8106c929270" prot="public">
          <name>ORE_InvalidPlugin</name>
          <initializer>5</initializer>
          <briefdescription>
<para>shared object is not a valid plugin </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262caea76ef8a6aa70c082da2d9dfeaaa2ed5" prot="public">
          <name>ORE_InvalidInterfaceHash</name>
          <initializer>6</initializer>
          <briefdescription>
<para>interface hashes do not match between plugins </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262cac8a3a340f3efbef5161746764a523a35" prot="public">
          <name>ORE_NotImplemented</name>
          <initializer>7</initializer>
          <briefdescription>
<para>function is not implemented by the interface. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1adf2fa050995e80f643f8eddc14d7262caefba8dc1666cec415519f11ca1a6699b" prot="public">
          <name>ORE_InconsistentConstraints</name>
          <initializer>8</initializer>
          <briefdescription>
<para>return solutions or trajectories do not follow the constraints of the planner/module </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>OpenRAVE error codes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="138" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="138" bodyend="148"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395" prot="public" static="no">
        <name>DebugLevel</name>
        <enumvalue id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395a76d84619fc069ef2ea9f6b6e0fb0cfb4" prot="public">
          <name>Level_Fatal</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395a712e8173c9c8e165eeb876178ce4951c" prot="public">
          <name>Level_Error</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395abb9cff4a96888fe88bf6db78559dc858" prot="public">
          <name>Level_Warn</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395ad32083b6cd4e99dafeafe16581277430" prot="public">
          <name>Level_Info</name>
          <initializer>3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395abd3809f60dd27203b26d387b072b090f" prot="public">
          <name>Level_Debug</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395a8082ec82e7e8d74a4543410fc7b79c39" prot="public">
          <name>Level_Verbose</name>
          <initializer>5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395ac3819021a94149ef5002bd2e8628131d" prot="public">
          <name>Level_OutputMask</name>
          <initializer>0xf</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395a7ff14d37cfb2aeb879feb53b506cabde" prot="public">
          <name>Level_VerifyPlans</name>
          <initializer>0x80000000</initializer>
          <briefdescription>
<para>if set, should verify every plan returned. the verification is left up to the planners or the modules calling the planners. See planningutils::ValidateTrajectory </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="305" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="305" bodyend="314"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a16bea31a72c441a002538eac01a118f2" prot="public" static="no">
        <name>CloningOptions</name>
        <enumvalue id="namespaceOpenRAVE_1a16bea31a72c441a002538eac01a118f2a0c49bf8f6cc2b8f1731b1aa8326c5e63" prot="public">
          <name>Clone_Bodies</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>clone all the bodies/robots of the environment, exclude attached interfaces like sensors/controllers </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16bea31a72c441a002538eac01a118f2a63f15f42828f381ffc43e2c3a894e792" prot="public">
          <name>Clone_Viewer</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>clone the viewer type, although figures won&apos;t be copied, new viewer does try to match views </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16bea31a72c441a002538eac01a118f2a4f7d3c1c073424a486131d5516cbee6a" prot="public">
          <name>Clone_Simulation</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>clone the physics engine and simulation state (ie, timesteps, gravity) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16bea31a72c441a002538eac01a118f2a0f3adf019cab24fd7564e167aac6308b" prot="public">
          <name>Clone_RealControllers</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>if specified, will clone the real controllers of all the robots, otherwise each robot gets ideal controller </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16bea31a72c441a002538eac01a118f2add1ddf3837f8e9fe41aa04fbdf1f10b1" prot="public">
          <name>Clone_Sensors</name>
          <initializer> 16</initializer>
          <briefdescription>
<para>if specified, will clone the sensors attached to the robot and added to the environment </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="633" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="633" bodyend="639"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2e" prot="public" static="no">
        <name>IkParameterizationType</name>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea26d93743c6292ee325f9b2dc3fe17b7a" prot="public">
          <name>IKP_None</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea33b4f04338b6d55fe993b6bdd9f66956" prot="public">
          <name>IKP_Transform6D</name>
          <initializer>0x67000001</initializer>
          <briefdescription>
<para>end effector reaches desired 6D transformation </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea125270b64ed51a89e7021ec7e6d71669" prot="public">
          <name>IKP_Rotation3D</name>
          <initializer>0x34000002</initializer>
          <briefdescription>
<para>end effector reaches desired 3D rotation </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eae24724faf9388c7f2ae2c7cbbc9c5e94" prot="public">
          <name>IKP_Translation3D</name>
          <initializer>0x33000003</initializer>
          <briefdescription>
<para>end effector origin reaches desired 3D translation </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea31424bec585106a5464b4ebe4831acc9" prot="public">
          <name>IKP_Direction3D</name>
          <initializer>0x23000004</initializer>
          <briefdescription>
<para>direction on end effector coordinate system reaches desired direction </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea4971a1736a1ea39559c0c49601b17533" prot="public">
          <name>IKP_Ray4D</name>
          <initializer>0x46000005</initializer>
          <briefdescription>
<para>ray on end effector coordinate system reaches desired global ray </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea6c4188710cb0a7084725fefd4c80d642" prot="public">
          <name>IKP_Lookat3D</name>
          <initializer>0x23000006</initializer>
          <briefdescription>
<para>direction on end effector coordinate system points to desired 3D position </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea68c40080732ab8a017608e45a2f20d33" prot="public">
          <name>IKP_TranslationDirection5D</name>
          <initializer>0x56000007</initializer>
          <briefdescription>
<para>end effector origin and direction reaches desired 3D translation and direction. Can be thought of as Ray IK where the origin of the ray must coincide. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eadcf015cba2fad8597405a442c81e0612" prot="public">
          <name>IKP_TranslationXY2D</name>
          <initializer>0x22000008</initializer>
          <briefdescription>
<para>2D translation along XY plane </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eacb13532b686d552c5a513aa5296a9465" prot="public">
          <name>IKP_TranslationXYOrientation3D</name>
          <initializer>0x33000009</initializer>
          <briefdescription>
<para>2D translation along XY plane and 1D rotation around Z axis. The offset of the rotation is measured starting at +X, so at +X is it 0, at +Y it is pi/2. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea3acb8e5a6b84403f23286a338c46e5a7" prot="public">
          <name>IKP_TranslationLocalGlobal6D</name>
          <initializer>0x3600000a</initializer>
          <briefdescription>
<para>local point on end effector origin reaches desired 3D global point </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2eafc80ee4dec1e8de5665d49e6f4bb8d84" prot="public">
          <name>IKP_NumberOfParameterizations</name>
          <initializer>10</initializer>
          <briefdescription>
<para>number of parameterizations (does not count IKP_None) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The types of inverse kinematics parameterizations supported. </para>        </briefdescription>
        <detaileddescription>
<para>The minimum degree of freedoms required is set in the upper 4 bits of each type. The number of values used to represent the parameterization ( &gt;= dof ) is the next 4 bits. The lower bits contain a unique id of the type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="784" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="784" bodyend="797"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" prot="public" static="no">
        <name>DOFAffine</name>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98ad6c92a52af0fed351dd1660e0247feaa" prot="public">
          <name>DOF_NoTransform</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a631e4be716fa05920e2708264c946507" prot="public">
          <name>DOF_X</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>can move in the x direction </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a052eaa27c587eff647f89537d85414f2" prot="public">
          <name>DOF_Y</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>can move in the y direction </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98ab8457ea80d330d3a701781b6bc9a935b" prot="public">
          <name>DOF_Z</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>can move in the z direction </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98abf4ca11208a260b3c892db6f3aa87126" prot="public">
          <name>DOF_XYZ</name>
          <initializer>DOF_X|DOF_Y|DOF_Z</initializer>
          <briefdescription>
<para>moves in xyz direction </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" prot="public">
          <name>DOF_RotationAxis</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>can rotate around an axis (1 dof) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98aa05fc73c237a667dbc010b620704a58b" prot="public">
          <name>DOF_Rotation3D</name>
          <initializer> 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>can rotate freely (3 dof), the parameterization is theta * v, where v is the rotation axis and theta is the angle about that axis </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a0bb7484621acd6987a116bc2b6f34a59" prot="public">
          <name>DOF_RotationQuat</name>
          <initializer> 32</initializer>
          <briefdescription>
<para>can rotate freely (4 dof), parameterization is a quaternion. In order for limits to work correctly, the quaternion is in the space of _vRotationQuatLimitStart. _vRotationQuatLimitStart is always left-multiplied before setting the transform! </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a8d26ee42cff6b4d775040f3b8b7cda8d" prot="public">
          <name>DOF_RotationMask</name>
          <initializer>(DOF_RotationAxis|DOF_Rotation3D|DOF_RotationQuat)</initializer>
          <briefdescription>
<para>mask for all bits representing 3D rotations </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a7dc89bc3eae094319fe037d302928916" prot="public">
          <name>DOF_Transform</name>
          <initializer> (DOF_XYZ|DOF_RotationQuat)</initializer>
          <briefdescription>
<para>translate and rotate freely in 3D space </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects which DOFs of the affine transformation to include in the active configuration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1497" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1496" bodyend="1511"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a5ab12d9ae992912f730cfefda6c97042" prot="public" static="no">
        <name>PhysicsEngineOptions</name>
        <enumvalue id="namespaceOpenRAVE_1a5ab12d9ae992912f730cfefda6c97042ac6a259c2e3176f579d27d30003166e17" prot="public">
          <name>PEO_SelfCollisions</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>if set, physics engine will use contact forces from self-collisions </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>basic options for physics engine </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/physicsengine.h" line="27" bodyfile="/home/pra3cob/openrave/include/openrave/physicsengine.h" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a7cead738b92cbe2f332dea20dd2f200e" prot="public" static="no">
        <name>PlannerStatus</name>
        <enumvalue id="namespaceOpenRAVE_1a7cead738b92cbe2f332dea20dd2f200ea46d7da834c9c074260b53909874e4b38" prot="public">
          <name>PS_Failed</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>planner failed </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a7cead738b92cbe2f332dea20dd2f200ea23c3ecb52bc33b330da0f5a4441115e5" prot="public">
          <name>PS_HasSolution</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>planner succeeded </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a7cead738b92cbe2f332dea20dd2f200ea6130a9f38faec3533a7d0e5594d4ef10" prot="public">
          <name>PS_Interrupted</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>planning was interrupted, but can be resumed by calling PlanPath again </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a7cead738b92cbe2f332dea20dd2f200ea4364b6dbba2773dd9e8d2d954db9109a" prot="public">
          <name>PS_InterruptedWithSolution</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the status of the PlanPath method. Used when PlanPath can be called multiple times to resume planning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planner.h" line="27" bodyfile="/home/pra3cob/openrave/include/openrave/planner.h" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a16104fe58cdf1075c47eb709e58ba853" prot="public" static="no">
        <name>PlannerAction</name>
        <enumvalue id="namespaceOpenRAVE_1a16104fe58cdf1075c47eb709e58ba853a64ec1b874d3088ceef9bd5051c65889f" prot="public">
          <name>PA_None</name>
          <initializer>0</initializer>
          <briefdescription>
<para>no action </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16104fe58cdf1075c47eb709e58ba853a39d503ce662ac46ebdb9fc6e55ca7a5a" prot="public">
          <name>PA_Interrupt</name>
          <initializer>1</initializer>
          <briefdescription>
<para>interrupt the planner and return to user </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a16104fe58cdf1075c47eb709e58ba853adcf80ca3a0125b7e5de795d605ab7ffe" prot="public">
          <name>PA_ReturnWithAnySolution</name>
          <initializer>2</initializer>
          <briefdescription>
<para>return quickly with any path </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>action to send to the planner while it is planning. This is usually done by the user-specified planner callback function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planner.h" line="36" bodyfile="/home/pra3cob/openrave/include/openrave/planner.h" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937" prot="public" static="no">
        <name>IntervalType</name>
        <enumvalue id="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937a9c15a47d726e9fbfb50b4aed7cf35856" prot="public">
          <name>IT_Open</name>
          <initializer>0</initializer>
          <briefdescription>
<para>(a,b) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937a7928c735c3c6ce91beca595f8e76f08e" prot="public">
          <name>IT_OpenStart</name>
          <initializer>1</initializer>
          <briefdescription>
<para>(a,b] </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937aac880107c84b1475074c13cee32a6104" prot="public">
          <name>IT_OpenEnd</name>
          <initializer>2</initializer>
          <briefdescription>
<para>[a,b) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937a35f5589548b539707ceaf7c95a7e96e8" prot="public">
          <name>IT_Closed</name>
          <initializer>3</initializer>
          <briefdescription>
<para>[a,b] </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specifies the boundary conditions of intervals for sampling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/spacesampler.h" line="26" bodyfile="/home/pra3cob/openrave/include/openrave/spacesampler.h" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceOpenRAVE_1a58596e0cb321ccf00bbe8d13b7b8fb2c" prot="public" static="no">
        <name>SampleDataType</name>
        <enumvalue id="namespaceOpenRAVE_1a58596e0cb321ccf00bbe8d13b7b8fb2caae7ca48f4536a051c71a10a799066bd3" prot="public">
          <name>SDT_Real</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceOpenRAVE_1a58596e0cb321ccf00bbe8d13b7b8fb2ca635f7c92d9bc2ff5a9ad40385c95a1d5" prot="public">
          <name>SDT_Uint32</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/spacesampler.h" line="33" bodyfile="/home/pra3cob/openrave/include/openrave/spacesampler.h" bodystart="33" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceOpenRAVE_1af23fc4c2c72950a8c02f38ef71680bc6" prot="public" static="no">
        <type><ref refid="classOpenRAVE_1_1CollisionReport" kindref="compound">CollisionReport</ref> COLLISIONREPORT</type>
        <definition>typedef TrajectoryBase Trajectory RAVE_DEPRECATED</definition>
        <argsstring></argsstring>
        <name>RAVE_DEPRECATED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000027"><xreftitle>Deprecated</xreftitle><xrefdescription><para>(11/02/18) </para></xrefdescription></xrefsect></para><para><xrefsect id="deprecated_1_deprecated000054"><xreftitle>Deprecated</xreftitle><xrefdescription><para>(11/10/04) </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="88" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ab691b4b86694b0711ca726899d248488" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1MultiController" kindref="compound">MultiController</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;MultiController&gt; MultiControllerPtr</definition>
        <argsstring></argsstring>
        <name>MultiControllerPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/controller.h" line="188" bodyfile="/home/pra3cob/openrave/include/openrave/controller.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a64828af1938859dd708d67aed2c126f2" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1MultiController" kindref="compound">MultiController</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;MultiController const&gt; MultiControllerConstPtr</definition>
        <argsstring></argsstring>
        <name>MultiControllerConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/controller.h" line="189" bodyfile="/home/pra3cob/openrave/include/openrave/controller.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aad17188f9ff53a4373ef77ecad831ed1" prot="public" static="no">
        <type>boost::recursive_try_mutex</type>
        <definition>typedef boost::recursive_try_mutex EnvironmentMutex</definition>
        <argsstring></argsstring>
        <name>EnvironmentMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="25" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a706109092d88147a96bd94422219c4a0" prot="public" static="no">
        <type><ref refid="classOpenRAVE_1_1ModuleBase" kindref="compound">ModuleBase</ref></type>
        <definition>typedef ModuleBase ProblemInstance</definition>
        <argsstring></argsstring>
        <name>ProblemInstance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/module.h" line="65" bodyfile="/home/pra3cob/openrave/include/openrave/module.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aea9d0df40daa822e9ec442630e016f49" prot="public" static="no">
        <type><ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref></type>
        <definition>typedef ModuleBasePtr ProblemInstancePtr</definition>
        <argsstring></argsstring>
        <name>ProblemInstancePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/module.h" line="66" bodyfile="/home/pra3cob/openrave/include/openrave/module.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a9ab25456c66d18593eb7f9a86f9cbfd6" prot="public" static="no">
        <type><ref refid="namespaceOpenRAVE_1a52d0d965afb4dfd64bde3b1000f87639" kindref="member">ModuleBaseWeakPtr</ref></type>
        <definition>typedef ModuleBaseWeakPtr ProblemInstanceConstPtr</definition>
        <argsstring></argsstring>
        <name>ProblemInstanceConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/module.h" line="67" bodyfile="/home/pra3cob/openrave/include/openrave/module.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a636f5d73e21e60a1fb5086e97239eb69" prot="public" static="no">
        <type><ref refid="namespaceOpenRAVE_1a145232a03f99f436846fad110e79a5c6" kindref="member">ModuleBaseConstPtr</ref></type>
        <definition>typedef ModuleBaseConstPtr ProblemInstanceWeakPtr</definition>
        <argsstring></argsstring>
        <name>ProblemInstanceWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/module.h" line="68" bodyfile="/home/pra3cob/openrave/include/openrave/module.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" prot="public" static="no">
        <type>double</type>
        <definition>typedef double dReal</definition>
        <argsstring></argsstring>
        <name>dReal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="94" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1UserData" kindref="compound">UserData</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;UserData&gt; UserDataPtr</definition>
        <argsstring></argsstring>
        <name>UserDataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="225" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aae4d9d8b0adcdbb33c9ca59ea5794a3d" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1UserData" kindref="compound">UserData</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;UserData&gt; UserDataWeakPtr</definition>
        <argsstring></argsstring>
        <name>UserDataWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="226" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1CollisionReport" kindref="compound">CollisionReport</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;CollisionReport&gt; CollisionReportPtr</definition>
        <argsstring></argsstring>
        <name>CollisionReportPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="584" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a8f13e492c6fd91ae6c477002d46ac9d8" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1CollisionReport" kindref="compound">CollisionReport</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;CollisionReport const&gt; CollisionReportConstPtr</definition>
        <argsstring></argsstring>
        <name>CollisionReportConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="585" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1InterfaceBase" kindref="compound">InterfaceBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;InterfaceBase&gt; InterfaceBasePtr</definition>
        <argsstring></argsstring>
        <name>InterfaceBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="586" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a98930a0f0fa346643e6694577adac990" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1InterfaceBase" kindref="compound">InterfaceBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;InterfaceBase const&gt; InterfaceBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>InterfaceBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="587" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a3909f864d48d5f8d05807a73ca9f1a9b" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1InterfaceBase" kindref="compound">InterfaceBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;InterfaceBase&gt; InterfaceBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>InterfaceBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="588" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1KinBody" kindref="compound">KinBody</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;KinBody&gt; KinBodyPtr</definition>
        <argsstring></argsstring>
        <name>KinBodyPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="589" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1KinBody" kindref="compound">KinBody</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;KinBody const&gt; KinBodyConstPtr</definition>
        <argsstring></argsstring>
        <name>KinBodyConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="590" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1af9b7d1a6c8cb513416c8e667f3c25418" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1KinBody" kindref="compound">KinBody</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;KinBody&gt; KinBodyWeakPtr</definition>
        <argsstring></argsstring>
        <name>KinBodyWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="591" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1RobotBase" kindref="compound">RobotBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;RobotBase&gt; RobotBasePtr</definition>
        <argsstring></argsstring>
        <name>RobotBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="592" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ae14278c03739b5661d2542c17ca5db8e" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1RobotBase" kindref="compound">RobotBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;RobotBase const&gt; RobotBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>RobotBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="593" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1afca3cd803319e1caa2cfb0f763a601b8" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1RobotBase" kindref="compound">RobotBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;RobotBase&gt; RobotBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>RobotBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="594" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ae3e7611a64b7d4204203d69014f45fe8" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1CollisionCheckerBase" kindref="compound">CollisionCheckerBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;CollisionCheckerBase&gt; CollisionCheckerBasePtr</definition>
        <argsstring></argsstring>
        <name>CollisionCheckerBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="595" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a3926e37e3bbc1c29da84fe6cea27d1fc" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1CollisionCheckerBase" kindref="compound">CollisionCheckerBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;CollisionCheckerBase const&gt; CollisionCheckerBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>CollisionCheckerBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="596" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a0eb8f0ef4695bac98f7fedb026a50f85" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1CollisionCheckerBase" kindref="compound">CollisionCheckerBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;CollisionCheckerBase&gt; CollisionCheckerBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>CollisionCheckerBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="597" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a93f3c54acfadfefe33b745f7df0c81cf" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1ControllerBase" kindref="compound">ControllerBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ControllerBase&gt; ControllerBasePtr</definition>
        <argsstring></argsstring>
        <name>ControllerBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="598" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a35ebe4450fa91a9ea87fbf4d491bf9d0" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1ControllerBase" kindref="compound">ControllerBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ControllerBase const&gt; ControllerBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>ControllerBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="599" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a4ac9cacf04950bd0f0b75c16d11cf025" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1ControllerBase" kindref="compound">ControllerBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;ControllerBase&gt; ControllerBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>ControllerBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="600" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1adc64503b74e38e98eedcbc031b3e37ff" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1IkSolverBase" kindref="compound">IkSolverBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;IkSolverBase&gt; IkSolverBasePtr</definition>
        <argsstring></argsstring>
        <name>IkSolverBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="601" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1af393079e8e983a2de33101499192f6d0" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1IkSolverBase" kindref="compound">IkSolverBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;IkSolverBase const&gt; IkSolverBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>IkSolverBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="602" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a7033f1a621c733d67a3630abc8881c6b" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1IkSolverBase" kindref="compound">IkSolverBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;IkSolverBase&gt; IkSolverBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>IkSolverBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="603" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a1f7cd9b111d097614987d789deaf960e" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1PhysicsEngineBase" kindref="compound">PhysicsEngineBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;PhysicsEngineBase&gt; PhysicsEngineBasePtr</definition>
        <argsstring></argsstring>
        <name>PhysicsEngineBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="604" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ad9e2cedb63c4f4193956f3a3ebbc168c" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1PhysicsEngineBase" kindref="compound">PhysicsEngineBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;PhysicsEngineBase const&gt; PhysicsEngineBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>PhysicsEngineBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="605" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ab69df58989d6cb26fc6c54fa5dad1cc7" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1PhysicsEngineBase" kindref="compound">PhysicsEngineBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;PhysicsEngineBase&gt; PhysicsEngineBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>PhysicsEngineBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="606" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ab39121477d2dd841859e79f112b52a0b" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1PlannerBase" kindref="compound">PlannerBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;PlannerBase&gt; PlannerBasePtr</definition>
        <argsstring></argsstring>
        <name>PlannerBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="607" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a2974ad0e9218ea646e192f2317495834" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1PlannerBase" kindref="compound">PlannerBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;PlannerBase const&gt; PlannerBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>PlannerBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="608" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a3c09f9cf640fdcfbf8d82516f74b3f57" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1PlannerBase" kindref="compound">PlannerBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;PlannerBase&gt; PlannerBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>PlannerBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="609" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1ModuleBase" kindref="compound">ModuleBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ModuleBase&gt; ModuleBasePtr</definition>
        <argsstring></argsstring>
        <name>ModuleBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="610" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a145232a03f99f436846fad110e79a5c6" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1ModuleBase" kindref="compound">ModuleBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ModuleBase const&gt; ModuleBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>ModuleBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="611" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a52d0d965afb4dfd64bde3b1000f87639" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1ModuleBase" kindref="compound">ModuleBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;ModuleBase&gt; ModuleBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>ModuleBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="612" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1adb9a2496735bc0d80ced5a5d7dfb653b" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1SensorBase" kindref="compound">SensorBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;SensorBase&gt; SensorBasePtr</definition>
        <argsstring></argsstring>
        <name>SensorBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="613" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a836a63a7104eea0f8e405aa9e1b88808" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1SensorBase" kindref="compound">SensorBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;SensorBase const&gt; SensorBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>SensorBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="614" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1adf29f46857f132f13d3f889744dbd846" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1SensorBase" kindref="compound">SensorBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;SensorBase&gt; SensorBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>SensorBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="615" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1adeaf3fbb73ee82de32efcd886d780f0b" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1SensorSystemBase" kindref="compound">SensorSystemBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;SensorSystemBase&gt; SensorSystemBasePtr</definition>
        <argsstring></argsstring>
        <name>SensorSystemBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="616" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1af6f8f722992ed78a6be4a5e00f730cf5" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1SensorSystemBase" kindref="compound">SensorSystemBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;SensorSystemBase const&gt; SensorSystemBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>SensorSystemBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="617" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1afe93ae4b6851a3478f5995cfbfcb0446" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1SensorSystemBase" kindref="compound">SensorSystemBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;SensorSystemBase&gt; SensorSystemBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>SensorSystemBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="618" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1TrajectoryBase" kindref="compound">TrajectoryBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;TrajectoryBase&gt; TrajectoryBasePtr</definition>
        <argsstring></argsstring>
        <name>TrajectoryBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="619" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ae4a194e7d8dcb23b1acad4ff9f84ad49" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1TrajectoryBase" kindref="compound">TrajectoryBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;TrajectoryBase const&gt; TrajectoryBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>TrajectoryBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="620" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a6396266c4d794f3ed1b71b667a3ad6de" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1TrajectoryBase" kindref="compound">TrajectoryBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;TrajectoryBase&gt; TrajectoryBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>TrajectoryBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="621" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1af0d19499c5ac95f5e1ac60b29187d7c4" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1ViewerBase" kindref="compound">ViewerBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ViewerBase&gt; ViewerBasePtr</definition>
        <argsstring></argsstring>
        <name>ViewerBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="622" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aa8352f0d31944978b6a5cebf018b4596" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1ViewerBase" kindref="compound">ViewerBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ViewerBase const&gt; ViewerBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>ViewerBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="623" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a16fc46bc510187b6672c34e268b59d95" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1ViewerBase" kindref="compound">ViewerBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;ViewerBase&gt; ViewerBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>ViewerBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="624" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ad7176d63b178b8eab68b6947d4d850bb" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1SpaceSamplerBase" kindref="compound">SpaceSamplerBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;SpaceSamplerBase&gt; SpaceSamplerBasePtr</definition>
        <argsstring></argsstring>
        <name>SpaceSamplerBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="625" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a52fb7d41ff2ea19fd899045561030a47" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1SpaceSamplerBase" kindref="compound">SpaceSamplerBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;SpaceSamplerBase const&gt; SpaceSamplerBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>SpaceSamplerBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="626" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a4c48eb3d7768751964409e193109b968" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1SpaceSamplerBase" kindref="compound">SpaceSamplerBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;SpaceSamplerBase&gt; SpaceSamplerBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>SpaceSamplerBaseWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="627" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1EnvironmentBase" kindref="compound">EnvironmentBase</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;EnvironmentBase&gt; EnvironmentBasePtr</definition>
        <argsstring></argsstring>
        <name>EnvironmentBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="628" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aae90d424b7f3d69b2f382c5e30d1ae57" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1EnvironmentBase" kindref="compound">EnvironmentBase</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;EnvironmentBase const&gt; EnvironmentBaseConstPtr</definition>
        <argsstring></argsstring>
        <name>EnvironmentBaseConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="629" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a07792c5083a23c50672e928bd20a026f" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1EnvironmentBase" kindref="compound">EnvironmentBase</ref> &gt;</type>
        <definition>typedef boost::weak_ptr&lt;EnvironmentBase&gt; EnvironmentBaseWeakPtr</definition>
        <argsstring></argsstring>
        <name>EnvironmentBaseWeakPtr</name>
        <briefdescription>
<para>Cloning Options for interfaces and environments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="632" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a4518fd20d196b853bb157999524b6fde" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1XMLReadable" kindref="compound">XMLReadable</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;XMLReadable&gt; XMLReadablePtr</definition>
        <argsstring></argsstring>
        <name>XMLReadablePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="656" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a621f0dea132e9220594b6541cbbe4aab" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1XMLReadable" kindref="compound">XMLReadable</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;XMLReadable const&gt; XMLReadableConstPtr</definition>
        <argsstring></argsstring>
        <name>XMLReadableConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="657" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" prot="public" static="no">
        <type>std::list&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
        <definition>typedef std::list&lt;std::pair&lt;std::string,std::string&gt; &gt; AttributesList</definition>
        <argsstring></argsstring>
        <name>AttributesList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="658" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1BaseXMLReader" kindref="compound">BaseXMLReader</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;BaseXMLReader&gt; BaseXMLReaderPtr</definition>
        <argsstring></argsstring>
        <name>BaseXMLReaderPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="704" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a37212eda95928f64b1d7ede7a0ab4f8c" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1BaseXMLReader" kindref="compound">BaseXMLReader</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;BaseXMLReader const&gt; BaseXMLReaderConstPtr</definition>
        <argsstring></argsstring>
        <name>BaseXMLReaderConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="705" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1adec9e4596e96321e8bf28523753f5d2c" prot="public" static="no">
        <type>boost::function&lt; <ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref>(<ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref>, const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;)&gt;</type>
        <definition>typedef boost::function&lt;BaseXMLReaderPtr(InterfaceBasePtr, const AttributesList&amp;)&gt; CreateXMLReaderFn</definition>
        <argsstring></argsstring>
        <name>CreateXMLReaderFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="707" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" prot="public" static="no">
        <type>RaveVector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;</type>
        <definition>typedef RaveVector&lt;dReal&gt; Vector</definition>
        <argsstring></argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="751" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" prot="public" static="no">
        <type>RaveTransform&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;</type>
        <definition>typedef RaveTransform&lt;dReal&gt; Transform</definition>
        <argsstring></argsstring>
        <name>Transform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="752" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aec91352921c61bac216f8d1ccf32ce56" prot="public" static="no">
        <type>boost::shared_ptr&lt; RaveTransform&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt; &gt;</type>
        <definition>typedef boost::shared_ptr&lt; RaveTransform&lt;dReal&gt; &gt; TransformPtr</definition>
        <argsstring></argsstring>
        <name>TransformPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="753" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a6d8be5f641c37cf8096b9bc60c49d763" prot="public" static="no">
        <type>boost::shared_ptr&lt; RaveTransform&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt; const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt; RaveTransform&lt;dReal&gt; const &gt; TransformConstPtr</definition>
        <argsstring></argsstring>
        <name>TransformConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="754" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1aed57495d2314a15e0e3687936f1dfdf3" prot="public" static="no">
        <type>RaveTransformMatrix&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;</type>
        <definition>typedef RaveTransformMatrix&lt;dReal&gt; TransformMatrix</definition>
        <argsstring></argsstring>
        <name>TransformMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="755" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a6fbe475f5a699c5d101228b1e029727b" prot="public" static="no">
        <type>boost::shared_ptr&lt; RaveTransformMatrix&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt; &gt;</type>
        <definition>typedef boost::shared_ptr&lt; RaveTransformMatrix&lt;dReal&gt; &gt; TransformMatrixPtr</definition>
        <argsstring></argsstring>
        <name>TransformMatrixPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="756" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ab274fa74bb50e174b237e928d2c003b5" prot="public" static="no">
        <type>boost::shared_ptr&lt; RaveTransformMatrix&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt; const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt; RaveTransformMatrix&lt;dReal&gt; const &gt; TransformMatrixConstPtr</definition>
        <argsstring></argsstring>
        <name>TransformMatrixConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="757" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1ac5a84015329f62a31ef824074750c062" prot="public" static="no">
        <type><ref refid="classOpenRAVE_1_1geometry_1_1obb" kindref="compound">geometry::obb</ref>&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;</type>
        <definition>typedef geometry::obb&lt;dReal&gt; OBB</definition>
        <argsstring></argsstring>
        <name>OBB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="758" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1add55daf8a497b9a79baeb6845a549538" prot="public" static="no">
        <type><ref refid="classOpenRAVE_1_1geometry_1_1aabb" kindref="compound">geometry::aabb</ref>&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;</type>
        <definition>typedef geometry::aabb&lt;dReal&gt; AABB</definition>
        <argsstring></argsstring>
        <name>AABB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="759" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="759" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a761c9074489b8976875e9e97e6bc41cf" prot="public" static="no">
        <type><ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound">geometry::ray</ref>&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;</type>
        <definition>typedef geometry::ray&lt;dReal&gt; RAY</definition>
        <argsstring></argsstring>
        <name>RAY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="760" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a62516ae082bfa0513ffd4bbc32b60f33" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound">ConfigurationSpecification</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ConfigurationSpecification&gt; ConfigurationSpecificationPtr</definition>
        <argsstring></argsstring>
        <name>ConfigurationSpecificationPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1018" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a7fb282d26e2b05346ed591349a388ae7" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound">ConfigurationSpecification</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ConfigurationSpecification const&gt; ConfigurationSpecificationConstPtr</definition>
        <argsstring></argsstring>
        <name>ConfigurationSpecificationConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1019" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1019" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__plugin__exports_1ga6ae2f1554f547f27e4a5399d8aef7377" prot="public" static="no">
        <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref>(*</type>
        <definition>typedef InterfaceBasePtr(* PluginExportFn_OpenRAVECreateInterface)(InterfaceType type, const std::string &amp;name, const char *pluginhash, const char *envhash, EnvironmentBasePtr penv)</definition>
        <argsstring>)(InterfaceType type, const std::string &amp;name, const char *pluginhash, const char *envhash, EnvironmentBasePtr penv)</argsstring>
        <name>PluginExportFn_OpenRAVECreateInterface</name>
        <briefdescription>
<para>Create the interfaces, see <ref refid="group__plugin__exports_1ga468c900067e08689383b3f8da642141f" kindref="member">CreateInterfaceValidated</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1803" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__plugin__exports_1ga7cb4e2769bee1dca182b4432a900bc70" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* PluginExportFn_OpenRAVEGetPluginAttributes)(PLUGININFO *pinfo, int size, const char *infohash)</definition>
        <argsstring>)(PLUGININFO *pinfo, int size, const char *infohash)</argsstring>
        <name>PluginExportFn_OpenRAVEGetPluginAttributes</name>
        <briefdescription>
<para>Called to fill information about the plugin, see <ref refid="group__plugin__exports_1gaf90c03438b94cc76e7b8a54d445ec106" kindref="member">GetPluginAttributesValidated</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1807" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__plugin__exports_1ga7164d2e9a268c6e44a296e9488df69cd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PluginExportFn_DestroyPlugin)()</definition>
        <argsstring>)()</argsstring>
        <name>PluginExportFn_DestroyPlugin</name>
        <briefdescription>
<para>Called before plugin is unloaded from openrave. See <ref refid="group__plugin__exports_1gad6773d91dae37d0ba9de59d2a05277e4" kindref="member">DestroyPlugin</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1811" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1afd22dd103475de7006afbd1511a60ac4" prot="public" static="no">
        <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref>(*</type>
        <definition>typedef InterfaceBasePtr(* PluginExportFn_CreateInterface)(InterfaceType type, const std::string &amp;name, const char *pluginhash, EnvironmentBasePtr penv)</definition>
        <argsstring>)(InterfaceType type, const std::string &amp;name, const char *pluginhash, EnvironmentBasePtr penv)</argsstring>
        <name>PluginExportFn_CreateInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000034"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1814" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1814" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a79dd40a56ad2aaee2fbb678a709e2572" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* PluginExportFn_GetPluginAttributes)(PLUGININFO *pinfo, int size)</definition>
        <argsstring>)(PLUGININFO *pinfo, int size)</argsstring>
        <name>PluginExportFn_GetPluginAttributes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000035"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1817" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1GraphHandle" kindref="compound">GraphHandle</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;GraphHandle&gt; GraphHandlePtr</definition>
        <argsstring></argsstring>
        <name>GraphHandlePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/viewer.h" line="44" bodyfile="/home/pra3cob/openrave/include/openrave/viewer.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a2ea062f1371b4da2d0658ce8ee193c67" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1GraphHandle" kindref="compound">GraphHandle</ref> const  &gt;</type>
        <definition>typedef boost::shared_ptr&lt;GraphHandle const&gt; GraphHandleConstPtr</definition>
        <argsstring></argsstring>
        <name>GraphHandleConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/viewer.h" line="45" bodyfile="/home/pra3cob/openrave/include/openrave/viewer.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceOpenRAVE_1a6ffa8ec3faca0206558b612186934a4e" prot="public" static="no">
        <type>boost::weak_ptr&lt; <ref refid="classOpenRAVE_1_1GraphHandle" kindref="compound">GraphHandle</ref> const  &gt;</type>
        <definition>typedef boost::weak_ptr&lt;GraphHandle const&gt; GraphHandleWeakPtr</definition>
        <argsstring></argsstring>
        <name>GraphHandleWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/viewer.h" line="46" bodyfile="/home/pra3cob/openrave/include/openrave/viewer.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceOpenRAVE_1a3f37499f2c749cd199222f3b02396613" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
        <definition>const dReal PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <initializer> (<ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref>)3.14159265358979323846</initializer>
        <briefdescription>
<para>openrave constant for PI, could be replaced by accurate precision number depending on choice of dReal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="102" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceOpenRAVE_1a4838674098c908bd57c559f3fa7549d8" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char s_filesep</definition>
        <argsstring></argsstring>
        <name>s_filesep</name>
        <initializer> &apos;/&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="52" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceOpenRAVE_1a5ca8eb3cd339f687a1285ef1ceb86c59" prot="public" static="yes" mutable="no">
        <type>boost::once_flag</type>
        <definition>boost::once_flag _onceRaveInitialize</definition>
        <argsstring></argsstring>
        <name>_onceRaveInitialize</name>
        <initializer> BOOST_ONCE_INIT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="297" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="297" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceOpenRAVE_1a6659af9ccf72e04a53b444437acd0a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::ostream &amp;</type>
        <definition>OPENRAVE_API std::ostream&amp; OpenRAVE::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;O, const KinBody::Link::TRIMESH &amp;trimesh)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>O</declname>
        </param>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1KinBody_1_1Link_1_1TRIMESH" kindref="compound">KinBody::Link::TRIMESH</ref> &amp;</type>
          <declname>trimesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/kinbody.h" line="1422"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a8e429f020d431c017ca32b65df5cfcd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::istream &amp;</type>
        <definition>OPENRAVE_API std::istream&amp; OpenRAVE::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;I, KinBody::Link::TRIMESH &amp;trimesh)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1_1Link_1_1TRIMESH" kindref="compound">KinBody::Link::TRIMESH</ref> &amp;</type>
          <declname>trimesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/kinbody.h" line="1423"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a985876f10adcdcd967c0293b7ec17022" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string OpenRAVE::ChangeTextColor</definition>
        <argsstring>(int attribute, int fg, int bg)</argsstring>
        <name>ChangeTextColor</name>
        <param>
          <type>int</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bg</declname>
        </param>
        <briefdescription>
<para>Change the text color (on either stdout or stderr) with an attr:fg:bg (thanks to Radu Rusu for the code). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="248" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="247" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ab58a943ef75af625e8f87e6d2f6f7b3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string OpenRAVE::ChangeTextColor</definition>
        <argsstring>(int attribute, int fg)</argsstring>
        <name>ChangeTextColor</name>
        <param>
          <type>int</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fg</declname>
        </param>
        <briefdescription>
<para>Change the text color (on either stdout or stderr) with an attr:fg (thanks to Radu Rusu for the code). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="256" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="255" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a3a8c6e48e14f9c6fc744d8abc2856f73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string OpenRAVE::ResetTextColor</definition>
        <argsstring>()</argsstring>
        <name>ResetTextColor</name>
        <briefdescription>
<para>Reset the text color (on either stdout or stderr) to its original state (thanks to Radu Rusu for the code). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="264" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="263" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a2d3558bc665ebc1ddbadb53f22f79798" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring OpenRAVE::ChangeTextColorW</definition>
        <argsstring>(int attribute, int fg)</argsstring>
        <name>ChangeTextColorW</name>
        <param>
          <type>int</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="271" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a4430f512583612c6f45b334152ee4c10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring OpenRAVE::RavePrintTransformString</definition>
        <argsstring>(const wchar_t *fmt)</argsstring>
        <name>RavePrintTransformString</name>
        <param>
          <type>const wchar_t *</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="278" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="277" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a4565818cc5d4875f6c462cb6c5ab1a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveSetDebugLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>RaveSetDebugLevel</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the global openrave debug level. A combination of <ref refid="namespaceOpenRAVE_1ab658e6d84759440dbf3c890446075395" kindref="member">DebugLevel</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="324" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="619" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ab6231861994f01d7fb5732b54eef93d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API int</type>
        <definition>int RaveGetDebugLevel</definition>
        <argsstring>()</argsstring>
        <name>RaveGetDebugLevel</name>
        <briefdescription>
<para>Returns the openrave debug level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="327" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="624" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a49875f4e0a05692a85b7b6b37113d4cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* OpenRAVE::RaveGetSourceFilename</definition>
        <argsstring>(const char *pfilename)</argsstring>
        <name>RaveGetSourceFilename</name>
        <param>
          <type>const char *</type>
          <declname>pfilename</declname>
        </param>
        <briefdescription>
<para>extracts only the filename </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="331" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="330" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a70b35304368c1cd00cc2b72b2d7e0925" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenRAVE::RavePrintfA_INFOLEVEL</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>RavePrintfA_INFOLEVEL</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="419" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="418" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a8fe7028ff07903b2da4d1a4512360b50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenRAVE::RavePrintfA_INFOLEVEL</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>RavePrintfA_INFOLEVEL</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="430" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="429" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1af9ada9fc41c33cad8c647dddb4259245" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int OpenRAVE::RavePrintfA</definition>
        <argsstring>(const std::string &amp;s, uint32_t level)</argsstring>
        <name>RavePrintfA</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="463" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="462" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a15759460275c5fa586f4ca9656d998b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenRAVE::DefineRavePrintfW</definition>
        <argsstring>(_FATALLEVEL) DefineRavePrintfW(_ERRORLEVEL) DefineRavePrintfW(_WARNLEVEL) DefineRavePrintfW(_DEBUGLEVEL) DefineRavePrintfW(_VERBOSELEVEL) DefineRavePrintfA(_FATALLEVEL) DefineRavePrintfA(_ERRORLEVEL) DefineRavePrintfA(_WARNLEVEL) DefineRavePrintfA(_DEBUGLEVEL) DefineRavePrintfA(_VERBOSELEVEL) enum InterfaceType</argsstring>
        <name>DefineRavePrintfW</name>
        <param>
          <type>_FATALLEVEL</type>
        </param>
        <briefdescription>
<para>adds the function name and line number to an openrave exception </para>        </briefdescription>
        <detaileddescription>
<para>Enumeration of all the interfaces. </para>        </detaileddescription>
        <inbodydescription>
<para>&lt; describes <ref refid="classOpenRAVE_1_1PlannerBase" kindref="compound">PlannerBase</ref> interface</para><para>&lt; describes <ref refid="classOpenRAVE_1_1RobotBase" kindref="compound">RobotBase</ref> interface</para><para>&lt; describes <ref refid="classOpenRAVE_1_1SensorSystemBase" kindref="compound">SensorSystemBase</ref> interface</para><para>&lt; describes <ref refid="classOpenRAVE_1_1ControllerBase" kindref="compound">ControllerBase</ref> interface</para><para>&lt; describes <ref refid="classOpenRAVE_1_1ModuleBase" kindref="compound">ModuleBase</ref> interface</para><para>&lt; describes <ref refid="classOpenRAVE_1_1ModuleBase" kindref="compound">ModuleBase</ref> interface</para><para>&lt; describes <ref refid="classOpenRAVE_1_1IkSolverBase" kindref="compound">IkSolverBase</ref> interface</para><para>&lt; describes <ref refid="classOpenRAVE_1_1IkSolverBase" kindref="compound">IkSolverBase</ref> interface</para><para>&lt; describes <ref refid="classOpenRAVE_1_1KinBody" kindref="compound">KinBody</ref></para><para>&lt; describes <ref refid="classOpenRAVE_1_1PhysicsEngineBase" kindref="compound">PhysicsEngineBase</ref></para><para>&lt; describes <ref refid="classOpenRAVE_1_1SensorBase" kindref="compound">SensorBase</ref></para><para>&lt; describes <ref refid="classOpenRAVE_1_1CollisionCheckerBase" kindref="compound">CollisionCheckerBase</ref></para><para>&lt; describes <ref refid="classOpenRAVE_1_1TrajectoryBase" kindref="compound">TrajectoryBase</ref></para><para>&lt; describes <ref refid="classOpenRAVE_1_1ViewerBase" kindref="compound">ViewerBase</ref></para><para>&lt; describes SamplerBase</para><para>&lt; number of interfaces, do not forget to update </para>        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="546" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="494" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aaedb7f5b8cdd08c3b341da81d4ad8340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;O, const ConfigurationSpecification &amp;spec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>O</declname>
        </param>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound">ConfigurationSpecification</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1015" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1976" bodyend="1984"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ae9398a9daa44871c9233018c348f4b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;I, ConfigurationSpecification &amp;spec)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound">ConfigurationSpecification</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1016" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1986" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ad448574d280fb7a33bbfc3873d50fc4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound">IkParameterization</ref></type>
        <definition>IkParameterization OpenRAVE::operator*</definition>
        <argsstring>(const Transform &amp;t, const IkParameterization &amp;ikparam)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" kindref="member">Transform</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound">IkParameterization</ref> &amp;</type>
          <declname>ikparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1448" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1447" bodyend="1490"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a1d933f784084dc1ee9ebbf79f09ab8f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;O, const IkParameterization &amp;ikparam)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>O</declname>
        </param>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound">IkParameterization</ref> &amp;</type>
          <declname>ikparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1492" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="830" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a4f83144b80873f248fb58410e992dced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;I, IkParameterization &amp;ikparam)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound">IkParameterization</ref> &amp;</type>
          <declname>ikparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1493" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="883" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a0b617aee4d884d669b0fec0d77b82b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API int</type>
        <definition>int RaveGetIndexFromAffineDOF</definition>
        <argsstring>(int affinedofs, DOFAffine dof)</argsstring>
        <name>RaveGetIndexFromAffineDOF</name>
        <param>
          <type>int</type>
          <declname>affinedofs</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" kindref="member">DOFAffine</ref></type>
          <declname>dof</declname>
        </param>
        <briefdescription>
<para>Given a mask of affine dofs and a dof inside that mask, returns the index where the value could be found. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>affinedofs</parametername>
</parameternamelist>
<parameterdescription>
<para>a mask of <ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" kindref="member">DOFAffine</ref> values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dof</parametername>
</parameternamelist>
<parameterdescription>
<para>a set of values inside affinedofs, the index of the first value is returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>throws if dof is not present in affinedofs </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1519" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="905" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aa74e6e2a15fb305f40f1c111ccba4409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" kindref="member">DOFAffine</ref></type>
        <definition>DOFAffine RaveGetAffineDOFFromIndex</definition>
        <argsstring>(int affinedofs, int index)</argsstring>
        <name>RaveGetAffineDOFFromIndex</name>
        <param>
          <type>int</type>
          <declname>affinedofs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Given a mask of affine dofs and an index into the array, returns the affine dof that is being referenced. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>affinedofs</parametername>
</parameternamelist>
<parameterdescription>
<para>a mask of <ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98" kindref="member">DOFAffine</ref> values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>an index into the affine dof array </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>throws if dof if index is out of bounds </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1527" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="940" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aeb82c0dbce4078c170f1f804768d63e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API int</type>
        <definition>int RaveGetAffineDOF</definition>
        <argsstring>(int affinedofs)</argsstring>
        <name>RaveGetAffineDOF</name>
        <param>
          <type>int</type>
          <declname>affinedofs</declname>
        </param>
        <briefdescription>
<para>Returns the degrees of freedom needed to represent all the values in the affine dof mask. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>throws if </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1532" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="974" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1acee29007f1d29ce38571cadfec3ba99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveGetAffineDOFValuesFromTransform</definition>
        <argsstring>(std::vector&lt; dReal &gt;::iterator itvalues, const Transform &amp;t, int affinedofs, const Vector &amp;vActvAffineRotationAxis=Vector(0, 0, 1))</argsstring>
        <name>RaveGetAffineDOFValuesFromTransform</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::iterator</type>
          <declname>itvalues</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" kindref="member">Transform</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>affinedofs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref> &amp;</type>
          <declname>vActvAffineRotationAxis</declname>
          <defval><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>(0, 0, 1)</defval>
        </param>
        <briefdescription>
<para>Converts the transformation matrix into the specified affine values format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">itvalues</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator to the vector to write the values to. Will write exactly RaveGetAffineDOF(affinedofs) values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">the</parametername>
</parameternamelist>
<parameterdescription>
<para>affine transformation to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">affinedofs</parametername>
</parameternamelist>
<parameterdescription>
<para>the affine format to output values in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vActvAffineRotationAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>optional rotation axis if affinedofs specified <ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member">DOF_RotationAxis</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1541" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1007" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a065035f3b1323bcfd8ed090ea86a5e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveGetTransformFromAffineDOFValues</definition>
        <argsstring>(Transform &amp;t, std::vector&lt; dReal &gt;::const_iterator itvalues, int affinedofs, const Vector &amp;vActvAffineRotationAxis=Vector(0, 0, 1))</argsstring>
        <name>RaveGetTransformFromAffineDOFValues</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ad7d44b5a2b65bf3c814d2983528b2e85" kindref="member">Transform</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::const_iterator</type>
          <declname>itvalues</declname>
        </param>
        <param>
          <type>int</type>
          <declname>affinedofs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref> &amp;</type>
          <declname>vActvAffineRotationAxis</declname>
          <defval><ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref>(0, 0, 1)</defval>
        </param>
        <briefdescription>
<para>Converts affine dof values into a transform. </para>        </briefdescription>
        <detaileddescription>
<para>Note that depending on what the dof values holds, only a part of the transform will be updated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">t</parametername>
</parameternamelist>
<parameterdescription>
<para>the output transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">itvalues</parametername>
</parameternamelist>
<parameterdescription>
<para>the start iterator of the affine dof values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">affinedofs</parametername>
</parameternamelist>
<parameterdescription>
<para>the affine dof mask </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vActvAffineRotationAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>optional rotation axis if affinedofs specified <ref refid="namespaceOpenRAVE_1a3016e2185103f3c1bdc5e4482893ca98a5ee6baa8acb92c310cbc1ece082640d0" kindref="member">DOF_RotationAxis</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1551" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1051" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aaf02457d3c30e6e9439392175a6e23b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound">ConfigurationSpecification</ref></type>
        <definition>ConfigurationSpecification RaveGetAffineConfigurationSpecification</definition>
        <argsstring>(int affinedofs, KinBodyConstPtr pbody=KinBodyConstPtr())</argsstring>
        <name>RaveGetAffineConfigurationSpecification</name>
        <param>
          <type>int</type>
          <declname>affinedofs</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1553" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1096" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ac39e4bc60516ff7945dd5e506a2f7018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>void RaveInitRandomGeneration</definition>
        <argsstring>(uint32_t seed)</argsstring>
        <name>RaveInitRandomGeneration</name>
        <param>
          <type>uint32_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000030"><xreftitle>Deprecated</xreftitle><xrefdescription><para>(11/06/03), use <ref refid="classOpenRAVE_1_1SpaceSamplerBase" kindref="compound">SpaceSamplerBase</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1767" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2148" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a71fdac6520a636ef5daab82808551813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API uint32_t</type>
        <definition>uint32_t RaveRandomInt</definition>
        <argsstring>()</argsstring>
        <name>RaveRandomInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000031"><xreftitle>Deprecated</xreftitle><xrefdescription><para>(11/06/03), use <ref refid="classOpenRAVE_1_1SpaceSamplerBase" kindref="compound">SpaceSamplerBase</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1769" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2153" bodyend="2158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1af106eea57ab2fbb2e632347a3371a813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API float</type>
        <definition>float RaveRandomFloat</definition>
        <argsstring>(IntervalType interval=IT_Closed)</argsstring>
        <name>RaveRandomFloat</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937" kindref="member">IntervalType</ref></type>
          <declname>interval</declname>
          <defval>IT_Closed</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000032"><xreftitle>Deprecated</xreftitle><xrefdescription><para>(11/06/03), use <ref refid="classOpenRAVE_1_1SpaceSamplerBase" kindref="compound">SpaceSamplerBase</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1771" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2160" bodyend="2165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1afca2ae5739f7ecc30350b9ab7ffad941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API double</type>
        <definition>double RaveRandomDouble</definition>
        <argsstring>(IntervalType interval=IT_Closed)</argsstring>
        <name>RaveRandomDouble</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0d04dbfb6240509e26f8336ab1756937" kindref="member">IntervalType</ref></type>
          <declname>interval</declname>
          <defval>IT_Closed</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000033"><xreftitle>Deprecated</xreftitle><xrefdescription><para>(11/06/03), use <ref refid="classOpenRAVE_1_1SpaceSamplerBase" kindref="compound">SpaceSamplerBase</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1773" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2167" bodyend="2172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a32f8afb07145a214f906ea827c14422d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenRAVE::RaveParseDirectories</definition>
        <argsstring>(const char *pdirs, std::vector&lt; std::string &gt; &amp;vdirs)</argsstring>
        <name>RaveParseDirectories</name>
        <param>
          <type>const char *</type>
          <declname>pdirs</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>vdirs</declname>
        </param>
        <briefdescription>
<para>separates the directories from a string and returns them in a vector </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/openrave.h" line="1777" bodyfile="/home/pra3cob/openrave/include/openrave/openrave.h" bodystart="1776" bodyend="1799"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ae99951462c88a655511abbd361bcf841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::ostream &amp;</type>
        <definition>OPENRAVE_API std::ostream&amp; OpenRAVE::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;O, const PlannerBase::PlannerParameters &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>O</declname>
        </param>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1PlannerBase_1_1PlannerParameters" kindref="compound">PlannerBase::PlannerParameters</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>&lt;PlannerParameters&gt; </verbatim> tags </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planner.h" line="380"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a06be8afa87a225a4a6cdc0a5c2de150a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API std::istream &amp;</type>
        <definition>OPENRAVE_API std::istream&amp; OpenRAVE::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;I, PlannerBase::PlannerParameters &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1PlannerBase_1_1PlannerParameters" kindref="compound">PlannerBase::PlannerParameters</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>&lt;PlannerParameters&gt; </verbatim> to be the first token. Parses stream until <verbatim>&lt;/PlannerParameters&gt; </verbatim> reached </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planner.h" line="381"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1aec9c3dd6a1f2908a1eb84ca59243e00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_CORE_API <ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
        <definition>OPENRAVE_CORE_API EnvironmentBasePtr OpenRAVE::RaveCreateEnvironment</definition>
        <argsstring>()</argsstring>
        <name>RaveCreateEnvironment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="namespaceOpenRAVE" kindref="compound">OpenRAVE</ref> environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bLoadAllPlugins</parametername>
</parameternamelist>
<parameterdescription>
<para>passed into <ref refid="namespaceOpenRAVE_1ab89ccf2331c4ee81662f687cedaa1781" kindref="member">RaveInitialize</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave-core/openrave-core.h" line="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ae3bd9d884ea7720a63d49b6212d13f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_CORE_API <ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
        <definition>OPENRAVE_CORE_API EnvironmentBasePtr OpenRAVE::CreateEnvironment</definition>
        <argsstring>(bool bLoadAllPlugins=true) RAVE_DEPRECATED</argsstring>
        <name>CreateEnvironment</name>
        <param>
          <type>bool</type>
          <declname>bLoadAllPlugins</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000077"><xreftitle>Deprecated</xreftitle><xrefdescription><para>(10/09/23) see <ref refid="namespaceOpenRAVE_1aec9c3dd6a1f2908a1eb84ca59243e00a" kindref="member">RaveCreateEnvironment</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave-core/openrave-core.h" line="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a3d83feefc90b66c4bcf4de1d2fd852f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenRAVE::ConvertDOFRotation_AxisFrom3D</definition>
        <argsstring>(std::vector&lt; dReal &gt;::iterator ittarget, std::vector&lt; dReal &gt;::const_iterator itsource, const Vector &amp;vaxis)</argsstring>
        <name>ConvertDOFRotation_AxisFrom3D</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::iterator</type>
          <declname>ittarget</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::const_iterator</type>
          <declname>itsource</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref> &amp;</type>
          <declname>vaxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="1576" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1575" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a4d0a60f4de4cfa52a602471c44b8e3aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenRAVE::ConvertDOFRotation_AxisFromQuat</definition>
        <argsstring>(std::vector&lt; dReal &gt;::iterator ittarget, std::vector&lt; dReal &gt;::const_iterator itsource, const Vector &amp;vaxis)</argsstring>
        <name>ConvertDOFRotation_AxisFromQuat</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::iterator</type>
          <declname>ittarget</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::const_iterator</type>
          <declname>itsource</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref> &amp;</type>
          <declname>vaxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="1582" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1581" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1acfbf6c5e490568e0db3236cddb4f04d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenRAVE::ConvertDOFRotation_3DFromAxis</definition>
        <argsstring>(std::vector&lt; dReal &gt;::iterator ittarget, std::vector&lt; dReal &gt;::const_iterator itsource, const Vector &amp;vaxis)</argsstring>
        <name>ConvertDOFRotation_3DFromAxis</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::iterator</type>
          <declname>ittarget</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::const_iterator</type>
          <declname>itsource</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref> &amp;</type>
          <declname>vaxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="1588" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1587" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ac9a12562ccc708c1215b178b66ba985c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenRAVE::ConvertDOFRotation_3DFromQuat</definition>
        <argsstring>(std::vector&lt; dReal &gt;::iterator ittarget, std::vector&lt; dReal &gt;::const_iterator itsource)</argsstring>
        <name>ConvertDOFRotation_3DFromQuat</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::iterator</type>
          <declname>ittarget</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::const_iterator</type>
          <declname>itsource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="1594" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1593" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a778de70a7a9f357806744a71aac51e01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenRAVE::ConvertDOFRotation_QuatFromAxis</definition>
        <argsstring>(std::vector&lt; dReal &gt;::iterator ittarget, std::vector&lt; dReal &gt;::const_iterator itsource, const Vector &amp;vaxis)</argsstring>
        <name>ConvertDOFRotation_QuatFromAxis</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::iterator</type>
          <declname>ittarget</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::const_iterator</type>
          <declname>itsource</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1ab815faf493a6d82304f7f202d59f2a36" kindref="member">Vector</ref> &amp;</type>
          <declname>vaxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="1602" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1601" bodyend="1609"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ab03184219b5e98e42defe2e18234c305" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenRAVE::ConvertDOFRotation_QuatFrom3D</definition>
        <argsstring>(std::vector&lt; dReal &gt;::iterator ittarget, std::vector&lt; dReal &gt;::const_iterator itsource)</argsstring>
        <name>ConvertDOFRotation_QuatFrom3D</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::iterator</type>
          <declname>ittarget</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt;::const_iterator</type>
          <declname>itsource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="1612" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="1611" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ad183eaaf5d06fa4ef512e176b647909d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string OpenRAVE::GetMD5HashString</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>GetMD5HashString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="2175" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2174" bodyend="2194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1abf02b34cd96419036a4e0786023d87b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string OpenRAVE::GetMD5HashString</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;v)</argsstring>
        <name>GetMD5HashString</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="2197" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2196" bodyend="2216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1a5228dccd48432a2bda7e57fb45a560c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenRAVE::PairStringLengthCompare</definition>
        <argsstring>(const std::pair&lt; std::string, std::string &gt; &amp;p0, const std::pair&lt; std::string, std::string &gt; &amp;p1)</argsstring>
        <name>PairStringLengthCompare</name>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="2219" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2218" bodyend="2221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1ab8cc310307860144e591da7bd391a35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string&amp; OpenRAVE::SearchAndReplace</definition>
        <argsstring>(std::string &amp;out, const std::string &amp;in, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;_pairs)</argsstring>
        <name>SearchAndReplace</name>
        <param>
          <type>std::string &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
          <declname>_pairs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" line="2224" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2223" bodyend="2252"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The entire OpenRAVE library. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="23"/>
  </compounddef>
</doxygen>
