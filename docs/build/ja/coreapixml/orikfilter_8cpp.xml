<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="orikfilter_8cpp" kind="file">
    <compoundname>orikfilter.cpp</compoundname>
    <includes refid="openrave-core_8h" local="no">openrave-core.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">sstream</includes>
    <includes local="no">boost/thread/thread.hpp</includes>
    <includes local="no">boost/bind.hpp</includes>
    <incdepgraph>
      <node id="2721">
        <label>list</label>
      </node>
      <node id="2733">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="2758">
        <label>openrave/robot.h</label>
        <link refid="robot_8h"/>
      </node>
      <node id="2715">
        <label>stdarg.h</label>
      </node>
      <node id="2765">
        <label>openrave/environment.h</label>
        <link refid="environment_8h"/>
      </node>
      <node id="2750">
        <label>openrave/plugininfo.h</label>
        <link refid="plugininfo_8h"/>
      </node>
      <node id="2752">
        <label>openrave/spacesampler.h</label>
        <link refid="spacesampler_8h"/>
      </node>
      <node id="2725">
        <label>iomanip</label>
      </node>
      <node id="2729">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="2745">
        <label>limits</label>
      </node>
      <node id="2748">
        <label>openrave/mathextra.h</label>
        <link refid="mathextra_8h"/>
        <childnode refid="2747" relation="include">
        </childnode>
        <childnode refid="2743" relation="include">
        </childnode>
        <childnode refid="2749" relation="include">
        </childnode>
      </node>
      <node id="2731">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="2735">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="2740">
        <label>openrave/config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="2718">
        <label>stdint.h</label>
      </node>
      <node id="2712">
        <label>openrave-core.h</label>
        <link refid="openrave-core_8h"/>
        <childnode refid="2713" relation="include">
        </childnode>
      </node>
      <node id="2737">
        <label>boost/format.hpp</label>
      </node>
      <node id="2741">
        <label>openrave/interfacehashes.h</label>
        <link refid="interfacehashes_8h"/>
      </node>
      <node id="2743">
        <label>cmath</label>
      </node>
      <node id="2747">
        <label>cassert</label>
      </node>
      <node id="2736">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="2711">
        <label>src/cppexamples/orikfilter.cpp</label>
        <link refid="orikfilter.cpp"/>
        <childnode refid="2712" relation="include">
        </childnode>
        <childnode refid="2720" relation="include">
        </childnode>
        <childnode refid="2727" relation="include">
        </childnode>
        <childnode refid="2734" relation="include">
        </childnode>
        <childnode refid="2766" relation="include">
        </childnode>
      </node>
      <node id="2734">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="2719">
        <label>string</label>
      </node>
      <node id="2730">
        <label>boost/weak_ptr.hpp</label>
      </node>
      <node id="2722">
        <label>map</label>
      </node>
      <node id="2724">
        <label>exception</label>
      </node>
      <node id="2726">
        <label>fstream</label>
      </node>
      <node id="2756">
        <label>openrave/collisionchecker.h</label>
        <link refid="collisionchecker_8h"/>
      </node>
      <node id="2728">
        <label>boost/function.hpp</label>
      </node>
      <node id="2761">
        <label>openrave/controller.h</label>
        <link refid="controller_8h"/>
      </node>
      <node id="2760">
        <label>openrave/planner.h</label>
        <link refid="planner_8h"/>
      </node>
      <node id="2713">
        <label>openrave/openrave.h</label>
        <link refid="openrave_8h"/>
        <childnode refid="2714" relation="include">
        </childnode>
        <childnode refid="2715" relation="include">
        </childnode>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2718" relation="include">
        </childnode>
        <childnode refid="2719" relation="include">
        </childnode>
        <childnode refid="2720" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2722" relation="include">
        </childnode>
        <childnode refid="2723" relation="include">
        </childnode>
        <childnode refid="2724" relation="include">
        </childnode>
        <childnode refid="2725" relation="include">
        </childnode>
        <childnode refid="2726" relation="include">
        </childnode>
        <childnode refid="2727" relation="include">
        </childnode>
        <childnode refid="2728" relation="include">
        </childnode>
        <childnode refid="2729" relation="include">
        </childnode>
        <childnode refid="2730" relation="include">
        </childnode>
        <childnode refid="2731" relation="include">
        </childnode>
        <childnode refid="2732" relation="include">
        </childnode>
        <childnode refid="2733" relation="include">
        </childnode>
        <childnode refid="2734" relation="include">
        </childnode>
        <childnode refid="2735" relation="include">
        </childnode>
        <childnode refid="2736" relation="include">
        </childnode>
        <childnode refid="2737" relation="include">
        </childnode>
        <childnode refid="2738" relation="include">
        </childnode>
        <childnode refid="2739" relation="include">
        </childnode>
        <childnode refid="2740" relation="include">
        </childnode>
        <childnode refid="2741" relation="include">
        </childnode>
        <childnode refid="2742" relation="include">
        </childnode>
        <childnode refid="2748" relation="include">
        </childnode>
        <childnode refid="2750" relation="include">
        </childnode>
        <childnode refid="2751" relation="include">
        </childnode>
        <childnode refid="2752" relation="include">
        </childnode>
        <childnode refid="2753" relation="include">
        </childnode>
        <childnode refid="2754" relation="include">
        </childnode>
        <childnode refid="2755" relation="include">
        </childnode>
        <childnode refid="2756" relation="include">
        </childnode>
        <childnode refid="2757" relation="include">
        </childnode>
        <childnode refid="2758" relation="include">
        </childnode>
        <childnode refid="2759" relation="include">
        </childnode>
        <childnode refid="2760" relation="include">
        </childnode>
        <childnode refid="2761" relation="include">
        </childnode>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2763" relation="include">
        </childnode>
        <childnode refid="2764" relation="include">
        </childnode>
        <childnode refid="2765" relation="include">
        </childnode>
      </node>
      <node id="2714">
        <label>cstdio</label>
      </node>
      <node id="2764">
        <label>openrave/viewer.h</label>
        <link refid="viewer_8h"/>
      </node>
      <node id="2720">
        <label>vector</label>
      </node>
      <node id="2753">
        <label>openrave/kinbody.h</label>
        <link refid="kinbody_8h"/>
      </node>
      <node id="2746">
        <label>utility</label>
      </node>
      <node id="2727">
        <label>sstream</label>
      </node>
      <node id="2763">
        <label>openrave/sensorsystem.h</label>
        <link refid="sensorsystem_8h"/>
      </node>
      <node id="2762">
        <label>openrave/physicsengine.h</label>
        <link refid="physicsengine_8h"/>
      </node>
      <node id="2732">
        <label>boost/enable_shared_from_this.hpp</label>
      </node>
      <node id="2742">
        <label>openrave/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="2743" relation="include">
        </childnode>
        <childnode refid="2744" relation="include">
        </childnode>
        <childnode refid="2745" relation="include">
        </childnode>
        <childnode refid="2746" relation="include">
        </childnode>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2747" relation="include">
        </childnode>
      </node>
      <node id="2717">
        <label>cstdlib</label>
      </node>
      <node id="2744">
        <label>iostream</label>
      </node>
      <node id="2754">
        <label>openrave/trajectory.h</label>
        <link refid="trajectory_8h"/>
      </node>
      <node id="2749">
        <label>climits</label>
      </node>
      <node id="2766">
        <label>boost/bind.hpp</label>
      </node>
      <node id="2751">
        <label>openrave/interface.h</label>
        <link refid="interface_8h"/>
      </node>
      <node id="2759">
        <label>openrave/iksolver.h</label>
        <link refid="iksolver_8h"/>
      </node>
      <node id="2738">
        <label>boost/array.hpp</label>
      </node>
      <node id="2755">
        <label>openrave/module.h</label>
        <link refid="module_8h"/>
      </node>
      <node id="2723">
        <label>set</label>
      </node>
      <node id="2739">
        <label>boost/multi_array.hpp</label>
      </node>
      <node id="2716">
        <label>cstring</label>
      </node>
      <node id="2757">
        <label>openrave/sensor.h</label>
        <link refid="sensor_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="orikfilter_8cpp_1a89886210b2a6d2e7b86438df90e2d5b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void getWallTime</definition>
        <argsstring>(uint32_t &amp;sec, uint32_t &amp;nsec)</argsstring>
        <name>getWallTime</name>
        <param>
          <type>uint32_t &amp;</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>nsec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp" line="28" bodyfile="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp" bodystart="27" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="orikfilter_8cpp_1ab78578344690c6cddab2e300456b05b1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t GetMilliTime</definition>
        <argsstring>()</argsstring>
        <name>GetMilliTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp" line="36" bodyfile="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="orikfilter_8cpp_1a99240d355fc41aa8fe88c20df9646465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceOpenRAVE_1a7a8cf38163621e225d83b4b3a8ff62e9" kindref="member">IkFilterReturn</ref></type>
        <definition>IkFilterReturn MyTimeoutFilter</definition>
        <argsstring>(std::vector&lt; dReal &gt; &amp;, RobotBase::ManipulatorPtr, const IkParameterization &amp;, uint32_t starttime)</argsstring>
        <name>MyTimeoutFilter</name>
        <param>
          <type>std::vector&lt; dReal &gt; &amp;</type>
        </param>
        <param>
          <type>RobotBase::ManipulatorPtr</type>
        </param>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound">IkParameterization</ref> &amp;</type>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>starttime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp" line="46" bodyfile="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="orikfilter_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp" line="55" bodyfile="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp" bodystart="54" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="openrave-core_8h" kindref="compound">openrave-core.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/thread/thread.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">OpenRAVE;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="orikfilter_8cpp_1ab78578344690c6cddab2e300456b05b1" kindref="member">GetMilliTime</ref>()</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>LARGE_INTEGER<sp/>count,<sp/>freq;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>QueryPerformanceCounter(&amp;count);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>QueryPerformanceFrequency(&amp;freq);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)((count.QuadPart<sp/>*<sp/>1000)<sp/>/<sp/>freq.QuadPart);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="orikfilter_8cpp_1a89886210b2a6d2e7b86438df90e2d5b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="orikfilter_8cpp_1a89886210b2a6d2e7b86438df90e2d5b9" kindref="member">getWallTime</ref>(uint32_t&amp;<sp/>sec,<sp/>uint32_t&amp;<sp/>nsec)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>timeofday;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(&amp;timeofday,NULL);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>sec<sp/><sp/>=<sp/>timeofday.tv_sec;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>nsec<sp/>=<sp/>timeofday.tv_usec<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="orikfilter_8cpp_1ab78578344690c6cddab2e300456b05b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="orikfilter_8cpp_1ab78578344690c6cddab2e300456b05b1" kindref="member">GetMilliTime</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>sec,nsec;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="orikfilter_8cpp_1a89886210b2a6d2e7b86438df90e2d5b9" kindref="member">getWallTime</ref>(sec,nsec);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)sec*1000<sp/>+<sp/>(uint64_t)nsec/1000000;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>quit<sp/>after<sp/>100<sp/>milliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="orikfilter_8cpp_1a99240d355fc41aa8fe88c20df9646465" refkind="member"><highlight class="normal"><ref refid="namespaceOpenRAVE_1a7a8cf38163621e225d83b4b3a8ff62e9" kindref="member" tooltip="Return value for the ik filter that can be optionally set on an ik solver.">IkFilterReturn</ref><sp/><ref refid="orikfilter_8cpp_1a99240d355fc41aa8fe88c20df9646465" kindref="member">MyTimeoutFilter</ref>(std::vector&lt;dReal&gt;&amp;,<sp/>RobotBase::ManipulatorPtr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classOpenRAVE_1_1IkParameterization" kindref="compound" tooltip="Parameterization of basic primitives for querying inverse-kinematics solutions.">IkParameterization</ref>&amp;,<sp/>uint32_t<sp/>starttime)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="orikfilter_8cpp_1ab78578344690c6cddab2e300456b05b1" kindref="member">GetMilliTime</ref>()-starttime<sp/>&gt;<sp/>100<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a334922a6794604207afe36b4feda230e" kindref="member">RAVELOG_INFO</ref>(</highlight><highlight class="stringliteral">&quot;quitting\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a7a8cf38163621e225d83b4b3a8ff62e9a818a27efa66560252c93cc569caae79e" kindref="member" tooltip="the ik solution is rejected and the ik call itself should quit with failure">IKFR_Quit</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceOpenRAVE_1a7a8cf38163621e225d83b4b3a8ff62e9a7a0f5642b1a33ef86868e24bb1e2ea39" kindref="member" tooltip="the ik solution is good">IKFR_Success</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="orikfilter_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ikfastloader_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>scenefilename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;data/pr2test1.env.xml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1ab89ccf2331c4ee81662f687cedaa1781" kindref="member" tooltip="Explicitly initializes the global OpenRAVE state (optional).">RaveInitialize</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref><sp/>penv<sp/>=<sp/><ref refid="namespaceOpenRAVE_1aec9c3dd6a1f2908a1eb84ca59243e00a" kindref="member">RaveCreateEnvironment</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>penv-&gt;Load(scenefilename);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;RobotBasePtr&gt;<sp/>vrobots;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>penv-&gt;GetRobots(vrobots);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref><sp/>probot<sp/>=<sp/>vrobots.at(0);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>probot-&gt;SetActiveManipulator(</highlight><highlight class="stringliteral">&quot;leftarm_torso&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>RobotBase::ManipulatorPtr<sp/>pmanip<sp/>=<sp/>probot-&gt;GetActiveManipulator();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>inverse<sp/>kinematics<sp/>using<sp/>ikfast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref><sp/>pikfast<sp/>=<sp/><ref refid="namespaceOpenRAVE_1a85a2344a8c87ccc8573c58c05f17616e" kindref="member">RaveCreateModule</ref>(penv,</highlight><highlight class="stringliteral">&quot;ikfast&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>penv-&gt;AddModule(pikfast,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ssin,ssout;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;dReal&gt;<sp/>vsolution;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>ssin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LoadIKFastSolver<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>probot-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(int)<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea33b4f04338b6d55fe993b6bdd9f66956" kindref="member" tooltip="end effector reaches desired 6D transformation">IKP_Transform6D</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!pikfast-&gt;SendCommand(ssout,ssin)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a4299f3db31dd3149dc36eeffbb6a65db" kindref="member">RAVELOG_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>load<sp/>iksolver\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!pmanip-&gt;GetIkSolver())<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>penv-&gt;Destroy();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>probot-&gt;SetActiveDOFs(pmanip-&gt;GetArmIndices());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;dReal&gt;<sp/>vlower,vupper;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnvironmentMutex::scoped_lock<sp/>lock(penv-&gt;GetMutex());<sp/></highlight><highlight class="comment">//<sp/>lock<sp/>environment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>robot<sp/>randomly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probot-&gt;GetActiveDOFLimits(vlower,vupper);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;dReal&gt;<sp/>v(pmanip-&gt;GetArmIndices().size());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vlower.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>vlower[i]<sp/>+<sp/>(vupper[i]-vlower[i])*<ref refid="namespaceOpenRAVE_1af106eea57ab2fbb2e632347a3371a813" kindref="member">RaveRandomFloat</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>probot-&gt;SetActiveDOFValues(v);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bincollision<sp/>=<sp/>!penv-&gt;CheckCollision(probot)<sp/>&amp;&amp;<sp/>!probot-&gt;CheckSelfCollision();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>starttime<sp/>=<sp/><ref refid="orikfilter_8cpp_1ab78578344690c6cddab2e300456b05b1" kindref="member">GetMilliTime</ref>();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref><sp/>filterhandle<sp/>=<sp/>pmanip-&gt;GetIkSolver()-&gt;RegisterCustomFilter(0,boost::bind(<ref refid="orikfilter_8cpp_1a99240d355fc41aa8fe88c20df9646465" kindref="member">MyTimeoutFilter</ref>,_1,_2,_3,starttime));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bsuccess<sp/>=<sp/>pmanip-&gt;FindIKSolution(pmanip-&gt;GetIkParameterization(<ref refid="namespaceOpenRAVE_1a16f7833e516a35d385ac594a44e44a2ea33b4f04338b6d55fe993b6bdd9f66956" kindref="member" tooltip="end effector reaches desired 6D transformation">IKP_Transform6D</ref>),v,<ref refid="namespaceOpenRAVE_1a89401ff7c557d6d1ede96b550fb22bdca9e6c06d6ccbfbbe56de480a37cf0381b" kindref="member" tooltip="will check environment collisions with the robot (not checked by default)">IKFO_CheckEnvCollisions</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="openrave_8h_1a334922a6794604207afe36b4feda230e" kindref="member">RAVELOG_INFO</ref>(</highlight><highlight class="stringliteral">&quot;in<sp/>collision:<sp/>%d,<sp/>real<sp/>success<sp/>%d,<sp/>time<sp/>passed:<sp/>%d\n&quot;</highlight><highlight class="normal">,bincollision,bsuccess,<ref refid="orikfilter_8cpp_1ab78578344690c6cddab2e300456b05b1" kindref="member">GetMilliTime</ref>()-starttime);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceOpenRAVE_1a0f405b1e7e95e6386c892fb4ad54d9b5" kindref="member" tooltip="Destroys the entire OpenRAVE state and all loaded environments.">RaveDestroy</ref>();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/pra3cob/openrave/src/cppexamples/orikfilter.cpp"/>
  </compounddef>
</doxygen>
