<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classOpenRAVE_1_1EnvironmentBase" kind="class" prot="public">
    <compoundname>OpenRAVE::EnvironmentBase</compoundname>
    <includes refid="environment_8h" local="no">environment.h</includes>
      <sectiondef kind="user-defined">
      <header>File Loading and Parsing</header>
      <description><para><anchor id="_1amgrpbe57ebfdd5cd59b6daf2decf8cad30e1"/> <anchor id="classOpenRAVE_1_1EnvironmentBase_1env_loading"/> </para></description>
      <memberdef kind="enum" id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abee" prot="public" static="no">
        <name>SelectionOptions</name>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeadcf69b48faa9d608415e8c26b6f7d39f" prot="public">
          <name>SO_NoRobots</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>everything but robots </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeaafafd3156ee342957abf594bac470fbc" prot="public">
          <name>TO_Obstacles</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>everything but robots </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeaf7938037970de9827745550a0574d1bd" prot="public">
          <name>SO_Robots</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>all robots </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeea230100aa4237789f54a92882a3bd834a" prot="public">
          <name>TO_Robots</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>all robots </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeea6e30c932d2401d67c6dde8bae8e4f1a5" prot="public">
          <name>SO_Everything</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>all bodies and robots everything </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeea5162d38d0e4ad32bae85b3245dd68ace" prot="public">
          <name>TO_Everything</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>all bodies and robots everything </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeead38e0a7ef6a153e9c2ee4485c3166fc9" prot="public">
          <name>SO_Body</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>only triangulate robot/kinbody </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeabc35894adcdc121dc829954c3e896944" prot="public">
          <name>TO_Body</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>only triangulate robot/kinbody </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeae9222060c4b6a63d6c03a7e0dc0a7f63" prot="public">
          <name>SO_AllExceptBody</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>select everything but the robot/kinbody </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeab6ffc5682ebdb916d35f360c3a2415a6" prot="public">
          <name>TO_AllExceptBody</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>select everything but the robot/kinbody </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeea5448bc4aad573a961c579316fa195d92" prot="public">
          <name>SO_BodyList</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>provide a list of body names </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A set of options used to select particular parts of the scene. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="172" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="171" bodyend="184"/>
      </memberdef>
      <memberdef kind="typedef" id="classOpenRAVE_1_1EnvironmentBase_1a25f0d55fb1a4d37b618e28df346dcafe" prot="public" static="no">
        <type><ref refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abee" kindref="member">SelectionOptions</ref></type>
        <definition>typedef SelectionOptions TriangulateOptions</definition>
        <argsstring></argsstring>
        <name>TriangulateOptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="185" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a0937ee944308cece16c98c035c40eb7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Load</definition>
        <argsstring>(const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>Load</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>Loads a scene from a file and adds all objects in the environment. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="188"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a0b1bc7ab475bb5cb1b1d7d0fb3c77b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool LoadData</definition>
        <argsstring>(const std::string &amp;data, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>LoadData</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>Loads a scene from in-memory data and adds all objects in the environment. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="191"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a41363bcb26f68d8d25a0f3270558219e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool LoadXMLData</definition>
        <argsstring>(const std::string &amp;data, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>LoadXMLData</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="193" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a3ad623878891c5dc28f355d1cf348793" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Save</definition>
        <argsstring>(const std::string &amp;filename, SelectionOptions options=SO_Everything, const std::string &amp;selectname=&quot;&quot;)=0</argsstring>
        <name>Save</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abee" kindref="member">SelectionOptions</ref></type>
          <declname>options</declname>
          <defval>SO_Everything</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>selectname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Saves a scene depending on the filename extension. Default is in COLLADA format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to save the results at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>controls what to save </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectname</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Throw if failed to save anything </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="203"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ac8438f3ee051493a82ef78b92e9309f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
        <definition>virtual RobotBasePtr ReadRobotURI</definition>
        <argsstring>(RobotBasePtr robot, const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>ReadRobotURI</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
          <declname>robot</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>Initializes a robot from a resource file. The robot is not added to the environment when calling this function. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>robot</parametername>
</parameternamelist>
<parameterdescription>
<para>If a null pointer is passed, a new robot will be created, otherwise an existing robot will be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the resource file, its extension determines the format of the file. See <ref refid="architecture__concepts_1supported_formats" kindref="member">Resource File Formats</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atts</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute/value pair specifying loading options. Defined in <ref refid="arch__robot" kindref="compound">Robot Concepts</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="211"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a93df9cb2035fd4489282e9fbe0f96b93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
        <definition>virtual RobotBasePtr ReadRobotXMLFile</definition>
        <argsstring>(RobotBasePtr robot, const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>ReadRobotXMLFile</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
          <declname>robot</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="212" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a3f8502be4e272feaacbcb5b7434170be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
        <definition>virtual RobotBasePtr ReadRobotURI</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>ReadRobotURI</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Creates a new robot from a file with no extra load options specified. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="217" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a43c0a583e42aa537aa889a6a637a4568" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
        <definition>virtual RobotBasePtr ReadRobotXMLFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>ReadRobotXMLFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="220" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a70931fb3eb67326208afdc830304a0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
        <definition>virtual RobotBasePtr ReadRobotData</definition>
        <argsstring>(RobotBasePtr robot, const std::string &amp;data, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>ReadRobotData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
          <declname>robot</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>Initialize a robot from in-memory data. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>The robot should not be added the environment when calling this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>robot</parametername>
</parameternamelist>
<parameterdescription>
<para>If a null pointer is passed, a new robot will be created, otherwise an existing robot will be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atts</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute/value pair specifying loading options. Defined in <ref refid="arch__robot" kindref="compound">Robot Concepts</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="230"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ab4facbc2ca164d0ffc5842fd898e682c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
        <definition>virtual RobotBasePtr ReadRobotXMLData</definition>
        <argsstring>(RobotBasePtr robot, const std::string &amp;data, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>ReadRobotXMLData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
          <declname>robot</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="231" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ab9fda0698f28bd76aefcad4f5ec4340a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>virtual KinBodyPtr ReadKinBodyURI</definition>
        <argsstring>(KinBodyPtr body, const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>ReadKinBodyURI</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>body</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>Initializes a kinematic body from a resource file. The body is not added to the environment when calling this function. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the resource file, its extension determines the format of the file. See <ref refid="architecture__concepts_1supported_formats" kindref="member">Resource File Formats</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>If a null pointer is passed, a new body will be created, otherwise an existing robot will be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atts</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute/value pair specifying loading options. Defined in <ref refid="arch__kinbody" kindref="compound">Kinematics Body Concepts</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="241"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a047abcaeeef915017c37dd31d34866e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>virtual KinBodyPtr ReadKinBodyXMLFile</definition>
        <argsstring>(KinBodyPtr body, const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>ReadKinBodyXMLFile</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>body</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="242" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aaaa3f743069cc769e571f6e4ec3a732a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>virtual KinBodyPtr ReadKinBodyURI</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>ReadKinBodyURI</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Creates a new kinbody from an XML file with no extra load options specified. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="247" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ac70270fc6d4580cdaed771f5fe4d2795" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>virtual KinBodyPtr ReadKinBodyXMLFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>ReadKinBodyXMLFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="250" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a5539fbbaefc308651ace750c133f3adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>virtual KinBodyPtr ReadKinBodyData</definition>
        <argsstring>(KinBodyPtr body, const std::string &amp;data, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>ReadKinBodyData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>body</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>Initializes a kinematic body from in-memory data. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>The body should not be added to the environment when calling this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>If a null pointer is passed, a new body will be created, otherwise an existing robot will be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atts</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute/value pair specifying loading options. Defined in <ref refid="arch__kinbody" kindref="compound">Kinematics Body Concepts</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="260"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1af8fde0c46dbd2c833936e7524ab54436" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>virtual KinBodyPtr ReadKinBodyXMLData</definition>
        <argsstring>(KinBodyPtr body, const std::string &amp;data, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>ReadKinBodyXMLData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>body</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="261" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1abe79c2e2ad5f11d0c978269d737816dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
        <definition>virtual InterfaceBasePtr ReadInterfaceURI</definition>
        <argsstring>(InterfaceBasePtr pinterface, InterfaceType type, const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>ReadInterfaceURI</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>Initializes an interface from a resource file. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pinterface</parametername>
</parameternamelist>
<parameterdescription>
<para>If a null pointer is passed, a new interface will be created, otherwise an existing interface will be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the resource file, its extension determines the format of the file. See <ref refid="architecture__concepts_1supported_formats" kindref="member">Resource File Formats</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atts</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute/value pair specifying loading options. See the individual interface descriptions at <ref refid="interface__concepts" kindref="compound">Base Interface Concepts</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="271"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ae5185403a61b5ba3bf92fa8513bc108c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
        <definition>virtual InterfaceBasePtr ReadInterfaceXMLFile</definition>
        <argsstring>(InterfaceBasePtr pinterface, InterfaceType type, const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>ReadInterfaceXMLFile</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="272" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="272" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a6aa2fca70fe18cb21cca37300669e025" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
        <definition>virtual InterfaceBasePtr ReadInterfaceURI</definition>
        <argsstring>(const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>ReadInterfaceURI</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="276"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ae0eaa5085685e141912cb4ebbcaef986" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
        <definition>virtual InterfaceBasePtr ReadInterfaceXMLFile</definition>
        <argsstring>(const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>ReadInterfaceXMLFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="277" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aceef6e28746bc88931aa1c863c9478f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
        <definition>virtual InterfaceBasePtr ReadInterfaceData</definition>
        <argsstring>(InterfaceBasePtr pinterface, InterfaceType type, const std::string &amp;data, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>ReadInterfaceData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>Initializes an interface from in-memory data. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pinterface</parametername>
</parameternamelist>
<parameterdescription>
<para>If a null pointer is passed, a new interface will be created, otherwise an existing interface will be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>string containing data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atts</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute/value pair specifying loading options. See the individual interface descriptions at <ref refid="interface__concepts" kindref="compound">Base Interface Concepts</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="287"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aeef0fe370eea0dc498db5116aac227af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
        <definition>virtual InterfaceBasePtr ReadInterfaceXMLData</definition>
        <argsstring>(InterfaceBasePtr pinterface, InterfaceType type, const std::string &amp;data, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>ReadInterfaceXMLData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="288" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ac12a12b9515823e2371cd4c04b201a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1KinBody_1_1Link_1_1TRIMESH" kindref="compound">KinBody::Link::TRIMESH</ref> &gt;</type>
        <definition>virtual boost::shared_ptr&lt;KinBody::Link::TRIMESH&gt; ReadTrimeshURI</definition>
        <argsstring>(boost::shared_ptr&lt; KinBody::Link::TRIMESH &gt; ptrimesh, const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())=0</argsstring>
        <name>ReadTrimeshURI</name>
        <param>
          <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1KinBody_1_1Link_1_1TRIMESH" kindref="compound">KinBody::Link::TRIMESH</ref> &gt;</type>
          <declname>ptrimesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
<para>reads in the rigid geometry of a resource file into a TRIMESH structure </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the resource file, its extension determines the format of the file. Complex meshes and articulated meshes are all triangulated appropriately. See <ref refid="architecture__concepts_1supported_formats" kindref="member">Resource File Formats</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Options to control the parsing process. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="297"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ab7ec023d9a5f3435ee25f2be462d74c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1KinBody_1_1Link_1_1TRIMESH" kindref="compound">KinBody::Link::TRIMESH</ref> &gt;</type>
        <definition>virtual boost::shared_ptr&lt;KinBody::Link::TRIMESH&gt; ReadTrimeshFile</definition>
        <argsstring>(boost::shared_ptr&lt; KinBody::Link::TRIMESH &gt; ptrimesh, const std::string &amp;filename, const AttributesList &amp;atts=AttributesList())</argsstring>
        <name>ReadTrimeshFile</name>
        <param>
          <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1KinBody_1_1Link_1_1TRIMESH" kindref="compound">KinBody::Link::TRIMESH</ref> &gt;</type>
          <declname>ptrimesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref> &amp;</type>
          <declname>atts</declname>
          <defval><ref refid="namespaceOpenRAVE_1a7372895c7fd9541aa829987c3eb9aaf9" kindref="member">AttributesList</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="298" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="298" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a15f83ec6ea57058090ca016f06e63870" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
        <definition>virtual UserDataPtr RegisterXMLReader</definition>
        <argsstring>(InterfaceType type, const std::string &amp;xmltag, const CreateXMLReaderFn &amp;fn) RAVE_DEPRECATED=0</argsstring>
        <name>RegisterXMLReader</name>
        <param>
          <type>InterfaceType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>xmltag</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceOpenRAVE_1adec9e4596e96321e8bf28523753f5d2c" kindref="member">CreateXMLReaderFn</ref> &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>非推奨</xreftitle><xrefdescription><para>(10/09/30) see <ref refid="namespaceOpenRAVE_1a9ad0884135aded97f58a39cd75e80bbf" kindref="member">RaveRegisterXMLReader</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="303"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a4a315546105f2114eb17188fd6cdcc93" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ParseXMLFile</definition>
        <argsstring>(BaseXMLReaderPtr preader, const std::string &amp;filename) RAVE_DEPRECATED=0</argsstring>
        <name>ParseXMLFile</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref></type>
          <declname>preader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Parses a file for <ref refid="namespaceOpenRAVE" kindref="compound">OpenRAVE</ref> XML formatted data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="306"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a9895152450985d0a439b851d8ec78d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool ParseXMLData</definition>
        <argsstring>(BaseXMLReaderPtr preader, const std::string &amp;data) RAVE_DEPRECATED=0</argsstring>
        <name>ParseXMLData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5465be4feef36a211b06feebdc5e3b42" kindref="member">BaseXMLReaderPtr</ref></type>
          <declname>preader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Parses a data file for XML data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para>The data of the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes valid in pdata </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="313"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Collision specific functions.</header>
      <description><para><anchor id="_1amgrpef0faa32f592cc67b0a4ecf86076aa0d"/>Each function takes an optional pointer to a <ref refid="classOpenRAVE_1_1CollisionReport" kindref="compound">CollisionReport</ref> structure and returns true if collision occurs. <bold>[multi-thread safe]</bold></para><para><anchor id="classOpenRAVE_1_1EnvironmentBase_1env_collision_checking"/> </para></description>
      <memberdef kind="typedef" id="classOpenRAVE_1_1EnvironmentBase_1a28e410489b8d769bfc03a29283beff59" prot="public" static="no">
        <type>boost::function&lt; <ref refid="namespaceOpenRAVE_1aec38ff628d76ac03cb4ac5d8f5cf3664" kindref="member">CollisionAction</ref>(<ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>, bool)&gt;</type>
        <definition>typedef boost::function&lt;CollisionAction(CollisionReportPtr,bool)&gt; CollisionCallbackFn</definition>
        <argsstring></argsstring>
        <name>CollisionCallbackFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="116" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a834baeb37724a8ec7c646f4dcb8068c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SetCollisionChecker</definition>
        <argsstring>(CollisionCheckerBasePtr pchecker)=0</argsstring>
        <name>SetCollisionChecker</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3e7611a64b7d4204203d69014f45fe8" kindref="member">CollisionCheckerBasePtr</ref></type>
          <declname>pchecker</declname>
        </param>
        <briefdescription>
<para>set the global environment collision checker </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="80"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a5ab1aa7fd5f2eb4b54dfac009c1e2804" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1ae3e7611a64b7d4204203d69014f45fe8" kindref="member">CollisionCheckerBasePtr</ref></type>
        <definition>virtual CollisionCheckerBasePtr GetCollisionChecker</definition>
        <argsstring>() const =0</argsstring>
        <name>GetCollisionChecker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="81"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a032bda10dc517c50606781511da243d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBodyConstPtr pbody1, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody1</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1a032bda10dc517c50606781511da243d3" kindref="member">CollisionCheckerBase::CheckCollision(KinBodyConstPtr,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="84"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ab286174aabc8a0e8b090b25963a531b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBodyConstPtr pbody1, KinBodyConstPtr pbody2, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody1</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody2</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1ab286174aabc8a0e8b090b25963a531b3" kindref="member">CollisionCheckerBase::CheckCollision(KinBodyConstPtr,KinBodyConstPtr,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="87"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ac4d2da56daf4dbd95074bf2dd72974a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBody::LinkConstPtr plink, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1ac4d2da56daf4dbd95074bf2dd72974a9" kindref="member">CollisionCheckerBase::CheckCollision(KinBody::LinkConstPtr,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="90"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1abc391362f1952f15cd5a27fdd9b8a65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBody::LinkConstPtr plink1, KinBody::LinkConstPtr plink2, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink1</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink2</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1abc391362f1952f15cd5a27fdd9b8a65d" kindref="member">CollisionCheckerBase::CheckCollision(KinBody::LinkConstPtr,KinBody::LinkConstPtr,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="93"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ab14f3598db6c781c3f2f6ef188fdeb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBody::LinkConstPtr plink, KinBodyConstPtr pbody, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1ab14f3598db6c781c3f2f6ef188fdeb3f" kindref="member">CollisionCheckerBase::CheckCollision(KinBody::LinkConstPtr,KinBodyConstPtr,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="96"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a8c2bdc1a68281fb48214f3c141dc26a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBody::LinkConstPtr plink, const std::vector&lt; KinBodyConstPtr &gt; &amp;vbodyexcluded, const std::vector&lt; KinBody::LinkConstPtr &gt; &amp;vlinkexcluded, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref> &gt; &amp;</type>
          <declname>vbodyexcluded</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref> &gt; &amp;</type>
          <declname>vlinkexcluded</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1a8c2bdc1a68281fb48214f3c141dc26a9" kindref="member">CollisionCheckerBase::CheckCollision(KinBody::LinkConstPtr,const std::vector&lt;KinBodyConstPtr&gt;&amp;,const std::vector&lt;KinBody::LinkConstPtr&gt;&amp;,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="99"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a013763101e3cb1fcad594c030e5472fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBodyConstPtr pbody, const std::vector&lt; KinBodyConstPtr &gt; &amp;vbodyexcluded, const std::vector&lt; KinBody::LinkConstPtr &gt; &amp;vlinkexcluded, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref> &gt; &amp;</type>
          <declname>vbodyexcluded</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref> &gt; &amp;</type>
          <declname>vlinkexcluded</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1a013763101e3cb1fcad594c030e5472fe" kindref="member">CollisionCheckerBase::CheckCollision(KinBodyConstPtr,const std::vector&lt;KinBodyConstPtr&gt;&amp;,const std::vector&lt;KinBody::LinkConstPtr&gt;&amp;,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="102"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a0031940d50e5853bed26dd8f37eeb9d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(const RAY &amp;ray, KinBody::LinkConstPtr plink, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound">RAY</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1a0031940d50e5853bed26dd8f37eeb9d6" kindref="member">CollisionCheckerBase::CheckCollision(const RAY&amp;,KinBody::LinkConstPtr,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="105"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a91d971fb7be4e4b653fd02ee9bd6528c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(const RAY &amp;ray, KinBodyConstPtr pbody, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound">RAY</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1a91d971fb7be4e4b653fd02ee9bd6528c" kindref="member">CollisionCheckerBase::CheckCollision(const RAY&amp;,KinBodyConstPtr,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a4c0906fc2d591ac8940c55ad5a16969f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(const RAY &amp;ray, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound">RAY</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1a4c0906fc2d591ac8940c55ad5a16969f" kindref="member">CollisionCheckerBase::CheckCollision(const RAY&amp;,CollisionReportPtr)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="111"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a5e1f41d8d334da4d500a4cc107bfb696" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckSelfCollision</definition>
        <argsstring>(KinBodyConstPtr pbody, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckSelfCollision</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1a5e1f41d8d334da4d500a4cc107bfb696" kindref="member">CollisionCheckerBase::CheckSelfCollision</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="114"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a04548c3dc0b848f82c493a27ce85aedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>boost::shared_ptr&lt; void &gt;</type>
        <definition>virtual boost::shared_ptr&lt;void&gt; RegisterCollisionCallback</definition>
        <argsstring>(const CollisionCallbackFn &amp;callback)=0</argsstring>
        <name>RegisterCollisionCallback</name>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1EnvironmentBase_1a28e410489b8d769bfc03a29283beff59" kindref="member">CollisionCallbackFn</ref> &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a collision callback.</para><para>Whenever a collision is detected between between bodies during a CheckCollision call or physics simulation, the callback is called. The callback should return an action specifying how the collision should be handled: <bold>action = callback(CollisionReport,bool IsCalledFromPhysicsEngine)</bold> <simplesect kind="return"><para>a handle to the registration, once the handle loses scope, the callback is unregistered </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="124"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1af5c319a9f6a30e2dbc270ddb33199ffa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool HasRegisteredCollisionCallbacks</definition>
        <argsstring>() const =0</argsstring>
        <name>HasRegisteredCollisionCallbacks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="125"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a9333624d7ad9c3bc97f68bbe80d73f0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void GetRegisteredCollisionCallbacks</definition>
        <argsstring>(std::list&lt; CollisionCallbackFn &gt; &amp;) const =0</argsstring>
        <name>GetRegisteredCollisionCallbacks</name>
        <param>
          <type>std::list&lt; <ref refid="classOpenRAVE_1_1EnvironmentBase_1a28e410489b8d769bfc03a29283beff59" kindref="member">CollisionCallbackFn</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="126"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>3D plotting methods.</header>
      <description><para><anchor id="_1amgrp17df1b1b7c6672ea6063fd55d8c517c4"/> <anchor id="classOpenRAVE_1_1EnvironmentBase_1env_plotting"/> </para></description>
      <memberdef kind="typedef" id="classOpenRAVE_1_1EnvironmentBase_1acb298cf75a95a9dcfdc2bfccd7321413" prot="public" static="no">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref> <ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">GraphHandlePtr</ref></type>
        <definition>typedef OpenRAVE::GraphHandlePtr GraphHandlePtr RAVE_DEPRECATED</definition>
        <argsstring></argsstring>
        <name>RAVE_DEPRECATED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>非推奨</xreftitle><xrefdescription><para>(10/11/05) </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="462" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a390a0a4590d91f0994d6bf2781688266" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr plot3</definition>
        <argsstring>(const float *ppoints, int numPoints, int stride, float fPointSize, const RaveVector&lt; float &gt; &amp;color=RaveVector&lt; float &gt;(1, 0.5, 0.5, 1), int drawstyle=0)=0</argsstring>
        <name>plot3</name>
        <param>
          <type>const float *</type>
          <declname>ppoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fPointSize</declname>
        </param>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>color</declname>
          <defval>RaveVector&lt; float &gt;(1, 0.5, 0.5, 1)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>drawstyle</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Plot a point cloud with one color. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ppoints</parametername>
</parameternamelist>
<parameterdescription>
<para>array of points </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>number of points to plot </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>stride in bytes to next point, ie: nextpoint = (float*)((char*)ppoints+stride) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fPointSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of a point in pixels </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>the rgb color of the point. The last component of the color is used for alpha blending </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drawstyle</parametername>
</parameternamelist>
<parameterdescription>
<para>if 0 will draw pixels. if 1, will draw 3D spheres </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="473"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a367a6d07f961f2ed0a48378c7dea2336" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr plot3</definition>
        <argsstring>(const float *ppoints, int numPoints, int stride, float fPointSize, const float *colors, int drawstyle=0, bool bhasalpha=false)=0</argsstring>
        <name>plot3</name>
        <param>
          <type>const float *</type>
          <declname>ppoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fPointSize</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>colors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>drawstyle</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bhasalpha</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>. Plots 3D points with individual colors. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>Arguments same as plot3 with one color, except has an individual color for every point <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colors</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of rgb colors of size numPoints where each channel is in [0,1]. colors+(bhasalpha?4:3) points to the second color. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>stride in bytes to next point, ie: nextpoint = (float*)((char*)ppoints+stride) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drawstyle</parametername>
</parameternamelist>
<parameterdescription>
<para>if 0 will draw pixels. if 1, will draw 3D spherse </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bhasalpha</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, then each color consists of 4 values with the last value being the alpha of the point (1 means opaque). If false, then colors is 3 values. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="484"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a378e5e874d3a39868cd787e5936cf7fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawlinestrip</definition>
        <argsstring>(const float *ppoints, int numPoints, int stride, float fwidth, const RaveVector&lt; float &gt; &amp;color=RaveVector&lt; float &gt;(1, 0.5, 0.5, 1))=0</argsstring>
        <name>drawlinestrip</name>
        <param>
          <type>const float *</type>
          <declname>ppoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fwidth</declname>
        </param>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>color</declname>
          <defval>RaveVector&lt; float &gt;(1, 0.5, 0.5, 1)</defval>
        </param>
        <briefdescription>
<para>Draws a series of connected lines with one color. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>stride in bytes to next point, ie: nextpoint = (float*)((char*)ppoints+stride) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>the rgb color of the point. The last component of the color is used for alpha blending </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="491"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ac1aba9c68455f30fe87d62624a31b1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawlinestrip</definition>
        <argsstring>(const float *ppoints, int numPoints, int stride, float fwidth, const float *colors)=0</argsstring>
        <name>drawlinestrip</name>
        <param>
          <type>const float *</type>
          <declname>ppoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fwidth</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
<para>Draws a series of connected lines with individual colors. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>stride in bytes to next point, ie: nextpoint = (float*)((char*)ppoints+stride) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="497"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a4ad6149f9edca071a45a8d05f5713ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawlinelist</definition>
        <argsstring>(const float *ppoints, int numPoints, int stride, float fwidth, const RaveVector&lt; float &gt; &amp;color=RaveVector&lt; float &gt;(1, 0.5, 0.5, 1))=0</argsstring>
        <name>drawlinelist</name>
        <param>
          <type>const float *</type>
          <declname>ppoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fwidth</declname>
        </param>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>color</declname>
          <defval>RaveVector&lt; float &gt;(1, 0.5, 0.5, 1)</defval>
        </param>
        <briefdescription>
<para>Draws a list of individual lines, each specified by a succeeding pair of points. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>stride in bytes to next point, ie: nextpoint = (float*)((char*)ppoints+stride) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>the rgb color of the point. The last component of the color is used for alpha blending. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="504"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a6b14130da89871c94465f94aed704f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawlinelist</definition>
        <argsstring>(const float *ppoints, int numPoints, int stride, float fwidth, const float *colors)=0</argsstring>
        <name>drawlinelist</name>
        <param>
          <type>const float *</type>
          <declname>ppoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fwidth</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
<para>Draws a list of individual lines, each specified by a succeeding pair of points. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>stride in bytes to next point, ie: nextpoint = (float*)((char*)ppoints+stride) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="510"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a3f00f299110fe455e0c4df096695b985" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawarrow</definition>
        <argsstring>(const RaveVector&lt; float &gt; &amp;p1, const RaveVector&lt; float &gt; &amp;p2, float fwidth, const RaveVector&lt; float &gt; &amp;color=RaveVector&lt; float &gt;(1, 0.5, 0.5, 1))=0</argsstring>
        <name>drawarrow</name>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fwidth</declname>
        </param>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>color</declname>
          <defval>RaveVector&lt; float &gt;(1, 0.5, 0.5, 1)</defval>
        </param>
        <briefdescription>
<para>Draws an arrow p1 is start, p2 is finish. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>the rgb color of the point. The last component of the color is used for alpha blending. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="516"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a97ad30e79fe363aa5cbda928b4edee37" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawbox</definition>
        <argsstring>(const RaveVector&lt; float &gt; &amp;vpos, const RaveVector&lt; float &gt; &amp;vextents)=0</argsstring>
        <name>drawbox</name>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>vpos</declname>
        </param>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>vextents</declname>
        </param>
        <briefdescription>
<para>Draws a box. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>extents are half the width, height, and depth of the box <simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="522"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a11affcfff03b7440e0fbff2b1199a3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawplane</definition>
        <argsstring>(const RaveTransform&lt; float &gt; &amp;tplane, const RaveVector&lt; float &gt; &amp;vextents, const boost::multi_array&lt; float, 3 &gt; &amp;vtexture)=0</argsstring>
        <name>drawplane</name>
        <param>
          <type>const RaveTransform&lt; float &gt; &amp;</type>
          <declname>tplane</declname>
        </param>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>vextents</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; float, 3 &gt; &amp;</type>
          <declname>vtexture</declname>
        </param>
        <briefdescription>
<para>Draws a textured plane. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tplane</parametername>
</parameternamelist>
<parameterdescription>
<para>describes the center of the plane. the zaxis of this coordinate is the normal of the plane </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vextents</parametername>
</parameternamelist>
<parameterdescription>
<para>the extents of the plane along the x and y directions (z is ignored) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtexture</parametername>
</parameternamelist>
<parameterdescription>
<para>a 3D array specifying height x width x color (the color dimension can be 1, 3, or 4 (for alpha blending)) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="530"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a427595245f33d750257f4410f8dcea5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawtrimesh</definition>
        <argsstring>(const float *ppoints, int stride, const int *pIndices, int numTriangles, const RaveVector&lt; float &gt; &amp;color)=0</argsstring>
        <name>drawtrimesh</name>
        <param>
          <type>const float *</type>
          <declname>ppoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>pIndices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numTriangles</declname>
        </param>
        <param>
          <type>const RaveVector&lt; float &gt; &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="532"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ac94bdee4f1ea190eb88bdbff026a35d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a11bae0ab3a7dd29755f7af2e5376c47d" kindref="member">OpenRAVE::GraphHandlePtr</ref></type>
        <definition>virtual OpenRAVE::GraphHandlePtr drawtrimesh</definition>
        <argsstring>(const float *ppoints, int stride, const int *pIndices, int numTriangles, const boost::multi_array&lt; float, 2 &gt; &amp;colors)=0</argsstring>
        <name>drawtrimesh</name>
        <param>
          <type>const float *</type>
          <declname>ppoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>pIndices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numTriangles</declname>
        </param>
        <param>
          <type>const boost::multi_array&lt; float, 2 &gt; &amp;</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
<para>Draws a triangle mesh, each vertices of each triangle should be counter-clockwise. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ppoints</parametername>
</parameternamelist>
<parameterdescription>
<para>- array of 3D points </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>stride in bytes to next point, ie: nextpoint = (float*)((char*)ppoints+stride) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>If not NULL, zero-based indices into the points for every triangle. pIndices should be of size numTriangles. If pIndices is NULL, ppoints is assumed to contain numTriangles*3 points and triangles will be rendered in list order. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color of the triangle. The last component of the color is used for alpha blending </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>handle to plotted points, graph is removed when handle is destroyed (goes out of scope). This requires the user to always store the handle in a persistent variable if the plotted graphics are to remain on the viewer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="543"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Physics and Simulation</header>
      <description><para><anchor id="_1amgrp989eadcf88740d0033db2c36bbbdd040"/> </para></description>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a4b682d62526e5840d8fdc25343ee563c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SetPhysicsEngine</definition>
        <argsstring>(PhysicsEngineBasePtr physics)=0</argsstring>
        <name>SetPhysicsEngine</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a1f7cd9b111d097614987d789deaf960e" kindref="member">PhysicsEngineBasePtr</ref></type>
          <declname>physics</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the physics engine, disabled by default <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>physics</parametername>
</parameternamelist>
<parameterdescription>
<para>the engine to set, if NULL, environment sets an dummy physics engine </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a35c7646815b726666dde070c3bba6da0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a1f7cd9b111d097614987d789deaf960e" kindref="member">PhysicsEngineBasePtr</ref></type>
        <definition>virtual PhysicsEngineBasePtr GetPhysicsEngine</definition>
        <argsstring>() const =0</argsstring>
        <name>GetPhysicsEngine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="134"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aebf2566ccd76644b0040f01e70d2c189" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void StepSimulation</definition>
        <argsstring>(dReal timeStep)=0</argsstring>
        <name>StepSimulation</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>timeStep</declname>
        </param>
        <briefdescription>
<para>Makes one simulation time step. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>Can be called manually by the user inside planners. Keep in mind that the internal simulation thread also calls this function periodically. See <ref refid="architecture__concepts_1arch_simulation" kindref="member">Simulation Thread</ref> for more about the simulation thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a4e00e5f00d51ae10aa6bc017f827fea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void StartSimulation</definition>
        <argsstring>(dReal fDeltaTime, bool bRealTime=true)=0</argsstring>
        <name>StartSimulation</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>fDeltaTime</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bRealTime</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Start the internal simulation thread. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>Resets simulation time to 0. See <ref refid="architecture__concepts_1arch_simulation" kindref="member">Simulation Thread</ref> for more about the simulation thread.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fDeltaTime</parametername>
</parameternamelist>
<parameterdescription>
<para>the delta step to take in simulation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bRealTime</parametername>
</parameternamelist>
<parameterdescription>
<para>if false will call SimulateStep as fast as possible, otherwise will time the simulate step calls so that simulation progresses with real system time. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="148"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a2fcaf7d48ec497898ad0ef0c5a3eb89b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void StopSimulation</definition>
        <argsstring>()=0</argsstring>
        <name>StopSimulation</name>
        <briefdescription>
<para>Stops the internal physics loop, stops calling SimulateStep for all modules. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="architecture__concepts_1arch_simulation" kindref="member">Simulation Thread</ref> for more about the simulation thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="153"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a0267abbf0177d8ee2570c6a57b59cc39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IsSimulationRunning</definition>
        <argsstring>() const =0</argsstring>
        <name>IsSimulationRunning</name>
        <briefdescription>
<para>Return true if inner simulation loop is executing. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="architecture__concepts_1arch_simulation" kindref="member">Simulation Thread</ref> for more about the simulation thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="158"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aa9b102e35855f8dfd216e282e179fe3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>uint64_t</type>
        <definition>virtual uint64_t GetSimulationTime</definition>
        <argsstring>()=0</argsstring>
        <name>GetSimulationTime</name>
        <briefdescription>
<para>Return simulation time since the start of the environment (in microseconds). <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>See <ref refid="architecture__concepts_1arch_simulation" kindref="member">Simulation Thread</ref> for more about the simulation thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="163"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Object Setting and Querying</header>
      <description><para><anchor id="_1amgrpaf76c21bb2575e8baa8ec7b09e379de9"/> <anchor id="classOpenRAVE_1_1EnvironmentBase_1env_objects"/> </para></description>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a979950f27af5a2ce3d8b622cd98b33f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void AddKinBody</definition>
        <argsstring>(KinBodyPtr body, bool bAnonymous=false)=0</argsstring>
        <name>AddKinBody</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>body</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAnonymous</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a body to the environment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">body</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to an initialized body </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bAnonymous</parametername>
</parameternamelist>
<parameterdescription>
<para>if true and there exists a body/robot with the same name, will make body&apos;s name unique </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Throw if body is invalid or already added </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="325"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ae16bdfaaed85f17bffd696e17284d359" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void AddRobot</definition>
        <argsstring>(RobotBasePtr robot, bool bAnonymous=false)=0</argsstring>
        <name>AddRobot</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
          <declname>robot</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAnonymous</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>add a robot to the environment </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">robot</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to an initialized robot </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bAnonymous</parametername>
</parameternamelist>
<parameterdescription>
<para>if true and there exists a body/robot with the same name, will make robot&apos;s name unique </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Throw if robot is invalid or already added </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="332"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ad1160d65f608b83f8830010a93ae2991" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void AddSensor</definition>
        <argsstring>(SensorBasePtr sensor, bool bAnonymous=false)=0</argsstring>
        <name>AddSensor</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1adb9a2496735bc0d80ced5a5d7dfb653b" kindref="member">SensorBasePtr</ref></type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAnonymous</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>registers the sensor with the environment and turns its power on. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to an initialized sensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bAnonymous</parametername>
</parameternamelist>
<parameterdescription>
<para>if true and there exists a sensor with the same name, will make sensor&apos;s name unique </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Throw if sensor is invalid or already added </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="339"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aff29a5df3c89628089351e9cb68b474e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void GetSensors</definition>
        <argsstring>(std::vector&lt; SensorBasePtr &gt; &amp;sensors) const =0</argsstring>
        <name>GetSensors</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1adb9a2496735bc0d80ced5a5d7dfb653b" kindref="member">SensorBasePtr</ref> &gt; &amp;</type>
          <declname>sensors</declname>
        </param>
        <briefdescription>
<para>Fill an array with all sensors loaded in the environment. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>The sensors come from the currently loaded robots and the explicitly added sensors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="344"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a00f7d94b59a27465a1153c064b25903e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool RemoveKinBody</definition>
        <argsstring>(KinBodyPtr body) RAVE_DEPRECATED=0</argsstring>
        <name>RemoveKinBody</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>非推奨</xreftitle><xrefdescription><para>(10/09/15) see <ref refid="classOpenRAVE_1_1EnvironmentBase_1add0aaa9d6ac1aaeb25b3c71b85a93e79" kindref="member">EnvironmentBase::Remove</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="347"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1add0aaa9d6ac1aaeb25b3c71b85a93e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Remove</definition>
        <argsstring>(InterfaceBasePtr obj)=0</argsstring>
        <name>Remove</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Removes a currently loaded interface from the environment. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>The function removes currently loaded bodies, robots, sensors, problems from the actively used interfaces of the environment. This does not destroy the interface, but it does remove all references managed. Some interfaces like problems have destroy methods that are called to signal unloading. Note that the active interfaces are different from the owned interfaces. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>interface to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the interface was successfully removed from the environment. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="357"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ad56e81b8f92ad253a7a15bfc3e022e9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>virtual KinBodyPtr GetKinBody</definition>
        <argsstring>(const std::string &amp;name) const =0</argsstring>
        <name>GetKinBody</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Query a body from its name. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>first <ref refid="classOpenRAVE_1_1KinBody" kindref="compound">KinBody</ref> (including robots) that matches with name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="361"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a44f7b20622f42251dcdec78911f0fb20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1adb9a2496735bc0d80ced5a5d7dfb653b" kindref="member">SensorBasePtr</ref></type>
        <definition>virtual SensorBasePtr GetSensor</definition>
        <argsstring>(const std::string &amp;name) const =0</argsstring>
        <name>GetSensor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Query a sensor from its name. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>first sensor that matches with name, note that sensors attached to robots have the robot name as a prefix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="365"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a97772e0635e9a310288a9a47977d81f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
        <definition>virtual RobotBasePtr GetRobot</definition>
        <argsstring>(const std::string &amp;name) const =0</argsstring>
        <name>GetRobot</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Query a robot from its name. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>first Robot that matches the name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="369"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a7d408bb4332225ed07ac388b13d11a59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void GetBodies</definition>
        <argsstring>(std::vector&lt; KinBodyPtr &gt; &amp;bodies) const =0</argsstring>
        <name>GetBodies</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref> &gt; &amp;</type>
          <declname>bodies</declname>
        </param>
        <briefdescription>
<para>Get all bodies loaded in the environment (including robots). <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">bodies</parametername>
</parameternamelist>
<parameterdescription>
<para>filled with all the bodies </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="373"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a11cfa598243a4e0a9ced2e18e32f5c14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void GetRobots</definition>
        <argsstring>(std::vector&lt; RobotBasePtr &gt; &amp;robots) const =0</argsstring>
        <name>GetRobots</name>
        <param>
          <type>std::vector&lt; <ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref> &gt; &amp;</type>
          <declname>robots</declname>
        </param>
        <briefdescription>
<para>Fill an array with all robots loaded in the environment. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="376"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ab1f4975774bc81e490b22698302a61fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void AddViewer</definition>
        <argsstring>(ViewerBasePtr pviewer)=0</argsstring>
        <name>AddViewer</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1af0d19499c5ac95f5e1ac60b29187d7c4" kindref="member">ViewerBasePtr</ref></type>
          <declname>pviewer</declname>
        </param>
        <briefdescription>
<para>adds a viewer to the environment </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Throw if body is invalid or already added </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="381"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a90f75894de7b1b01e9a2e16021ac3f7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool AttachViewer</definition>
        <argsstring>(ViewerBasePtr pnewviewer) RAVE_DEPRECATED</argsstring>
        <name>AttachViewer</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1af0d19499c5ac95f5e1ac60b29187d7c4" kindref="member">ViewerBasePtr</ref></type>
          <declname>pnewviewer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>非推奨</xreftitle><xrefdescription><para>(11/06/13) see AddViewer </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="384" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="384" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a422dc0ce03020fb713107d287510af83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1af0d19499c5ac95f5e1ac60b29187d7c4" kindref="member">ViewerBasePtr</ref></type>
        <definition>virtual ViewerBasePtr GetViewer</definition>
        <argsstring>(const std::string &amp;name=&quot;&quot;) const =0</argsstring>
        <name>GetViewer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Return a viewer with a particular name. </para>        </briefdescription>
        <detaileddescription>
<para>When no name is specified, the first loaded viewer is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="391"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aaabc93c6dca5c4a1362b20bddb5d1e14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>boost::shared_ptr&lt; boost::mutex::scoped_lock &gt;</type>
        <definition>virtual boost::shared_ptr&lt;boost::mutex::scoped_lock&gt; GetViewers</definition>
        <argsstring>(std::list&lt; ViewerBasePtr &gt; &amp;listViewers) const =0</argsstring>
        <name>GetViewers</name>
        <param>
          <type>std::list&lt; <ref refid="namespaceOpenRAVE_1af0d19499c5ac95f5e1ac60b29187d7c4" kindref="member">ViewerBasePtr</ref> &gt; &amp;</type>
          <declname>listViewers</declname>
        </param>
        <briefdescription>
<para>Returns a list of loaded viewers with a pointer to a lock preventing the list from being modified. </para>        </briefdescription>
        <detaileddescription>
<para>As long as the lock is held, the problems are guaranteed to stay loaded in the environment. <simplesect kind="return"><para>returns a pointer to a Lock. Destroying the shared_ptr will release the lock </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="397"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a58c19f8ad04b2a8b6341677420ad9b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void GetPublishedBodies</definition>
        <argsstring>(std::vector&lt; KinBody::BodyState &gt; &amp;vbodies)=0</argsstring>
        <name>GetPublishedBodies</name>
        <param>
          <type>std::vector&lt; <ref refid="classOpenRAVE_1_1KinBody_1_1BodyState" kindref="compound">KinBody::BodyState</ref> &gt; &amp;</type>
          <declname>vbodies</declname>
        </param>
        <briefdescription>
<para>Retrieve published bodies, completes even if environment is locked. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>Note that the pbody pointer might become invalid as soon as GetPublishedBodies returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="403"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a590ea693633476a7aa2bc1c79bff8549" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void UpdatePublishedBodies</definition>
        <argsstring>()=0</argsstring>
        <name>UpdatePublishedBodies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>updates the published bodies that viewers and other programs listening in on the environment see. For example, calling this function inside a planning loop allows the viewer to update the environment reflecting the status of the planner. Assumes that the physics are locked. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="409"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a9b293f0da231072d2e50a4a4e9299167" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
        <definition>virtual KinBodyPtr GetBodyFromEnvironmentId</definition>
        <argsstring>(int id)=0</argsstring>
        <name>GetBodyFromEnvironmentId</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the corresponding body from its unique network id. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="412"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a19e34289d58ae5adeabd8fd431986dd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Triangulate</definition>
        <argsstring>(KinBody::Link::TRIMESH &amp;trimesh, KinBodyConstPtr pbody)=0</argsstring>
        <name>Triangulate</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1_1Link_1_1TRIMESH" kindref="compound">KinBody::Link::TRIMESH</ref> &amp;</type>
          <declname>trimesh</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <briefdescription>
<para>Triangulation of the body including its current transformation. trimesh will be appended the new data. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">trimesh</parametername>
</parameternamelist>
<parameterdescription>
<para>- The output triangle mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">body</parametername>
</parameternamelist>
<parameterdescription>
<para>body the triangulate </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Throw if failed to add anything </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="419"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a9773d98d124c6fcbfbcc1aa47ee4967e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void TriangulateScene</definition>
        <argsstring>(KinBody::Link::TRIMESH &amp;trimesh, SelectionOptions options, const std::string &amp;selectname)=0</argsstring>
        <name>TriangulateScene</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1_1Link_1_1TRIMESH" kindref="compound">KinBody::Link::TRIMESH</ref> &amp;</type>
          <declname>trimesh</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abee" kindref="member">SelectionOptions</ref></type>
          <declname>options</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>selectname</declname>
        </param>
        <briefdescription>
<para>General triangulation of the whole scene. <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">trimesh</parametername>
</parameternamelist>
<parameterdescription>
<para>- The output triangle mesh. The new triangles are appended to the existing triangles! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>- Controlls what to triangulate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selectname</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the body used in options </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Throw if failed to add anything </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="427"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <description><para><anchor id="_1amgrpd41d8cd98f00b204e9800998ecf8427e"/> </para></description>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a3b4f2f14db4059585686d8e457190df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SetDebugLevel</definition>
        <argsstring>(uint32_t level)=0</argsstring>
        <name>SetDebugLevel</name>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the debug level <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>0 for no debug, 1 - to print all debug messeges. Default value for release builds is 0, for debug builds it is 1 declaring variables with stdcall can be a little complex </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="555"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ae98f683ed7d55ce94108e98f46634a8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t GetDebugLevel</definition>
        <argsstring>() const =0</argsstring>
        <name>GetDebugLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="556"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOpenRAVE_1_1EnvironmentBase_1ab1ffd683cc01123429ba357658e77be1" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
        <definition>UserDataPtr __pUserData</definition>
        <argsstring></argsstring>
        <name>__pUserData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1EnvironmentBase_1a975ebca32c743c8530807758e7c46618" kindref="member">GetUserData</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="564" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenRAVE_1_1EnvironmentBase_1a7b1287276e4719d4858b6cd7aadf4e10" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int __nUniqueId</definition>
        <argsstring></argsstring>
        <name>__nUniqueId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>GetId </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="565" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a9dca6d574f53b7867ee206bbcce8aeff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EnvironmentBase</definition>
        <argsstring>()</argsstring>
        <name>EnvironmentBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="32" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2093" bodyend="2100"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a7c0e0c7c7dc15da85092a93a4cc93fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>~EnvironmentBase</definition>
        <argsstring>()</argsstring>
        <name>~EnvironmentBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="33" bodyfile="/home/pra3cob/openrave/src/libopenrave/libopenrave.cpp" bodystart="2102" bodyend="2105"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a84693792fa8cba90b312c0b1caf53716" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Destroy</definition>
        <argsstring>()=0</argsstring>
        <name>Destroy</name>
        <briefdescription>
<para>Releases all environment resources, should be always called when environment stops being used. </para>        </briefdescription>
        <detaileddescription>
<para>Removing all environment pointer might not be enough to destroy the environment resources. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="38"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a43a787400d2a563b9eee1a149225c18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Reset</definition>
        <argsstring>()=0</argsstring>
        <name>Reset</name>
        <briefdescription>
<para>Resets all objects of the scene (preserves all problems, planners). <bold>[multi-thread safe]</bold> </para>        </briefdescription>
        <detaileddescription>
<para>Do not call inside a SimulationStep call </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="43"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ab3a2d5e41d756988959d9f5cdccfe284" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SetUserData</definition>
        <argsstring>(UserDataPtr data)</argsstring>
        <name>SetUserData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>set user data </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="46" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a975ebca32c743c8530807758e7c46618" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
        <definition>virtual UserDataPtr GetUserData</definition>
        <argsstring>() const </argsstring>
        <name>GetUserData</name>
        <briefdescription>
<para>return the user custom data </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="50" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ae3e4c1172fe049726b74a1cb58e13a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
        <definition>virtual UserDataPtr GlobalState</definition>
        <argsstring>()=0</argsstring>
        <name>GlobalState</name>
        <briefdescription>
<para>Returns the <ref refid="namespaceOpenRAVE" kindref="compound">OpenRAVE</ref> global state, used for initializing plugins. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="55"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a86cc388f010ecee390ea6eadedb238e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void OwnInterface</definition>
        <argsstring>(InterfaceBasePtr pinterface)=0</argsstring>
        <name>OwnInterface</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <briefdescription>
<para>Environment will own the interface until <ref refid="classOpenRAVE_1_1EnvironmentBase_1a84693792fa8cba90b312c0b1caf53716" kindref="member">EnvironmentBase::Destroy</ref> is called. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="58"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a714c39fcfdcdf7f096335896c998b30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void DisownInterface</definition>
        <argsstring>(InterfaceBasePtr pinterface)=0</argsstring>
        <name>DisownInterface</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a0c35179adf3473a44ad9b4436e12e088" kindref="member">InterfaceBasePtr</ref></type>
          <declname>pinterface</declname>
        </param>
        <briefdescription>
<para>Remove ownership of the interface. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="61"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aa3144d0f14a2da063a5dfde496941c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
        <definition>virtual EnvironmentBasePtr CloneSelf</definition>
        <argsstring>(int options)=0</argsstring>
        <name>CloneSelf</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Create and return a clone of the current environment. </para>        </briefdescription>
        <detaileddescription>
<para>Clones do not share any memory or resource between each other. or their parent making them ideal for performing separte planning experiments while keeping the parent environment unchanged. By default a clone only copies the collision checkers and physics engine. When bodies are cloned, the unique ids are preserved across environments (each body can be referenced with its id in both environments). The attached and grabbed bodies of each body/robot are also copied to the new environment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of <ref refid="namespaceOpenRAVE_1a16bea31a72c441a002538eac01a118f2" kindref="member">CloningOptions</ref> describing what is actually cloned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An environment of the same type as this environment containing the copied information. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aa5e2d9fb5347f1aff0b726279b98b130" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int AddModule</definition>
        <argsstring>(ModuleBasePtr module, const std::string &amp;cmdargs)=0</argsstring>
        <name>AddModule</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref></type>
          <declname>module</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmdargs</declname>
        </param>
        <briefdescription>
<para>Load a new module, need to Lock if calling outside simulation thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="431"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a894143f07e4d22cba8a79aec3e9eb4d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int LoadProblem</definition>
        <argsstring>(ModuleBasePtr module, const std::string &amp;cmdargs)</argsstring>
        <name>LoadProblem</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref></type>
          <declname>module</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmdargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="433" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="433" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a3d0482313a9ef3be17b91495f2fa9043" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool RemoveProblem</definition>
        <argsstring>(ModuleBasePtr prob) RAVE_DEPRECATED=0</argsstring>
        <name>RemoveProblem</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref></type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>非推奨</xreftitle><xrefdescription><para>(10/09/15) see <ref refid="classOpenRAVE_1_1EnvironmentBase_1add0aaa9d6ac1aaeb25b3c71b85a93e79" kindref="member">EnvironmentBase::Remove</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="438"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1ac571ddc6ccffc3b7cb3bf345f8d29b78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>boost::shared_ptr&lt; void &gt;</type>
        <definition>virtual boost::shared_ptr&lt;void&gt; GetModules</definition>
        <argsstring>(std::list&lt; ModuleBasePtr &gt; &amp;listModules) const =0</argsstring>
        <name>GetModules</name>
        <param>
          <type>std::list&lt; <ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref> &gt; &amp;</type>
          <declname>listModules</declname>
        </param>
        <briefdescription>
<para>Returns a list of loaded problems with a pointer to a lock preventing the list from being modified. </para>        </briefdescription>
        <detaileddescription>
<para>As long as the lock is held, the problems are guaranteed to stay loaded in the environment. <simplesect kind="return"><para>returns a pointer to a Lock. Destroying the shared_ptr will release the lock </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="444"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1aea33763b1ece23f17dd09d709b3d4f88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>boost::shared_ptr&lt; void &gt;</type>
        <definition>virtual boost::shared_ptr&lt;void&gt; GetLoadedProblems</definition>
        <argsstring>(std::list&lt; ModuleBasePtr &gt; &amp;listModules) const </argsstring>
        <name>GetLoadedProblems</name>
        <param>
          <type>std::list&lt; <ref refid="namespaceOpenRAVE_1a8f388daa26e3d70da4f292f61554a4cd" kindref="member">ModuleBasePtr</ref> &gt; &amp;</type>
          <declname>listModules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="446" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="446" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1a5279da67a9256d95ca7e1140d49af724" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceOpenRAVE_1aad17188f9ff53a4373ef77ecad831ed1" kindref="member">EnvironmentMutex</ref> &amp;</type>
        <definition>virtual EnvironmentMutex&amp; GetMutex</definition>
        <argsstring>() const =0</argsstring>
        <name>GetMutex</name>
        <briefdescription>
<para>Return the global environment mutex used to protect environment information access in multi-threaded environments. </para>        </briefdescription>
        <detaileddescription>
<para>Accessing environment body information and adding/removing bodies or changing any type of scene property should have the environment lock acquired. Once the environment is locked, the user is guaranteed that nnothing will change in the environment. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="455"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1abb0d60e241f34412cb0e002ddbbbdb50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::string &amp;</type>
        <definition>virtual const std::string&amp; GetHomeDirectory</definition>
        <argsstring>() const RAVE_DEPRECATED=0</argsstring>
        <name>GetHomeDirectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>非推奨</xreftitle><xrefdescription><para>(10/09/23) see <ref refid="namespaceOpenRAVE_1a87ddf8748858681ffdbe520817899d7f" kindref="member">RaveGetHomeDirectory</ref> </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="547"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classOpenRAVE_1_1EnvironmentBase_1af386ad7515f485242895df543029d333" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* GetHash</definition>
        <argsstring>() const </argsstring>
        <name>GetHash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="560" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="560" bodyend="562"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Maintains a world state, which serves as the gateway to all functions offered through OpenRAVE. See <ref refid="architecture__concepts_1arch_environment" kindref="member">環境の概念</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/pra3cob/openrave/include/openrave/environment.h" line="30" bodyfile="/home/pra3cob/openrave/include/openrave/environment.h" bodystart="29" bodyend="566"/>
    <listofallmembers>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a7b1287276e4719d4858b6cd7aadf4e10" prot="private" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>__nUniqueId</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ab1ffd683cc01123429ba357658e77be1" prot="private" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>__pUserData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a979950f27af5a2ce3d8b622cd98b33f5" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>AddKinBody</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aa5e2d9fb5347f1aff0b726279b98b130" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>AddModule</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ae16bdfaaed85f17bffd696e17284d359" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>AddRobot</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ad1160d65f608b83f8830010a93ae2991" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>AddSensor</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ab1f4975774bc81e490b22698302a61fa" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>AddViewer</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a90f75894de7b1b01e9a2e16021ac3f7d" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>AttachViewer</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a032bda10dc517c50606781511da243d3" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ab286174aabc8a0e8b090b25963a531b3" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ac4d2da56daf4dbd95074bf2dd72974a9" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1abc391362f1952f15cd5a27fdd9b8a65d" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ab14f3598db6c781c3f2f6ef188fdeb3f" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a8c2bdc1a68281fb48214f3c141dc26a9" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a013763101e3cb1fcad594c030e5472fe" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0031940d50e5853bed26dd8f37eeb9d6" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a91d971fb7be4e4b653fd02ee9bd6528c" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a4c0906fc2d591ac8940c55ad5a16969f" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a5e1f41d8d334da4d500a4cc107bfb696" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CheckSelfCollision</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aa3144d0f14a2da063a5dfde496941c40" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CloneSelf</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a28e410489b8d769bfc03a29283beff59" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>CollisionCallbackFn</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a84693792fa8cba90b312c0b1caf53716" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>Destroy</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a714c39fcfdcdf7f096335896c998b30f" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>DisownInterface</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a3f00f299110fe455e0c4df096695b985" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawarrow</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a97ad30e79fe363aa5cbda928b4edee37" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawbox</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a4ad6149f9edca071a45a8d05f5713ecb" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawlinelist</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a6b14130da89871c94465f94aed704f1e" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawlinelist</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a378e5e874d3a39868cd787e5936cf7fa" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawlinestrip</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ac1aba9c68455f30fe87d62624a31b1a6" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawlinestrip</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a11affcfff03b7440e0fbff2b1199a3e3" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawplane</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a427595245f33d750257f4410f8dcea5e" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawtrimesh</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ac94bdee4f1ea190eb88bdbff026a35d3" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>drawtrimesh</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a9dca6d574f53b7867ee206bbcce8aeff" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>EnvironmentBase</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a7d408bb4332225ed07ac388b13d11a59" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetBodies</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a9b293f0da231072d2e50a4a4e9299167" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetBodyFromEnvironmentId</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a5ab1aa7fd5f2eb4b54dfac009c1e2804" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetCollisionChecker</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ae98f683ed7d55ce94108e98f46634a8b" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetDebugLevel</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1af386ad7515f485242895df543029d333" prot="protected" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetHash</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1abb0d60e241f34412cb0e002ddbbbdb50" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetHomeDirectory</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ad56e81b8f92ad253a7a15bfc3e022e9d" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetKinBody</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aea33763b1ece23f17dd09d709b3d4f88" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetLoadedProblems</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ac571ddc6ccffc3b7cb3bf345f8d29b78" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetModules</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a5279da67a9256d95ca7e1140d49af724" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetMutex</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a35c7646815b726666dde070c3bba6da0" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetPhysicsEngine</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a58c19f8ad04b2a8b6341677420ad9b6a" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetPublishedBodies</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a9333624d7ad9c3bc97f68bbe80d73f0f" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetRegisteredCollisionCallbacks</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a97772e0635e9a310288a9a47977d81f2" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetRobot</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a11cfa598243a4e0a9ced2e18e32f5c14" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetRobots</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a44f7b20622f42251dcdec78911f0fb20" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetSensor</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aff29a5df3c89628089351e9cb68b474e" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetSensors</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aa9b102e35855f8dfd216e282e179fe3c" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetSimulationTime</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a975ebca32c743c8530807758e7c46618" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetUserData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a422dc0ce03020fb713107d287510af83" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetViewer</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aaabc93c6dca5c4a1362b20bddb5d1e14" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GetViewers</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ae3e4c1172fe049726b74a1cb58e13a03" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>GlobalState</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1af5c319a9f6a30e2dbc270ddb33199ffa" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>HasRegisteredCollisionCallbacks</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0267abbf0177d8ee2570c6a57b59cc39" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>IsSimulationRunning</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0937ee944308cece16c98c035c40eb7c" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>Load</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0b1bc7ab475bb5cb1b1d7d0fb3c77b5d" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>LoadData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a894143f07e4d22cba8a79aec3e9eb4d9" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>LoadProblem</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a41363bcb26f68d8d25a0f3270558219e" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>LoadXMLData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a86cc388f010ecee390ea6eadedb238e8" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>OwnInterface</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a9895152450985d0a439b851d8ec78d7f" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ParseXMLData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a4a315546105f2114eb17188fd6cdcc93" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ParseXMLFile</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a390a0a4590d91f0994d6bf2781688266" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>plot3</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a367a6d07f961f2ed0a48378c7dea2336" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>plot3</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1acb298cf75a95a9dcfdc2bfccd7321413" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>RAVE_DEPRECATED</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aceef6e28746bc88931aa1c863c9478f6" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadInterfaceData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1abe79c2e2ad5f11d0c978269d737816dd" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadInterfaceURI</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a6aa2fca70fe18cb21cca37300669e025" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadInterfaceURI</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aeef0fe370eea0dc498db5116aac227af" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadInterfaceXMLData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ae5185403a61b5ba3bf92fa8513bc108c" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadInterfaceXMLFile</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ae0eaa5085685e141912cb4ebbcaef986" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadInterfaceXMLFile</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a5539fbbaefc308651ace750c133f3adf" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadKinBodyData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ab9fda0698f28bd76aefcad4f5ec4340a" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadKinBodyURI</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aaaa3f743069cc769e571f6e4ec3a732a" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadKinBodyURI</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1af8fde0c46dbd2c833936e7524ab54436" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadKinBodyXMLData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a047abcaeeef915017c37dd31d34866e8" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadKinBodyXMLFile</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ac70270fc6d4580cdaed771f5fe4d2795" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadKinBodyXMLFile</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a70931fb3eb67326208afdc830304a0b6" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadRobotData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ac8438f3ee051493a82ef78b92e9309f0" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadRobotURI</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a3f8502be4e272feaacbcb5b7434170be" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadRobotURI</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ab4facbc2ca164d0ffc5842fd898e682c" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadRobotXMLData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a93df9cb2035fd4489282e9fbe0f96b93" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadRobotXMLFile</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a43c0a583e42aa537aa889a6a637a4568" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadRobotXMLFile</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ab7ec023d9a5f3435ee25f2be462d74c6" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadTrimeshFile</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ac12a12b9515823e2371cd4c04b201a6c" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>ReadTrimeshURI</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a04548c3dc0b848f82c493a27ce85aedc" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>RegisterCollisionCallback</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a15f83ec6ea57058090ca016f06e63870" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>RegisterXMLReader</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1add0aaa9d6ac1aaeb25b3c71b85a93e79" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>Remove</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a00f7d94b59a27465a1153c064b25903e" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>RemoveKinBody</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a3d0482313a9ef3be17b91495f2fa9043" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>RemoveProblem</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a43a787400d2a563b9eee1a149225c18a" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>Reset</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a3ad623878891c5dc28f355d1cf348793" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>Save</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abee" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SelectionOptions</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a834baeb37724a8ec7c646f4dcb8068c4" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SetCollisionChecker</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a3b4f2f14db4059585686d8e457190df7" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SetDebugLevel</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a4b682d62526e5840d8fdc25343ee563c" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SetPhysicsEngine</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1ab3a2d5e41d756988959d9f5cdccfe284" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SetUserData</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeae9222060c4b6a63d6c03a7e0dc0a7f63" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SO_AllExceptBody</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeead38e0a7ef6a153e9c2ee4485c3166fc9" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SO_Body</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeea5448bc4aad573a961c579316fa195d92" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SO_BodyList</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeea6e30c932d2401d67c6dde8bae8e4f1a5" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SO_Everything</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeadcf69b48faa9d608415e8c26b6f7d39f" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SO_NoRobots</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeaf7938037970de9827745550a0574d1bd" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>SO_Robots</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a4e00e5f00d51ae10aa6bc017f827fea7" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>StartSimulation</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1aebf2566ccd76644b0040f01e70d2c189" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>StepSimulation</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a2fcaf7d48ec497898ad0ef0c5a3eb89b" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>StopSimulation</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeab6ffc5682ebdb916d35f360c3a2415a6" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>TO_AllExceptBody</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeabc35894adcdc121dc829954c3e896944" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>TO_Body</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeea5162d38d0e4ad32bae85b3245dd68ace" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>TO_Everything</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeeaafafd3156ee342957abf594bac470fbc" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>TO_Obstacles</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a0abab749a8f5d8ff38d62672ae03abeea230100aa4237789f54a92882a3bd834a" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>TO_Robots</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a19e34289d58ae5adeabd8fd431986dd5" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>Triangulate</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a25f0d55fb1a4d37b618e28df346dcafe" prot="public" virt="non-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>TriangulateOptions</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a9773d98d124c6fcbfbcc1aa47ee4967e" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>TriangulateScene</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a590ea693633476a7aa2bc1c79bff8549" prot="public" virt="pure-virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>UpdatePublishedBodies</name></member>
      <member refid="classOpenRAVE_1_1EnvironmentBase_1a7c0e0c7c7dc15da85092a93a4cc93fb9" prot="public" virt="virtual"><scope>OpenRAVE::EnvironmentBase</scope><name>~EnvironmentBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
