<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="namespaceOpenRAVE_1_1planningutils" kind="namespace">
    <compoundname>OpenRAVE::planningutils</compoundname>
    <innerclass refid="classOpenRAVE_1_1planningutils_1_1LineCollisionConstraint" prot="public">OpenRAVE::planningutils::LineCollisionConstraint</innerclass>
    <innerclass refid="classOpenRAVE_1_1planningutils_1_1SimpleDistanceMetric" prot="public">OpenRAVE::planningutils::SimpleDistanceMetric</innerclass>
    <innerclass refid="classOpenRAVE_1_1planningutils_1_1SimpleNeighborhoodSampler" prot="public">OpenRAVE::planningutils::SimpleNeighborhoodSampler</innerclass>
    <innerclass refid="classOpenRAVE_1_1planningutils_1_1ManipulatorIKGoalSampler" prot="public">OpenRAVE::planningutils::ManipulatorIKGoalSampler</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceOpenRAVE_1_1planningutils_1aac42ef7a026c90010ccca8b42e5ed203" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classOpenRAVE_1_1planningutils_1_1ManipulatorIKGoalSampler" kindref="compound">ManipulatorIKGoalSampler</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;ManipulatorIKGoalSampler&gt; ManipulatorIKGoalSamplerPtr</definition>
        <argsstring></argsstring>
        <name>ManipulatorIKGoalSamplerPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="147" bodyfile="/home/pra3cob/openrave/include/openrave/planningutils.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceOpenRAVE_1_1planningutils_1a3371dbb8b41bc0b2a79273dc3b90d375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API int</type>
        <definition>OPENRAVE_API int OpenRAVE::planningutils::JitterActiveDOF</definition>
        <argsstring>(RobotBasePtr robot, int nMaxIterations=5000, dReal fRand=0.03f, const PlannerBase::PlannerParameters::NeighStateFn &amp;neighstatefn=PlannerBase::PlannerParameters::NeighStateFn())</argsstring>
        <name>JitterActiveDOF</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
          <declname>robot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nMaxIterations</declname>
          <defval>5000</defval>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>fRand</declname>
          <defval>0.03f</defval>
        </param>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1PlannerBase_1_1PlannerParameters_1a602e68d3c6c25efa6539bbd8b5e02c39" kindref="member">PlannerBase::PlannerParameters::NeighStateFn</ref> &amp;</type>
          <declname>neighstatefn</declname>
          <defval><ref refid="classOpenRAVE_1_1PlannerBase_1_1PlannerParameters_1a602e68d3c6c25efa6539bbd8b5e02c39" kindref="member">PlannerBase::PlannerParameters::NeighStateFn</ref>()</defval>
        </param>
        <briefdescription>
<para>Jitters the active joint angles of the robot until it escapes collision. </para>        </briefdescription>
        <detaileddescription>
<para>Return 0 if jitter failed and robot is in collision, -1 if robot originally not in collision, 1 if jitter succeeded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1_1planningutils_1a1f782836180a0fb466ac0a852f234f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API bool</type>
        <definition>OPENRAVE_API bool OpenRAVE::planningutils::JitterTransform</definition>
        <argsstring>(KinBodyPtr pbody, float fJitter, int nMaxIterations=1000)</argsstring>
        <name>JitterTransform</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fJitter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nMaxIterations</declname>
          <defval>1000</defval>
        </param>
        <briefdescription>
<para>Jitters the transform of a body until it escapes collision. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1_1planningutils_1ab5e7f7405551cd5eb22e19e61d424a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>OPENRAVE_API void OpenRAVE::planningutils::VerifyTrajectory</definition>
        <argsstring>(PlannerBase::PlannerParametersConstPtr parameters, TrajectoryBaseConstPtr trajectory, dReal samplingstep=0.002)</argsstring>
        <name>VerifyTrajectory</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1PlannerBase_1ab566be29bf1d40d8631782886bb45bb0" kindref="member">PlannerBase::PlannerParametersConstPtr</ref></type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae4a194e7d8dcb23b1acad4ff9f84ad49" kindref="member">TrajectoryBaseConstPtr</ref></type>
          <declname>trajectory</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>samplingstep</declname>
          <defval>0.002</defval>
        </param>
        <briefdescription>
<para>validates a trajectory with respect to the planning constraints. </para>        </briefdescription>
        <detaileddescription>
<para>checks internal data structures and verifies that all trajectory via points do not violate joint position, velocity, and acceleration limits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trajectory</parametername>
</parameternamelist>
<parameterdescription>
<para>trajectory of points to be checked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>the planner parameters passed to the planner that returned the trajectory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samplingstep</parametername>
</parameternamelist>
<parameterdescription>
<para>If == 0, then will only test the supports points in trajectory-&gt;GetPoints(). If &gt; 0, then will sample the trajectory at this time interval. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classOpenRAVE_1_1openrave__exception" kindref="compound">openrave_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If the trajectory is invalid, will throw ORE_InconsistentConstraints. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1_1planningutils_1a164e0c7cc3c0c50d13573f72aa57f2dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>OPENRAVE_API void OpenRAVE::planningutils::RetimeActiveDOFTrajectory</definition>
        <argsstring>(TrajectoryBasePtr traj, RobotBasePtr robot, bool hastimestamps=false, dReal fmaxvelmult=1, const std::string &amp;plannername=&quot;&quot;)</argsstring>
        <name>RetimeActiveDOFTrajectory</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" kindref="member">TrajectoryBasePtr</ref></type>
          <declname>traj</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a5a9955dc6058f09c4462952478dfcf58" kindref="member">RobotBasePtr</ref></type>
          <declname>robot</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hastimestamps</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>fmaxvelmult</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>plannername</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>retimes the trajectory points consisting of active dofs of the robot </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>traj</parametername>
</parameternamelist>
<parameterdescription>
<para>the trajectory that initially contains the input points, it is modified to contain the new re-timed data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>robot</parametername>
</parameternamelist>
<parameterdescription>
<para>use the robot&apos;s active dofs to initialize the trajectory space </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plannername</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the planner to use to retime. If empty, will use the default trajectory re-timer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hastimestamps</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, use the already initialized timestamps of the trajectory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1_1planningutils_1a0560d78f2da8b7cee9e9106787ec5dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>OPENRAVE_API void OpenRAVE::planningutils::RetimeAffineTrajectory</definition>
        <argsstring>(TrajectoryBasePtr traj, const std::vector&lt; dReal &gt; &amp;maxvelocities, const std::vector&lt; dReal &gt; &amp;maxaccelerations, bool hastimestamps=false, const std::string &amp;plannername=&quot;&quot;)</argsstring>
        <name>RetimeAffineTrajectory</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" kindref="member">TrajectoryBasePtr</ref></type>
          <declname>traj</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt; &amp;</type>
          <declname>maxvelocities</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref> &gt; &amp;</type>
          <declname>maxaccelerations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hastimestamps</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>plannername</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>retimes the trajectory points consisting of affine dofs </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>traj</parametername>
</parameternamelist>
<parameterdescription>
<para>the trajectory that initially contains the input points, it is modified to contain the new re-timed data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxvelocities</parametername>
</parameternamelist>
<parameterdescription>
<para>the max velocities of each dof </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxaccelerations</parametername>
</parameternamelist>
<parameterdescription>
<para>the max acceleration of each dof </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plannername</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the planner to use to retime. If empty, will use the default trajectory re-timer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hastimestamps</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, use the already initialized timestamps of the trajectory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1_1planningutils_1ab19429a9a082977dc3300a648dd4a93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API void</type>
        <definition>OPENRAVE_API void OpenRAVE::planningutils::ConvertTrajectorySpecification</definition>
        <argsstring>(TrajectoryBasePtr traj, const ConfigurationSpecification &amp;spec)</argsstring>
        <name>ConvertTrajectorySpecification</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" kindref="member">TrajectoryBasePtr</ref></type>
          <declname>traj</declname>
        </param>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1ConfigurationSpecification" kindref="compound">ConfigurationSpecification</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>convert the trajectory and all its points to a new specification </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceOpenRAVE_1_1planningutils_1abcb19942c53d53b351156386767bd5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPENRAVE_API <ref refid="namespaceOpenRAVE_1aa3c159b394f2e4ec46ac49416a2acf17" kindref="member">TrajectoryBasePtr</ref></type>
        <definition>OPENRAVE_API TrajectoryBasePtr OpenRAVE::planningutils::ReverseTrajectory</definition>
        <argsstring>(TrajectoryBaseConstPtr traj)</argsstring>
        <name>ReverseTrajectory</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae4a194e7d8dcb23b1acad4ff9f84ad49" kindref="member">TrajectoryBaseConstPtr</ref></type>
          <declname>traj</declname>
        </param>
        <briefdescription>
<para>reverses the order of the trajectory waypoints and times. </para>        </briefdescription>
        <detaileddescription>
<para>Velocities are just negated and the new trajectory is not guaranteed to be executable or valid </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/pra3cob/openrave/include/openrave/planningutils.h" line="28"/>
  </compounddef>
</doxygen>
