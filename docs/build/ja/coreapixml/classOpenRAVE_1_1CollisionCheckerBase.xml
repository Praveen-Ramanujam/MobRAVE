<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classOpenRAVE_1_1CollisionCheckerBase" kind="class" prot="public">
    <compoundname>OpenRAVE::CollisionCheckerBase</compoundname>
    <basecompoundref refid="classOpenRAVE_1_1InterfaceBase" prot="public" virt="non-virtual">InterfaceBase</basecompoundref>
    <includes refid="collisionchecker_8h" local="no">collisionchecker.h</includes>
      <sectiondef kind="user-defined">
      <header>Collision specific functions.</header>
      <description><para><anchor id="_1amgrpef0faa32f592cc67b0a4ecf86076aa0d"/> Each function takes an optional pointer to a <ref refid="classOpenRAVE_1_1CollisionReport" kindref="compound">CollisionReport</ref> structure and returns true if collision occurs.</para><para><anchor id="classOpenRAVE_1_1CollisionCheckerBase_1collision_checking"/> </para></description>
      <memberdef kind="friend" id="classOpenRAVE_1_1CollisionCheckerBase_1a05156daee84eb0b5dd4b0802dae57fa6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class KinBody</definition>
        <argsstring></argsstring>
        <name>KinBody</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="208" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a032bda10dc517c50606781511da243d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBodyConstPtr pbody1, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody1</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>checks collision of a body and a scene. Attached bodies are respected. If CO_ActiveDOFs is set, will only check affected links of the body. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="130"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1ab286174aabc8a0e8b090b25963a531b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBodyConstPtr pbody1, KinBodyConstPtr pbody2, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody1</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody2</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>checks collision between two bodies. Attached bodies are respected. If CO_ActiveDOFs is set, will only check affected links of the pbody1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1ac4d2da56daf4dbd95074bf2dd72974a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBody::LinkConstPtr plink, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>checks collision of a link and a scene. Attached bodies are ignored. CO_ActiveDOFs option is ignored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="136"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1abc391362f1952f15cd5a27fdd9b8a65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBody::LinkConstPtr plink1, KinBody::LinkConstPtr plink2, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink1</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink2</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>checks collision of two links. Attached bodies are ignored. CO_ActiveDOFs option is ignored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1ab14f3598db6c781c3f2f6ef188fdeb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBody::LinkConstPtr plink, KinBodyConstPtr pbody, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>checks collision of a link and a body. Attached bodies for pbody are respected. CO_ActiveDOFs option is ignored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="142"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a8c2bdc1a68281fb48214f3c141dc26a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBody::LinkConstPtr plink, const std::vector&lt; KinBodyConstPtr &gt; &amp;vbodyexcluded, const std::vector&lt; KinBody::LinkConstPtr &gt; &amp;vlinkexcluded, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref> &gt; &amp;</type>
          <declname>vbodyexcluded</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref> &gt; &amp;</type>
          <declname>vlinkexcluded</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>checks collision of a link and a scene. Attached bodies are ignored. CO_ActiveDOFs option is ignored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="145"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a013763101e3cb1fcad594c030e5472fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(KinBodyConstPtr pbody, const std::vector&lt; KinBodyConstPtr &gt; &amp;vbodyexcluded, const std::vector&lt; KinBody::LinkConstPtr &gt; &amp;vlinkexcluded, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref> &gt; &amp;</type>
          <declname>vbodyexcluded</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref> &gt; &amp;</type>
          <declname>vlinkexcluded</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>checks collision of a body and a scene. Attached bodies are respected. If CO_ActiveDOFs is set, will only check affected links of pbody. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="148"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a0031940d50e5853bed26dd8f37eeb9d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(const RAY &amp;ray, KinBody::LinkConstPtr plink, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound">RAY</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>plink</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>Check collision with a link and a ray with a specified length. CO_ActiveDOFs option is ignored. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>holds the origin and direction. The length of the ray is the length of the direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plink</parametername>
</parameternamelist>
<parameterdescription>
<para>the link to collide with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">report</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] collision report to be filled with data about the collision. If a body was hit, <ref refid="classOpenRAVE_1_1CollisionReport_1a81562e5e77f8d4ee032d8990e5e1741e" kindref="member">CollisionReport::plink1</ref> contains the hit link pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="155"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a91d971fb7be4e4b653fd02ee9bd6528c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(const RAY &amp;ray, KinBodyConstPtr pbody, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound">RAY</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>Check collision with a link and a ray with a specified length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>holds the origin and direction. The length of the ray is the length of the direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pbody</parametername>
</parameternamelist>
<parameterdescription>
<para>the link to collide with. If CO_ActiveDOFs is set, will only check affected links of the body. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">report</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] collision report to be filled with data about the collision. If a body was hit, <ref refid="classOpenRAVE_1_1CollisionReport_1a81562e5e77f8d4ee032d8990e5e1741e" kindref="member">CollisionReport::plink1</ref> contains the hit link pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="162"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a4c0906fc2d591ac8940c55ad5a16969f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckCollision</definition>
        <argsstring>(const RAY &amp;ray, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckCollision</name>
        <param>
          <type>const <ref refid="classOpenRAVE_1_1geometry_1_1ray" kindref="compound">RAY</ref> &amp;</type>
          <declname>ray</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>Check collision with a body and a ray with a specified length. CO_ActiveDOFs option is ignored. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ray</parametername>
</parameternamelist>
<parameterdescription>
<para>holds the origin and direction. The length of the ray is the length of the direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pbody</parametername>
</parameternamelist>
<parameterdescription>
<para>the kinbody to look for collisions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">report</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] collision report to be filled with data about the collision. If a body was hit, <ref refid="classOpenRAVE_1_1CollisionReport_1a81562e5e77f8d4ee032d8990e5e1741e" kindref="member">CollisionReport::plink1</ref> contains the hit link pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="169"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a253ffd76b6c58523ff7813a7e777cce0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool InitEnvironment</definition>
        <argsstring>()=0</argsstring>
        <name>InitEnvironment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called when environment sets this collision checker, checker assumes responsibility for <ref refid="classOpenRAVE_1_1KinBody_1a0a17ef574c66277ef313e5e56d6b9bbc" kindref="member">KinBody::_pCollisionData</ref> checker should also gather all current bodies in the environment and put them in its collision space </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="174"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1addd261b357621ad88f262f311792efb6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void DestroyEnvironment</definition>
        <argsstring>()=0</argsstring>
        <name>DestroyEnvironment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called when environment switches to a different collision checker engine has to clear/deallocate any memory associated with <ref refid="classOpenRAVE_1_1KinBody_1a0a17ef574c66277ef313e5e56d6b9bbc" kindref="member">KinBody::_pCollisionData</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="178"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a5e1f41d8d334da4d500a4cc107bfb696" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool CheckSelfCollision</definition>
        <argsstring>(KinBodyConstPtr pbody, CollisionReportPtr report=CollisionReportPtr())=0</argsstring>
        <name>CheckSelfCollision</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref></type>
          <declname>report</declname>
          <defval><ref refid="namespaceOpenRAVE_1ae3a01279d893036b26d4bb1b74d3ef0f" kindref="member">CollisionReportPtr</ref>()</defval>
        </param>
        <briefdescription>
<para>Checks self collision only with the links of the passed in body. </para>        </briefdescription>
        <detaileddescription>
<para>Links that are joined together are ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="183"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a70dbb6e0a6d0ed48a1cdc8a18b7e9d6b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void SetCollisionData</definition>
        <argsstring>(KinBodyPtr pbody, UserDataPtr data)</argsstring>
        <name>SetCollisionData</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type><ref refid="namespaceOpenRAVE_1aa02b5cd826890fa31fb80f0d469312d9" kindref="member">UserDataPtr</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="185" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1af79569a9b259e0c635bb3067ea9705a0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceOpenRAVE_1ae3e7611a64b7d4204203d69014f45fe8" kindref="member">CollisionCheckerBasePtr</ref></type>
        <definition>CollisionCheckerBasePtr shared_collisionchecker</definition>
        <argsstring>()</argsstring>
        <name>shared_collisionchecker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="189" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a6744c8192f44ad702df77f90feb1d9b9" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceOpenRAVE_1a3926e37e3bbc1c29da84fe6cea27d1fc" kindref="member">CollisionCheckerBaseConstPtr</ref></type>
        <definition>CollisionCheckerBaseConstPtr shared_collisionchecker_const</definition>
        <argsstring>() const </argsstring>
        <name>shared_collisionchecker_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="192" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1af386ad7515f485242895df543029d333" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* GetHash</definition>
        <argsstring>() const </argsstring>
        <name>GetHash</name>
        <reimplements refid="classOpenRAVE_1_1InterfaceBase_1abfb0be978f0f9899582785d67c4b3d40">GetHash</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="197" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="197" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a56c838c403f80a2dc81142e82550bb00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CollisionCheckerBase</definition>
        <argsstring>(EnvironmentBasePtr penv)</argsstring>
        <name>CollisionCheckerBase</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a652cd59d4cc9e3262d85e6776ec8ff9b" kindref="member">EnvironmentBasePtr</ref></type>
          <declname>penv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="96" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="96" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1ae61a39c48fb7fb39970286d986d9497f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~CollisionCheckerBase</definition>
        <argsstring>()</argsstring>
        <name>~CollisionCheckerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="98" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="98" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a41d4f0db9db82ee4517d5f375fea35f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool SetCollisionOptions</definition>
        <argsstring>(int collisionoptions)=0</argsstring>
        <name>SetCollisionOptions</name>
        <param>
          <type>int</type>
          <declname>collisionoptions</declname>
        </param>
        <briefdescription>
<para>Set basic collision options using the CollisionOptions enum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="107"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a0427686b93fdaf70674eb7d753fae48c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int GetCollisionOptions</definition>
        <argsstring>() const =0</argsstring>
        <name>GetCollisionOptions</name>
        <briefdescription>
<para>get the current collision options </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="110"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a85a0f261350f0edd38c29fe83d21ccec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SetTolerance</definition>
        <argsstring>(dReal tolerance)=0</argsstring>
        <name>SetTolerance</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a973ec569e405922437be98473d2aa6f8" kindref="member">dReal</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="112"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1af137ac3b8d17b51632c04a450d415003" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool InitKinBody</definition>
        <argsstring>(KinBodyPtr pbody)=0</argsstring>
        <name>InitKinBody</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1abdcbe7a0abc56f7fd090dbd298a5a44c" kindref="member">KinBodyPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <briefdescription>
<para>notified when a new body has been initialized in the environment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="115"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1a1217341e547ceb062850dc9d05f4f409" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Enable</definition>
        <argsstring>(KinBodyConstPtr pbody, bool bEnable) RAVE_DEPRECATED=0</argsstring>
        <name>Enable</name>
        <param>
          <type><ref refid="namespaceOpenRAVE_1a7ad9b63f36f8be408ec6e70ebe8130f7" kindref="member">KinBodyConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>非推奨</xreftitle><xrefdescription><para>(10/12/03) use </para></xrefdescription></xrefsect><simplesect kind="see"><para><ref refid="classOpenRAVE_1_1CollisionCheckerBase_1aad5eb39360dbde52e90efd9f2a466ab4" kindref="member">EnableLink</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="118"/>
      </memberdef>
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1aad5eb39360dbde52e90efd9f2a466ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool EnableLink</definition>
        <argsstring>(KinBody::LinkConstPtr pbody, bool bEnable)=0</argsstring>
        <name>EnableLink</name>
        <param>
          <type><ref refid="classOpenRAVE_1_1KinBody_1a99c416f979a09dfc6ef42fd62bd4e77e" kindref="member">KinBody::LinkConstPtr</ref></type>
          <declname>pbody</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enables or disables a link from being considered in collisions <simplesect kind="return"><para>true if operation succeeded </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classOpenRAVE_1_1CollisionCheckerBase_1affeafe65e7c4094f282d273dedbf069b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>InterfaceType</type>
        <definition>static InterfaceType GetInterfaceTypeStatic</definition>
        <argsstring>()</argsstring>
        <name>GetInterfaceTypeStatic</name>
        <briefdescription>
<para>return the static interface type this class points to (used for safe casting) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="102" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="102" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><bold>[interface]</bold> Responsible for all collision checking queries of the environment. <bold>If not specified, method is not multi-thread safe.</bold> See <ref refid="arch__collisionchecker" kindref="compound">Collision Checker Concepts</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="996">
        <label>CollisionCheckerBase</label>
        <link refid="classOpenRAVE_1_1CollisionCheckerBase"/>
        <childnode refid="997" relation="public-inheritance">
        </childnode>
      </node>
      <node id="997">
        <label>InterfaceBase</label>
        <link refid="classOpenRAVE_1_1InterfaceBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1000">
        <label>string</label>
        <childnode refid="1001" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1002">
        <label>map&lt; std::string, boost::shared_ptr&lt; InterfaceCommand &gt;, CaseInsensitiveCompare &gt;</label>
        <childnode refid="1000" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="998">
        <label>CollisionCheckerBase</label>
        <link refid="classOpenRAVE_1_1CollisionCheckerBase"/>
        <childnode refid="999" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1001">
        <label>basic_string&lt; char &gt;</label>
      </node>
      <node id="1003">
        <label>map&lt; std::string, XMLReadablePtr, CaseInsensitiveCompare &gt;</label>
        <childnode refid="1000" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="999">
        <label>InterfaceBase</label>
        <link refid="classOpenRAVE_1_1InterfaceBase"/>
        <childnode refid="1000" relation="usage">
          <edgelabel>__strpluginname</edgelabel>
          <edgelabel>__struri</edgelabel>
          <edgelabel>__strxmlid</edgelabel>
          <edgelabel>__description</edgelabel>
        </childnode>
        <childnode refid="1002" relation="usage">
          <edgelabel>__mapCommands</edgelabel>
        </childnode>
        <childnode refid="1003" relation="usage">
          <edgelabel>__mapReadableInterfaces</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/pra3cob/openrave/include/openrave/collisionchecker.h" line="94" bodyfile="/home/pra3cob/openrave/include/openrave/collisionchecker.h" bodystart="93" bodyend="209"/>
    <listofallmembers>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a22f4da10ed5f1c80a18f2bcd96776c1a" prot="protected" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>__description</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a032bda10dc517c50606781511da243d3" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1ab286174aabc8a0e8b090b25963a531b3" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1ac4d2da56daf4dbd95074bf2dd72974a9" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1abc391362f1952f15cd5a27fdd9b8a65d" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1ab14f3598db6c781c3f2f6ef188fdeb3f" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a8c2bdc1a68281fb48214f3c141dc26a9" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a013763101e3cb1fcad594c030e5472fe" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a0031940d50e5853bed26dd8f37eeb9d6" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a91d971fb7be4e4b653fd02ee9bd6528c" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a4c0906fc2d591ac8940c55ad5a16969f" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckCollision</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a5e1f41d8d334da4d500a4cc107bfb696" prot="protected" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CheckSelfCollision</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1aadffdb83bc22dcdd5dd50c27d1bb5496" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>Clone</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a56c838c403f80a2dc81142e82550bb00" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>CollisionCheckerBase</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1addd261b357621ad88f262f311792efb6" prot="protected" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>DestroyEnvironment</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a1217341e547ceb062850dc9d05f4f409" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>Enable</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1aad5eb39360dbde52e90efd9f2a466ab4" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>EnableLink</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a0427686b93fdaf70674eb7d753fae48c" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetCollisionOptions</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a1b571821be060055bf6f2474e12fa5a3" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetDescription</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a847c7f827694fd3db16f20b5669e1743" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetEnv</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1af386ad7515f485242895df543029d333" prot="private" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetHash</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1ab6da1a274144d2dae86c4414fdc00c8a" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetInterfaceType</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1affeafe65e7c4094f282d273dedbf069b" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetInterfaceTypeStatic</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a909d5f1a5ae6d3fbb73b69c26b3e6bb4" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetPluginName</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a948f97af111d83fad6ff054f88aaa214" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetReadableInterface</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a843c0a1f79a31b230bb85f265f97be6c" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetReadableInterfaces</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a155ad446997ca5823937f9c171c17021" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetURI</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a975ebca32c743c8530807758e7c46618" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetUserData</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1adebf2ecc7ec47f5d27229457e84cab87" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetXMLFilename</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a23e085422cc13cf058b9f9558a7d9de6" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>GetXMLId</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a253ffd76b6c58523ff7813a7e777cce0" prot="protected" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>InitEnvironment</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1af137ac3b8d17b51632c04a450d415003" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>InitKinBody</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a1505a042027909cb3c715713812d554f" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>InterfaceBase</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1af078e9e99c82cbd71d0bfa325438514e" prot="protected" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>InterfaceCommandFn</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a14a2c1d323f2f411a9b9eb1e14b99aca" prot="public" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>READERSMAP</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a840776899a1d3677582fc6ef87be6ef2" prot="protected" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>RegisterCommand</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a1293cda647f18fe751e66b910af52407" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>SendCommand</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a70dbb6e0a6d0ed48a1cdc8a18b7e9d6b" prot="protected" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>SetCollisionData</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a41d4f0db9db82ee4517d5f375fea35f4" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>SetCollisionOptions</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a9d548988a71fd50f890acdec255bdc17" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>SetDescription</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a85a0f261350f0edd38c29fe83d21ccec" prot="public" virt="pure-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>SetTolerance</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1ab3a2d5e41d756988959d9f5cdccfe284" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>SetUserData</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1aba2de87983f5e6ad881df19cc6198018" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>SetUserData</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1af79569a9b259e0c635bb3067ea9705a0" prot="protected" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>shared_collisionchecker</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1a6744c8192f44ad702df77f90feb1d9b9" prot="protected" virt="non-virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>shared_collisionchecker_const</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a1a70446e03a29c6c9a5650886027cd2e" prot="protected" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>UnregisterCommand</name></member>
      <member refid="classOpenRAVE_1_1CollisionCheckerBase_1ae61a39c48fb7fb39970286d986d9497f" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>~CollisionCheckerBase</name></member>
      <member refid="classOpenRAVE_1_1InterfaceBase_1a90ab55ffa15c68875747d2ac2458b8e1" prot="public" virt="virtual"><scope>OpenRAVE::CollisionCheckerBase</scope><name>~InterfaceBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
