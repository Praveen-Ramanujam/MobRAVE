nxtduemu -- A framework for emulating NXT digital sensors using an arduino.
    http://nxtduemu.googlecode.com/
Copyright 2010 Marcus Wanner
Licensed under the GPL; Code generated by sketchgen.py is in the public
domain and may be used in any way.


(This is a testing tool intended for library developers and advanced users)

This directory holds the files needed to test sensor support using an arduino.
It is useful if changes are being made to a sensor's class but the hardware is
not available for testing. It takes basic information about how each sensor
should behave according to its specifications and uses that to generate a
"sketch" which, when run on an arduino connected correctly, will approximately
emulate the sensor's behavior.

When the registers are queried, they will return either the data specified,
either a static value, rotating list of values, or a numerical sequence. The
data is switched at a configurable rate.

While this method relies pivotally on the accuracy of the sensor documentation
and its interpretation, I believe it is the best way go about testing sensors in
the absence of the actual hardware. It is also very cost-effective, the total
cost of a setup being about $30 for an arduino (if you don't already have one)
and a small sum for either a modified telephone jack or a sacrifical nxt sensor
or motor cable.

As always, it is possible to break your NXT by connecting it to anything, but I
have extensively tested the connections made below and find them to work very
well indeed. Here's how to hook up the sensor cable's wires:
NXT Pin 2/3 Black/red wire      > Arduino Ground Pin (doesn't matter which)
NXT Pin 5   Yellow wire (SCL)   > Arduino Analog Pin 5
NXT Pin 6   Blue wire   (SDA)   > Ardiono Analog Pin 4
Additionally, if you won't be powering the board with USB or something else:
NXT Pin 4   Green wire (+5v)    > Arduino "5V" Pin
Very simple, needing no additional components (for NXT hardware experts: the
arduino, as far as I can tell, has internal pull-up resistors so those are not
needed). If you have an Arduino Mega, you will need to remove the existing 10k
pull-up resistors on the board with a soldering iron and a steady hand (as they
are too small for the NXT's I2C subsystem) and possibly add an 82k resistor each
between the 5v pin and pins 4 and 5.

This directory contains sketchgen.py, which takes a specially-formatted python
file as input and writes an arduino sketch file of the same name (minus the
.py), which can be opened with the arduino software, uploaded, and run without
any further changes. The other python files contain the sketchgen.py input
information for various sensors.

Step-by-step Instructions for Testing a Sensor:
    1. Get a working arduino programming environment. Instructions on google.
    2. Wire up the board as detailed above. You will need to get inside a NXT
        sensor cable for this...the correct jack can be purchased from
        mindsensors.com, though I have had much success with a dremel and
        telephone jack.
    3. Run sketchgen.py with the filename for the sensor you want to test as
        an argument. If there is no description file for the sensor you want to
        test, you will need to follow the docs or use the existing files as
        examples.
    4. Open the directory/file created in the arduino software and upload it.
    5. You can now connect to the NXT with a control library (or run a program
        on the brick) and test just like the actual sensor was connected, except
        that you will need to look for the data patterns specified in the
        sensor's sketchgen.py input file instead of the ones that would come
        from a real sensor.

Initially, I have only made files for the sensors which I have (three of them,
to be exact), so the other ~15 supported ones are not represented here. If you
have some spare time and want to code an accurate emulation of one or more of
the sensors which do not yet have description files, I would be very grateful.

Note that the arduino code generated by this program is a good starting point
for an advanced sensor module using the IO of the arduino to talk to other
devices or sensing hardware. You should just be able to change the contents of
loop() to read and write values from memory[], which is exposed on the I2C bus.

Comments, questions, and complaints may be directed to marcusw@cox.net or the
nxt-python mailing list on Google Groups.
